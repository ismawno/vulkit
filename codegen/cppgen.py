from contextlib import contextmanager
from pathlib import Path


class CPPFile:
    def __init__(self, name: str, /):
        self.__name = name
        self.__file = ""
        self.__indents = 0

    def __call__(self, line: str, /, *, indent: int | None = None) -> None:
        tabs = " " * (self.__indents if indent is None else indent)
        self.__file += f"{tabs}{line}\n"

    def disclaimer(self, ffile: str, /) -> None:
        self(f"// Generated by Convoy reflection script: '{ffile}'")

    def include(self, header: str, /, *, quotes: bool = False) -> None:
        if quotes:
            self(f'#include "{header}"')
        else:
            self(f"#include <{header}>")

    def spacing(self, n: int = 1, /) -> None:
        for _ in range(n):
            self("")

    @contextmanager
    def scope(
        self,
        name: str | None = None,
        /,
        *,
        opener: str = "{",
        closer: str = "}",
        delimiters: bool = True,
        indent: int = 4,
    ):
        try:
            if name is not None:
                self(name)
            if delimiters and opener:
                self(opener)
            self.__indents += indent
            yield
        finally:
            self.__indents -= indent
            if delimiters and closer:
                self(closer)

    def write(self, path: Path | None = None, /) -> None:
        if path is None:
            path = Path(self.__name)
        else:
            path = path / self.__name

        path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("w") as file:
            file.write(self.__file)

    @property
    def name(self) -> str:
        return self.__name
