// Generated by Convoy's code generation script: 'vkloader.py'
#include "vkit/core/pch.hpp"
#include "vkit/vulkan/loader.hpp"
#include "tkit/utils/logging.hpp"
#if defined(TKIT_OS_APPLE) || defined(TKIT_OS_LINUX)
#    include <dlfcn.h>
#elif defined(TKIT_OS_WINDOWS)
#    include <windows.h>
#else
#    error "[VULKIT] Unsupported platform to load Vulkan library"
#endif
namespace VKit::Vulkan
{
#ifdef TKIT_ENABLE_ASSERTS
template <typename T> static T validateFunction(const char *p_Name, T &&p_Function)
{
    TKIT_ASSERT(p_Function, "The function '{}' is not available for the device being used.", p_Name);
    return p_Function;
}
#endif

PFN_vkCreateInstance vkCreateInstance = VK_NULL_HANDLE;
VkResult CreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator,
                        VkInstance *pInstance)
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateInstance fn = validateFunction("vkCreateInstance", Vulkan::vkCreateInstance);
    return fn(pCreateInfo, pAllocator, pInstance);
#else
    return Vulkan::vkCreateInstance(pCreateInfo, pAllocator, pInstance);
#endif
}
PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr = VK_NULL_HANDLE;
PFN_vkVoidFunction GetInstanceProcAddr(VkInstance instance, const char *pName)
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetInstanceProcAddr fn = validateFunction("vkGetInstanceProcAddr", Vulkan::vkGetInstanceProcAddr);
    return fn(instance, pName);
#else
    return Vulkan::vkGetInstanceProcAddr(instance, pName);
#endif
}
#if defined(VKIT_API_VERSION_1_1)
PFN_vkEnumerateInstanceVersion vkEnumerateInstanceVersion = VK_NULL_HANDLE;
VkResult EnumerateInstanceVersion(uint32_t *pApiVersion)
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumerateInstanceVersion fn =
        validateFunction("vkEnumerateInstanceVersion", Vulkan::vkEnumerateInstanceVersion);
    return fn(pApiVersion);
#    else
    return Vulkan::vkEnumerateInstanceVersion(pApiVersion);
#    endif
}
#endif
PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties = VK_NULL_HANDLE;
VkResult EnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties)
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumerateInstanceLayerProperties fn =
        validateFunction("vkEnumerateInstanceLayerProperties", Vulkan::vkEnumerateInstanceLayerProperties);
    return fn(pPropertyCount, pProperties);
#else
    return Vulkan::vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
#endif
}
PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties = VK_NULL_HANDLE;
VkResult EnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount,
                                              VkExtensionProperties *pProperties)
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumerateInstanceExtensionProperties fn =
        validateFunction("vkEnumerateInstanceExtensionProperties", Vulkan::vkEnumerateInstanceExtensionProperties);
    return fn(pLayerName, pPropertyCount, pProperties);
#else
    return Vulkan::vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
#endif
}

#if defined(TKIT_OS_APPLE) || defined(TKIT_OS_LINUX)
void Load(void *p_Library)
#else
void Load(HMODULE p_Library)
#endif
{
#if defined(TKIT_OS_APPLE) || defined(TKIT_OS_LINUX)
    Vulkan::vkGetInstanceProcAddr =
        reinterpret_cast<PFN_vkGetInstanceProcAddr>(dlsym(p_Library, "vkGetInstanceProcAddr"));
#else
    Vulkan::vkGetInstanceProcAddr =
        reinterpret_cast<PFN_vkGetInstanceProcAddr>(GetProcAddress(p_Library, "vkGetInstanceProcAddr"));
#endif

    Vulkan::vkCreateInstance =
        reinterpret_cast<PFN_vkCreateInstance>(GetInstanceProcAddr(VK_NULL_HANDLE, "vkCreateInstance"));
#if defined(VKIT_API_VERSION_1_1)
    Vulkan::vkEnumerateInstanceVersion = reinterpret_cast<PFN_vkEnumerateInstanceVersion>(
        GetInstanceProcAddr(VK_NULL_HANDLE, "vkEnumerateInstanceVersion"));
#endif
    Vulkan::vkEnumerateInstanceLayerProperties = reinterpret_cast<PFN_vkEnumerateInstanceLayerProperties>(
        GetInstanceProcAddr(VK_NULL_HANDLE, "vkEnumerateInstanceLayerProperties"));
    Vulkan::vkEnumerateInstanceExtensionProperties = reinterpret_cast<PFN_vkEnumerateInstanceExtensionProperties>(
        GetInstanceProcAddr(VK_NULL_HANDLE, "vkEnumerateInstanceExtensionProperties"));
}

InstanceTable InstanceTable::Create(const VkInstance p_Instance)
{
    InstanceTable table{};
    table.vkDestroyInstance =
        reinterpret_cast<PFN_vkDestroyInstance>(GetInstanceProcAddr(p_Instance, "vkDestroyInstance"));
    table.vkEnumeratePhysicalDevices =
        reinterpret_cast<PFN_vkEnumeratePhysicalDevices>(GetInstanceProcAddr(p_Instance, "vkEnumeratePhysicalDevices"));
    table.vkGetDeviceProcAddr =
        reinterpret_cast<PFN_vkGetDeviceProcAddr>(GetInstanceProcAddr(p_Instance, "vkGetDeviceProcAddr"));
    table.vkGetPhysicalDeviceProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceProperties"));
    table.vkGetPhysicalDeviceQueueFamilyProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyProperties"));
    table.vkGetPhysicalDeviceMemoryProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceMemoryProperties"));
    table.vkGetPhysicalDeviceFeatures = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFeatures"));
    table.vkGetPhysicalDeviceFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFormatProperties"));
    table.vkGetPhysicalDeviceImageFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceImageFormatProperties"));
    table.vkCreateDevice = reinterpret_cast<PFN_vkCreateDevice>(GetInstanceProcAddr(p_Instance, "vkCreateDevice"));
    table.vkEnumerateDeviceLayerProperties = reinterpret_cast<PFN_vkEnumerateDeviceLayerProperties>(
        GetInstanceProcAddr(p_Instance, "vkEnumerateDeviceLayerProperties"));
    table.vkEnumerateDeviceExtensionProperties = reinterpret_cast<PFN_vkEnumerateDeviceExtensionProperties>(
        GetInstanceProcAddr(p_Instance, "vkEnumerateDeviceExtensionProperties"));
    table.vkGetPhysicalDeviceSparseImageFormatProperties =
        reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSparseImageFormatProperties"));
#if defined(VK_KHR_android_surface)
    table.vkCreateAndroidSurfaceKHR =
        reinterpret_cast<PFN_vkCreateAndroidSurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkCreateAndroidSurfaceKHR"));
#endif
#if defined(VK_OHOS_surface)
    table.vkCreateSurfaceOHOS =
        reinterpret_cast<PFN_vkCreateSurfaceOHOS>(GetInstanceProcAddr(p_Instance, "vkCreateSurfaceOHOS"));
#endif
#if defined(VK_KHR_display)
    table.vkGetPhysicalDeviceDisplayPropertiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayPropertiesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceDisplayPropertiesKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkGetDisplayPlaneSupportedDisplaysKHR = reinterpret_cast<PFN_vkGetDisplayPlaneSupportedDisplaysKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetDisplayPlaneSupportedDisplaysKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkGetDisplayModePropertiesKHR = reinterpret_cast<PFN_vkGetDisplayModePropertiesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetDisplayModePropertiesKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkCreateDisplayModeKHR =
        reinterpret_cast<PFN_vkCreateDisplayModeKHR>(GetInstanceProcAddr(p_Instance, "vkCreateDisplayModeKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkGetDisplayPlaneCapabilitiesKHR = reinterpret_cast<PFN_vkGetDisplayPlaneCapabilitiesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetDisplayPlaneCapabilitiesKHR"));
#endif
#if defined(VK_KHR_display)
    table.vkCreateDisplayPlaneSurfaceKHR = reinterpret_cast<PFN_vkCreateDisplayPlaneSurfaceKHR>(
        GetInstanceProcAddr(p_Instance, "vkCreateDisplayPlaneSurfaceKHR"));
#endif
#if defined(VK_KHR_surface)
    table.vkDestroySurfaceKHR =
        reinterpret_cast<PFN_vkDestroySurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkDestroySurfaceKHR"));
#endif
#if defined(VK_KHR_surface)
    table.vkGetPhysicalDeviceSurfaceSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceSupportKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceSupportKHR"));
#endif
#if defined(VK_KHR_surface)
    table.vkGetPhysicalDeviceSurfaceCapabilitiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"));
#endif
#if defined(VK_KHR_surface)
    table.vkGetPhysicalDeviceSurfaceFormatsKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormatsKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceFormatsKHR"));
#endif
#if defined(VK_KHR_surface)
    table.vkGetPhysicalDeviceSurfacePresentModesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfacePresentModesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfacePresentModesKHR"));
#endif
#if defined(VK_NN_vi_surface)
    table.vkCreateViSurfaceNN =
        reinterpret_cast<PFN_vkCreateViSurfaceNN>(GetInstanceProcAddr(p_Instance, "vkCreateViSurfaceNN"));
#endif
#if defined(VK_KHR_wayland_surface)
    table.vkCreateWaylandSurfaceKHR =
        reinterpret_cast<PFN_vkCreateWaylandSurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkCreateWaylandSurfaceKHR"));
#endif
#if defined(VK_KHR_wayland_surface)
    table.vkGetPhysicalDeviceWaylandPresentationSupportKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"));
#endif
#if defined(VK_KHR_win32_surface)
    table.vkCreateWin32SurfaceKHR =
        reinterpret_cast<PFN_vkCreateWin32SurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkCreateWin32SurfaceKHR"));
#endif
#if defined(VK_KHR_win32_surface)
    table.vkGetPhysicalDeviceWin32PresentationSupportKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR"));
#endif
#if defined(VK_KHR_xlib_surface)
    table.vkCreateXlibSurfaceKHR =
        reinterpret_cast<PFN_vkCreateXlibSurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkCreateXlibSurfaceKHR"));
#endif
#if defined(VK_KHR_xlib_surface)
    table.vkGetPhysicalDeviceXlibPresentationSupportKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR"));
#endif
#if defined(VK_KHR_xcb_surface)
    table.vkCreateXcbSurfaceKHR =
        reinterpret_cast<PFN_vkCreateXcbSurfaceKHR>(GetInstanceProcAddr(p_Instance, "vkCreateXcbSurfaceKHR"));
#endif
#if defined(VK_KHR_xcb_surface)
    table.vkGetPhysicalDeviceXcbPresentationSupportKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR"));
#endif
#if defined(VK_EXT_directfb_surface)
    table.vkCreateDirectFBSurfaceEXT =
        reinterpret_cast<PFN_vkCreateDirectFBSurfaceEXT>(GetInstanceProcAddr(p_Instance, "vkCreateDirectFBSurfaceEXT"));
#endif
#if defined(VK_EXT_directfb_surface)
    table.vkGetPhysicalDeviceDirectFBPresentationSupportEXT =
        reinterpret_cast<PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"));
#endif
#if defined(VK_FUCHSIA_imagepipe_surface)
    table.vkCreateImagePipeSurfaceFUCHSIA = reinterpret_cast<PFN_vkCreateImagePipeSurfaceFUCHSIA>(
        GetInstanceProcAddr(p_Instance, "vkCreateImagePipeSurfaceFUCHSIA"));
#endif
#if defined(VK_GGP_stream_descriptor_surface)
    table.vkCreateStreamDescriptorSurfaceGGP = reinterpret_cast<PFN_vkCreateStreamDescriptorSurfaceGGP>(
        GetInstanceProcAddr(p_Instance, "vkCreateStreamDescriptorSurfaceGGP"));
#endif
#if defined(VK_QNX_screen_surface)
    table.vkCreateScreenSurfaceQNX =
        reinterpret_cast<PFN_vkCreateScreenSurfaceQNX>(GetInstanceProcAddr(p_Instance, "vkCreateScreenSurfaceQNX"));
#endif
#if defined(VK_QNX_screen_surface)
    table.vkGetPhysicalDeviceScreenPresentationSupportQNX =
        reinterpret_cast<PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceScreenPresentationSupportQNX"));
#endif
#if defined(VK_EXT_debug_report)
    table.vkCreateDebugReportCallbackEXT = reinterpret_cast<PFN_vkCreateDebugReportCallbackEXT>(
        GetInstanceProcAddr(p_Instance, "vkCreateDebugReportCallbackEXT"));
#endif
#if defined(VK_EXT_debug_report)
    table.vkDestroyDebugReportCallbackEXT = reinterpret_cast<PFN_vkDestroyDebugReportCallbackEXT>(
        GetInstanceProcAddr(p_Instance, "vkDestroyDebugReportCallbackEXT"));
#endif
#if defined(VK_EXT_debug_report)
    table.vkDebugReportMessageEXT =
        reinterpret_cast<PFN_vkDebugReportMessageEXT>(GetInstanceProcAddr(p_Instance, "vkDebugReportMessageEXT"));
#endif
#if defined(VK_NV_external_memory_capabilities)
    table.vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceFeatures2 = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFeatures2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceFormatProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFormatProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceImageFormatProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceImageFormatProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceQueueFamilyProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceMemoryProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties2>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceMemoryProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceSparseImageFormatProperties2 =
        reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSparseImageFormatProperties2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceExternalBufferProperties =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalBufferProperties>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalBufferProperties"));
#endif
#if defined(VK_NV_external_memory_sci_buf)
    table.vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV"));
#endif
#if defined(VK_NV_external_memory_sci_buf)
    table.vkGetPhysicalDeviceSciBufAttributesNV = reinterpret_cast<PFN_vkGetPhysicalDeviceSciBufAttributesNV>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSciBufAttributesNV"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceExternalSemaphoreProperties =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalSemaphoreProperties>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalSemaphoreProperties"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetPhysicalDeviceExternalFenceProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalFenceProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalFenceProperties"));
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
    table.vkGetPhysicalDeviceSciSyncAttributesNV = reinterpret_cast<PFN_vkGetPhysicalDeviceSciSyncAttributesNV>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSciSyncAttributesNV"));
#endif
#if defined(VK_EXT_direct_mode_display)
    table.vkReleaseDisplayEXT =
        reinterpret_cast<PFN_vkReleaseDisplayEXT>(GetInstanceProcAddr(p_Instance, "vkReleaseDisplayEXT"));
#endif
#if defined(VK_EXT_acquire_xlib_display)
    table.vkAcquireXlibDisplayEXT =
        reinterpret_cast<PFN_vkAcquireXlibDisplayEXT>(GetInstanceProcAddr(p_Instance, "vkAcquireXlibDisplayEXT"));
#endif
#if defined(VK_EXT_acquire_xlib_display)
    table.vkGetRandROutputDisplayEXT =
        reinterpret_cast<PFN_vkGetRandROutputDisplayEXT>(GetInstanceProcAddr(p_Instance, "vkGetRandROutputDisplayEXT"));
#endif
#if defined(VK_NV_acquire_winrt_display)
    table.vkAcquireWinrtDisplayNV =
        reinterpret_cast<PFN_vkAcquireWinrtDisplayNV>(GetInstanceProcAddr(p_Instance, "vkAcquireWinrtDisplayNV"));
#endif
#if defined(VK_NV_acquire_winrt_display)
    table.vkGetWinrtDisplayNV =
        reinterpret_cast<PFN_vkGetWinrtDisplayNV>(GetInstanceProcAddr(p_Instance, "vkGetWinrtDisplayNV"));
#endif
#if defined(VK_EXT_display_surface_counter)
    table.vkGetPhysicalDeviceSurfaceCapabilities2EXT = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkEnumeratePhysicalDeviceGroups = reinterpret_cast<PFN_vkEnumeratePhysicalDeviceGroups>(
        GetInstanceProcAddr(p_Instance, "vkEnumeratePhysicalDeviceGroups"));
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
    table.vkGetPhysicalDevicePresentRectanglesKHR = reinterpret_cast<PFN_vkGetPhysicalDevicePresentRectanglesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDevicePresentRectanglesKHR"));
#endif
#if defined(VK_MVK_ios_surface)
    table.vkCreateIOSSurfaceMVK =
        reinterpret_cast<PFN_vkCreateIOSSurfaceMVK>(GetInstanceProcAddr(p_Instance, "vkCreateIOSSurfaceMVK"));
#endif
#if defined(VK_MVK_macos_surface)
    table.vkCreateMacOSSurfaceMVK =
        reinterpret_cast<PFN_vkCreateMacOSSurfaceMVK>(GetInstanceProcAddr(p_Instance, "vkCreateMacOSSurfaceMVK"));
#endif
#if defined(VK_EXT_metal_surface)
    table.vkCreateMetalSurfaceEXT =
        reinterpret_cast<PFN_vkCreateMetalSurfaceEXT>(GetInstanceProcAddr(p_Instance, "vkCreateMetalSurfaceEXT"));
#endif
#if defined(VK_EXT_sample_locations)
    table.vkGetPhysicalDeviceMultisamplePropertiesEXT =
        reinterpret_cast<PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT"));
#endif
#if defined(VK_KHR_get_surface_capabilities2)
    table.vkGetPhysicalDeviceSurfaceCapabilities2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"));
#endif
#if defined(VK_KHR_get_surface_capabilities2)
    table.vkGetPhysicalDeviceSurfaceFormats2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormats2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfaceFormats2KHR"));
#endif
#if defined(VK_KHR_get_display_properties2)
    table.vkGetPhysicalDeviceDisplayProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayProperties2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceDisplayProperties2KHR"));
#endif
#if defined(VK_KHR_get_display_properties2)
    table.vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"));
#endif
#if defined(VK_KHR_get_display_properties2)
    table.vkGetDisplayModeProperties2KHR = reinterpret_cast<PFN_vkGetDisplayModeProperties2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetDisplayModeProperties2KHR"));
#endif
#if defined(VK_KHR_get_display_properties2)
    table.vkGetDisplayPlaneCapabilities2KHR = reinterpret_cast<PFN_vkGetDisplayPlaneCapabilities2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetDisplayPlaneCapabilities2KHR"));
#endif
#if defined(VK_KHR_calibrated_timestamps)
    table.vkGetPhysicalDeviceCalibrateableTimeDomainsKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkCreateDebugUtilsMessengerEXT = reinterpret_cast<PFN_vkCreateDebugUtilsMessengerEXT>(
        GetInstanceProcAddr(p_Instance, "vkCreateDebugUtilsMessengerEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkDestroyDebugUtilsMessengerEXT = reinterpret_cast<PFN_vkDestroyDebugUtilsMessengerEXT>(
        GetInstanceProcAddr(p_Instance, "vkDestroyDebugUtilsMessengerEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkSubmitDebugUtilsMessageEXT = reinterpret_cast<PFN_vkSubmitDebugUtilsMessageEXT>(
        GetInstanceProcAddr(p_Instance, "vkSubmitDebugUtilsMessageEXT"));
#endif
#if defined(VK_NV_cooperative_matrix)
    table.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"));
#endif
#if defined(VK_EXT_full_screen_exclusive)
    table.vkGetPhysicalDeviceSurfacePresentModes2EXT = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSurfacePresentModes2EXT"));
#endif
#if defined(VK_KHR_performance_query)
    table.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
        reinterpret_cast<PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>(
            GetInstanceProcAddr(p_Instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"));
#endif
#if defined(VK_KHR_performance_query)
    table.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"));
#endif
#if defined(VK_EXT_headless_surface)
    table.vkCreateHeadlessSurfaceEXT =
        reinterpret_cast<PFN_vkCreateHeadlessSurfaceEXT>(GetInstanceProcAddr(p_Instance, "vkCreateHeadlessSurfaceEXT"));
#endif
#if defined(VK_NV_coverage_reduction_mode)
    table.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkGetPhysicalDeviceToolProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceToolProperties>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceToolProperties"));
#endif
#if defined(VK_KHR_object_refresh)
    table.vkGetPhysicalDeviceRefreshableObjectTypesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceRefreshableObjectTypesKHR"));
#endif
#if defined(VK_KHR_fragment_shading_rate)
    table.vkGetPhysicalDeviceFragmentShadingRatesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkGetPhysicalDeviceVideoCapabilitiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkGetPhysicalDeviceVideoFormatPropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR"));
#endif
#if defined(VK_KHR_video_encode_queue)
    table.vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"));
#endif
#if defined(VK_EXT_acquire_drm_display)
    table.vkAcquireDrmDisplayEXT =
        reinterpret_cast<PFN_vkAcquireDrmDisplayEXT>(GetInstanceProcAddr(p_Instance, "vkAcquireDrmDisplayEXT"));
#endif
#if defined(VK_EXT_acquire_drm_display)
    table.vkGetDrmDisplayEXT =
        reinterpret_cast<PFN_vkGetDrmDisplayEXT>(GetInstanceProcAddr(p_Instance, "vkGetDrmDisplayEXT"));
#endif
#if defined(VK_NV_optical_flow)
    table.vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"));
#endif
#if defined(VK_KHR_cooperative_matrix)
    table.vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"));
#endif
#if defined(VK_NV_cooperative_matrix2)
    table.vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"));
#endif
#if defined(VK_NV_cooperative_vector)
    table.vkGetPhysicalDeviceCooperativeVectorPropertiesNV =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCooperativeVectorPropertiesNV"));
#endif
#if defined(VK_ARM_tensors)
    table.vkGetPhysicalDeviceExternalTensorPropertiesARM =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalTensorPropertiesARM>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalTensorPropertiesARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM =
        reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM =
        reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceFeatures2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFeatures2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceProperties2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceFormatProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceFormatProperties2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceImageFormatProperties2KHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties2KHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceImageFormatProperties2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceQueueFamilyProperties2KHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceMemoryProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties2KHR>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceMemoryProperties2KHR"));
#endif
#if defined(VK_KHR_get_physical_device_properties2)
    table.vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"));
#endif
#if defined(VK_KHR_external_memory_capabilities)
    table.vkGetPhysicalDeviceExternalBufferPropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR"));
#endif
#if defined(VK_KHR_external_semaphore_capabilities)
    table.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"));
#endif
#if defined(VK_KHR_external_fence_capabilities)
    table.vkGetPhysicalDeviceExternalFencePropertiesKHR =
        reinterpret_cast<PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR"));
#endif
#if defined(VK_KHR_device_group_creation)
    table.vkEnumeratePhysicalDeviceGroupsKHR = reinterpret_cast<PFN_vkEnumeratePhysicalDeviceGroupsKHR>(
        GetInstanceProcAddr(p_Instance, "vkEnumeratePhysicalDeviceGroupsKHR"));
#endif
#if defined(VK_EXT_calibrated_timestamps)
    table.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
        reinterpret_cast<PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>(
            GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"));
#endif
#if defined(VK_EXT_tooling_info)
    table.vkGetPhysicalDeviceToolPropertiesEXT = reinterpret_cast<PFN_vkGetPhysicalDeviceToolPropertiesEXT>(
        GetInstanceProcAddr(p_Instance, "vkGetPhysicalDeviceToolPropertiesEXT"));
#endif
    return table;
}

DeviceTable DeviceTable::Create(const VkDevice p_Device, const InstanceTable &p_InstanceFuncs)
{
    DeviceTable table{};
    table.vkDestroyDevice =
        reinterpret_cast<PFN_vkDestroyDevice>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDevice"));
    table.vkGetDeviceQueue =
        reinterpret_cast<PFN_vkGetDeviceQueue>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceQueue"));
    table.vkQueueSubmit =
        reinterpret_cast<PFN_vkQueueSubmit>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueSubmit"));
    table.vkQueueWaitIdle =
        reinterpret_cast<PFN_vkQueueWaitIdle>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueWaitIdle"));
    table.vkDeviceWaitIdle =
        reinterpret_cast<PFN_vkDeviceWaitIdle>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDeviceWaitIdle"));
    table.vkAllocateMemory =
        reinterpret_cast<PFN_vkAllocateMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAllocateMemory"));
    table.vkFreeMemory =
        reinterpret_cast<PFN_vkFreeMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkFreeMemory"));
    table.vkMapMemory = reinterpret_cast<PFN_vkMapMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkMapMemory"));
    table.vkUnmapMemory =
        reinterpret_cast<PFN_vkUnmapMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUnmapMemory"));
    table.vkFlushMappedMemoryRanges = reinterpret_cast<PFN_vkFlushMappedMemoryRanges>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkFlushMappedMemoryRanges"));
    table.vkInvalidateMappedMemoryRanges = reinterpret_cast<PFN_vkInvalidateMappedMemoryRanges>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkInvalidateMappedMemoryRanges"));
    table.vkGetDeviceMemoryCommitment = reinterpret_cast<PFN_vkGetDeviceMemoryCommitment>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceMemoryCommitment"));
    table.vkGetBufferMemoryRequirements = reinterpret_cast<PFN_vkGetBufferMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferMemoryRequirements"));
    table.vkBindBufferMemory =
        reinterpret_cast<PFN_vkBindBufferMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindBufferMemory"));
    table.vkGetImageMemoryRequirements = reinterpret_cast<PFN_vkGetImageMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageMemoryRequirements"));
    table.vkBindImageMemory =
        reinterpret_cast<PFN_vkBindImageMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindImageMemory"));
    table.vkGetImageSparseMemoryRequirements = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSparseMemoryRequirements"));
    table.vkQueueBindSparse =
        reinterpret_cast<PFN_vkQueueBindSparse>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueBindSparse"));
    table.vkCreateFence =
        reinterpret_cast<PFN_vkCreateFence>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateFence"));
    table.vkDestroyFence =
        reinterpret_cast<PFN_vkDestroyFence>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyFence"));
    table.vkResetFences =
        reinterpret_cast<PFN_vkResetFences>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetFences"));
    table.vkGetFenceStatus =
        reinterpret_cast<PFN_vkGetFenceStatus>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFenceStatus"));
    table.vkWaitForFences =
        reinterpret_cast<PFN_vkWaitForFences>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWaitForFences"));
    table.vkCreateSemaphore =
        reinterpret_cast<PFN_vkCreateSemaphore>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSemaphore"));
    table.vkDestroySemaphore =
        reinterpret_cast<PFN_vkDestroySemaphore>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySemaphore"));
    table.vkCreateEvent =
        reinterpret_cast<PFN_vkCreateEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateEvent"));
    table.vkDestroyEvent =
        reinterpret_cast<PFN_vkDestroyEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyEvent"));
    table.vkGetEventStatus =
        reinterpret_cast<PFN_vkGetEventStatus>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetEventStatus"));
    table.vkSetEvent = reinterpret_cast<PFN_vkSetEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetEvent"));
    table.vkResetEvent =
        reinterpret_cast<PFN_vkResetEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetEvent"));
    table.vkCreateQueryPool =
        reinterpret_cast<PFN_vkCreateQueryPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateQueryPool"));
    table.vkDestroyQueryPool =
        reinterpret_cast<PFN_vkDestroyQueryPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyQueryPool"));
    table.vkGetQueryPoolResults = reinterpret_cast<PFN_vkGetQueryPoolResults>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetQueryPoolResults"));
#if defined(VKIT_API_VERSION_1_2)
    table.vkResetQueryPool =
        reinterpret_cast<PFN_vkResetQueryPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetQueryPool"));
#endif
    table.vkCreateBuffer =
        reinterpret_cast<PFN_vkCreateBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateBuffer"));
    table.vkDestroyBuffer =
        reinterpret_cast<PFN_vkDestroyBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyBuffer"));
    table.vkCreateBufferView =
        reinterpret_cast<PFN_vkCreateBufferView>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateBufferView"));
    table.vkDestroyBufferView =
        reinterpret_cast<PFN_vkDestroyBufferView>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyBufferView"));
    table.vkCreateImage =
        reinterpret_cast<PFN_vkCreateImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateImage"));
    table.vkDestroyImage =
        reinterpret_cast<PFN_vkDestroyImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyImage"));
    table.vkGetImageSubresourceLayout = reinterpret_cast<PFN_vkGetImageSubresourceLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSubresourceLayout"));
    table.vkCreateImageView =
        reinterpret_cast<PFN_vkCreateImageView>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateImageView"));
    table.vkDestroyImageView =
        reinterpret_cast<PFN_vkDestroyImageView>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyImageView"));
    table.vkCreateShaderModule =
        reinterpret_cast<PFN_vkCreateShaderModule>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateShaderModule"));
    table.vkDestroyShaderModule = reinterpret_cast<PFN_vkDestroyShaderModule>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyShaderModule"));
    table.vkCreatePipelineCache = reinterpret_cast<PFN_vkCreatePipelineCache>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreatePipelineCache"));
    table.vkDestroyPipelineCache = reinterpret_cast<PFN_vkDestroyPipelineCache>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPipelineCache"));
    table.vkGetPipelineCacheData = reinterpret_cast<PFN_vkGetPipelineCacheData>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineCacheData"));
    table.vkMergePipelineCaches = reinterpret_cast<PFN_vkMergePipelineCaches>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkMergePipelineCaches"));
#if defined(VK_KHR_pipeline_binary)
    table.vkCreatePipelineBinariesKHR = reinterpret_cast<PFN_vkCreatePipelineBinariesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreatePipelineBinariesKHR"));
#endif
#if defined(VK_KHR_pipeline_binary)
    table.vkDestroyPipelineBinaryKHR = reinterpret_cast<PFN_vkDestroyPipelineBinaryKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPipelineBinaryKHR"));
#endif
#if defined(VK_KHR_pipeline_binary)
    table.vkGetPipelineKeyKHR =
        reinterpret_cast<PFN_vkGetPipelineKeyKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineKeyKHR"));
#endif
#if defined(VK_KHR_pipeline_binary)
    table.vkGetPipelineBinaryDataKHR = reinterpret_cast<PFN_vkGetPipelineBinaryDataKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineBinaryDataKHR"));
#endif
#if defined(VK_KHR_pipeline_binary)
    table.vkReleaseCapturedPipelineDataKHR = reinterpret_cast<PFN_vkReleaseCapturedPipelineDataKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleaseCapturedPipelineDataKHR"));
#endif
    table.vkCreateGraphicsPipelines = reinterpret_cast<PFN_vkCreateGraphicsPipelines>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateGraphicsPipelines"));
    table.vkCreateComputePipelines = reinterpret_cast<PFN_vkCreateComputePipelines>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateComputePipelines"));
#if (defined(VK_HUAWEI_subpass_shading) && VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION >= 2)
    table.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
        reinterpret_cast<PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"));
#endif
    table.vkDestroyPipeline =
        reinterpret_cast<PFN_vkDestroyPipeline>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPipeline"));
    table.vkCreatePipelineLayout = reinterpret_cast<PFN_vkCreatePipelineLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreatePipelineLayout"));
    table.vkDestroyPipelineLayout = reinterpret_cast<PFN_vkDestroyPipelineLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPipelineLayout"));
    table.vkCreateSampler =
        reinterpret_cast<PFN_vkCreateSampler>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSampler"));
    table.vkDestroySampler =
        reinterpret_cast<PFN_vkDestroySampler>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySampler"));
    table.vkCreateDescriptorSetLayout = reinterpret_cast<PFN_vkCreateDescriptorSetLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDescriptorSetLayout"));
    table.vkDestroyDescriptorSetLayout = reinterpret_cast<PFN_vkDestroyDescriptorSetLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDescriptorSetLayout"));
    table.vkCreateDescriptorPool = reinterpret_cast<PFN_vkCreateDescriptorPool>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDescriptorPool"));
    table.vkDestroyDescriptorPool = reinterpret_cast<PFN_vkDestroyDescriptorPool>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDescriptorPool"));
    table.vkResetDescriptorPool = reinterpret_cast<PFN_vkResetDescriptorPool>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetDescriptorPool"));
    table.vkAllocateDescriptorSets = reinterpret_cast<PFN_vkAllocateDescriptorSets>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAllocateDescriptorSets"));
    table.vkFreeDescriptorSets =
        reinterpret_cast<PFN_vkFreeDescriptorSets>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkFreeDescriptorSets"));
    table.vkUpdateDescriptorSets = reinterpret_cast<PFN_vkUpdateDescriptorSets>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateDescriptorSets"));
    table.vkCreateFramebuffer =
        reinterpret_cast<PFN_vkCreateFramebuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateFramebuffer"));
    table.vkDestroyFramebuffer =
        reinterpret_cast<PFN_vkDestroyFramebuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyFramebuffer"));
    table.vkCreateRenderPass =
        reinterpret_cast<PFN_vkCreateRenderPass>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateRenderPass"));
    table.vkDestroyRenderPass =
        reinterpret_cast<PFN_vkDestroyRenderPass>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyRenderPass"));
    table.vkGetRenderAreaGranularity = reinterpret_cast<PFN_vkGetRenderAreaGranularity>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRenderAreaGranularity"));
#if defined(VKIT_API_VERSION_1_4)
    table.vkGetRenderingAreaGranularity = reinterpret_cast<PFN_vkGetRenderingAreaGranularity>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRenderingAreaGranularity"));
#endif
    table.vkCreateCommandPool =
        reinterpret_cast<PFN_vkCreateCommandPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateCommandPool"));
    table.vkDestroyCommandPool =
        reinterpret_cast<PFN_vkDestroyCommandPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyCommandPool"));
    table.vkResetCommandPool =
        reinterpret_cast<PFN_vkResetCommandPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetCommandPool"));
    table.vkAllocateCommandBuffers = reinterpret_cast<PFN_vkAllocateCommandBuffers>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAllocateCommandBuffers"));
    table.vkFreeCommandBuffers =
        reinterpret_cast<PFN_vkFreeCommandBuffers>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkFreeCommandBuffers"));
    table.vkBeginCommandBuffer =
        reinterpret_cast<PFN_vkBeginCommandBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBeginCommandBuffer"));
    table.vkEndCommandBuffer =
        reinterpret_cast<PFN_vkEndCommandBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkEndCommandBuffer"));
    table.vkResetCommandBuffer =
        reinterpret_cast<PFN_vkResetCommandBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetCommandBuffer"));
    table.vkCmdBindPipeline =
        reinterpret_cast<PFN_vkCmdBindPipeline>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindPipeline"));
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
    table.vkCmdSetAttachmentFeedbackLoopEnableEXT = reinterpret_cast<PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetAttachmentFeedbackLoopEnableEXT"));
#endif
    table.vkCmdSetViewport =
        reinterpret_cast<PFN_vkCmdSetViewport>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewport"));
    table.vkCmdSetScissor =
        reinterpret_cast<PFN_vkCmdSetScissor>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetScissor"));
    table.vkCmdSetLineWidth =
        reinterpret_cast<PFN_vkCmdSetLineWidth>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineWidth"));
    table.vkCmdSetDepthBias =
        reinterpret_cast<PFN_vkCmdSetDepthBias>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBias"));
    table.vkCmdSetBlendConstants = reinterpret_cast<PFN_vkCmdSetBlendConstants>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetBlendConstants"));
    table.vkCmdSetDepthBounds =
        reinterpret_cast<PFN_vkCmdSetDepthBounds>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBounds"));
    table.vkCmdSetStencilCompareMask = reinterpret_cast<PFN_vkCmdSetStencilCompareMask>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilCompareMask"));
    table.vkCmdSetStencilWriteMask = reinterpret_cast<PFN_vkCmdSetStencilWriteMask>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilWriteMask"));
    table.vkCmdSetStencilReference = reinterpret_cast<PFN_vkCmdSetStencilReference>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilReference"));
    table.vkCmdBindDescriptorSets = reinterpret_cast<PFN_vkCmdBindDescriptorSets>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorSets"));
    table.vkCmdBindIndexBuffer =
        reinterpret_cast<PFN_vkCmdBindIndexBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindIndexBuffer"));
    table.vkCmdBindVertexBuffers = reinterpret_cast<PFN_vkCmdBindVertexBuffers>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindVertexBuffers"));
    table.vkCmdDraw = reinterpret_cast<PFN_vkCmdDraw>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDraw"));
    table.vkCmdDrawIndexed =
        reinterpret_cast<PFN_vkCmdDrawIndexed>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndexed"));
#if defined(VK_EXT_multi_draw)
    table.vkCmdDrawMultiEXT =
        reinterpret_cast<PFN_vkCmdDrawMultiEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMultiEXT"));
#endif
#if defined(VK_EXT_multi_draw)
    table.vkCmdDrawMultiIndexedEXT = reinterpret_cast<PFN_vkCmdDrawMultiIndexedEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMultiIndexedEXT"));
#endif
    table.vkCmdDrawIndirect =
        reinterpret_cast<PFN_vkCmdDrawIndirect>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndirect"));
    table.vkCmdDrawIndexedIndirect = reinterpret_cast<PFN_vkCmdDrawIndexedIndirect>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndexedIndirect"));
    table.vkCmdDispatch =
        reinterpret_cast<PFN_vkCmdDispatch>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatch"));
    table.vkCmdDispatchIndirect = reinterpret_cast<PFN_vkCmdDispatchIndirect>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchIndirect"));
#if (defined(VK_HUAWEI_subpass_shading) && VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION >= 2)
    table.vkCmdSubpassShadingHUAWEI = reinterpret_cast<PFN_vkCmdSubpassShadingHUAWEI>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSubpassShadingHUAWEI"));
#endif
#if defined(VK_HUAWEI_cluster_culling_shader)
    table.vkCmdDrawClusterHUAWEI = reinterpret_cast<PFN_vkCmdDrawClusterHUAWEI>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawClusterHUAWEI"));
#endif
#if defined(VK_HUAWEI_cluster_culling_shader)
    table.vkCmdDrawClusterIndirectHUAWEI = reinterpret_cast<PFN_vkCmdDrawClusterIndirectHUAWEI>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawClusterIndirectHUAWEI"));
#endif
#if defined(VK_NV_device_generated_commands_compute)
    table.vkCmdUpdatePipelineIndirectBufferNV = reinterpret_cast<PFN_vkCmdUpdatePipelineIndirectBufferNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdUpdatePipelineIndirectBufferNV"));
#endif
    table.vkCmdCopyBuffer =
        reinterpret_cast<PFN_vkCmdCopyBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBuffer"));
    table.vkCmdCopyImage =
        reinterpret_cast<PFN_vkCmdCopyImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImage"));
    table.vkCmdBlitImage =
        reinterpret_cast<PFN_vkCmdBlitImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBlitImage"));
    table.vkCmdCopyBufferToImage = reinterpret_cast<PFN_vkCmdCopyBufferToImage>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBufferToImage"));
    table.vkCmdCopyImageToBuffer = reinterpret_cast<PFN_vkCmdCopyImageToBuffer>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImageToBuffer"));
#if defined(VK_NV_copy_memory_indirect)
    table.vkCmdCopyMemoryIndirectNV = reinterpret_cast<PFN_vkCmdCopyMemoryIndirectNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMemoryIndirectNV"));
#endif
#if defined(VK_NV_copy_memory_indirect)
    table.vkCmdCopyMemoryToImageIndirectNV = reinterpret_cast<PFN_vkCmdCopyMemoryToImageIndirectNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMemoryToImageIndirectNV"));
#endif
    table.vkCmdUpdateBuffer =
        reinterpret_cast<PFN_vkCmdUpdateBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdUpdateBuffer"));
    table.vkCmdFillBuffer =
        reinterpret_cast<PFN_vkCmdFillBuffer>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdFillBuffer"));
    table.vkCmdClearColorImage =
        reinterpret_cast<PFN_vkCmdClearColorImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdClearColorImage"));
    table.vkCmdClearDepthStencilImage = reinterpret_cast<PFN_vkCmdClearDepthStencilImage>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdClearDepthStencilImage"));
    table.vkCmdClearAttachments = reinterpret_cast<PFN_vkCmdClearAttachments>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdClearAttachments"));
    table.vkCmdResolveImage =
        reinterpret_cast<PFN_vkCmdResolveImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResolveImage"));
    table.vkCmdSetEvent =
        reinterpret_cast<PFN_vkCmdSetEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetEvent"));
    table.vkCmdResetEvent =
        reinterpret_cast<PFN_vkCmdResetEvent>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResetEvent"));
    table.vkCmdWaitEvents =
        reinterpret_cast<PFN_vkCmdWaitEvents>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWaitEvents"));
    table.vkCmdPipelineBarrier =
        reinterpret_cast<PFN_vkCmdPipelineBarrier>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPipelineBarrier"));
    table.vkCmdBeginQuery =
        reinterpret_cast<PFN_vkCmdBeginQuery>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginQuery"));
    table.vkCmdEndQuery =
        reinterpret_cast<PFN_vkCmdEndQuery>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndQuery"));
#if defined(VK_EXT_conditional_rendering)
    table.vkCmdBeginConditionalRenderingEXT = reinterpret_cast<PFN_vkCmdBeginConditionalRenderingEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginConditionalRenderingEXT"));
#endif
#if defined(VK_EXT_conditional_rendering)
    table.vkCmdEndConditionalRenderingEXT = reinterpret_cast<PFN_vkCmdEndConditionalRenderingEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndConditionalRenderingEXT"));
#endif
    table.vkCmdResetQueryPool =
        reinterpret_cast<PFN_vkCmdResetQueryPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResetQueryPool"));
    table.vkCmdWriteTimestamp =
        reinterpret_cast<PFN_vkCmdWriteTimestamp>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteTimestamp"));
    table.vkCmdCopyQueryPoolResults = reinterpret_cast<PFN_vkCmdCopyQueryPoolResults>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyQueryPoolResults"));
    table.vkCmdPushConstants =
        reinterpret_cast<PFN_vkCmdPushConstants>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushConstants"));
    table.vkCmdBeginRenderPass =
        reinterpret_cast<PFN_vkCmdBeginRenderPass>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginRenderPass"));
    table.vkCmdNextSubpass =
        reinterpret_cast<PFN_vkCmdNextSubpass>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdNextSubpass"));
    table.vkCmdEndRenderPass =
        reinterpret_cast<PFN_vkCmdEndRenderPass>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRenderPass"));
    table.vkCmdExecuteCommands =
        reinterpret_cast<PFN_vkCmdExecuteCommands>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdExecuteCommands"));
#if defined(VK_KHR_display_swapchain)
    table.vkCreateSharedSwapchainsKHR = reinterpret_cast<PFN_vkCreateSharedSwapchainsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSharedSwapchainsKHR"));
#endif
#if defined(VK_KHR_swapchain)
    table.vkCreateSwapchainKHR =
        reinterpret_cast<PFN_vkCreateSwapchainKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSwapchainKHR"));
#endif
#if defined(VK_KHR_swapchain)
    table.vkDestroySwapchainKHR = reinterpret_cast<PFN_vkDestroySwapchainKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySwapchainKHR"));
#endif
#if defined(VK_KHR_swapchain)
    table.vkGetSwapchainImagesKHR = reinterpret_cast<PFN_vkGetSwapchainImagesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSwapchainImagesKHR"));
#endif
#if defined(VK_KHR_swapchain)
    table.vkAcquireNextImageKHR = reinterpret_cast<PFN_vkAcquireNextImageKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquireNextImageKHR"));
#endif
#if defined(VK_KHR_swapchain)
    table.vkQueuePresentKHR =
        reinterpret_cast<PFN_vkQueuePresentKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueuePresentKHR"));
#endif
#if defined(VK_EXT_debug_marker)
    table.vkDebugMarkerSetObjectNameEXT = reinterpret_cast<PFN_vkDebugMarkerSetObjectNameEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDebugMarkerSetObjectNameEXT"));
#endif
#if defined(VK_EXT_debug_marker)
    table.vkDebugMarkerSetObjectTagEXT = reinterpret_cast<PFN_vkDebugMarkerSetObjectTagEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDebugMarkerSetObjectTagEXT"));
#endif
#if defined(VK_EXT_debug_marker)
    table.vkCmdDebugMarkerBeginEXT = reinterpret_cast<PFN_vkCmdDebugMarkerBeginEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDebugMarkerBeginEXT"));
#endif
#if defined(VK_EXT_debug_marker)
    table.vkCmdDebugMarkerEndEXT = reinterpret_cast<PFN_vkCmdDebugMarkerEndEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDebugMarkerEndEXT"));
#endif
#if defined(VK_EXT_debug_marker)
    table.vkCmdDebugMarkerInsertEXT = reinterpret_cast<PFN_vkCmdDebugMarkerInsertEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDebugMarkerInsertEXT"));
#endif
#if defined(VK_NV_external_memory_win32)
    table.vkGetMemoryWin32HandleNV = reinterpret_cast<PFN_vkGetMemoryWin32HandleNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryWin32HandleNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkCmdExecuteGeneratedCommandsNV = reinterpret_cast<PFN_vkCmdExecuteGeneratedCommandsNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdExecuteGeneratedCommandsNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkCmdPreprocessGeneratedCommandsNV = reinterpret_cast<PFN_vkCmdPreprocessGeneratedCommandsNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPreprocessGeneratedCommandsNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkCmdBindPipelineShaderGroupNV = reinterpret_cast<PFN_vkCmdBindPipelineShaderGroupNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindPipelineShaderGroupNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkGetGeneratedCommandsMemoryRequirementsNV = reinterpret_cast<PFN_vkGetGeneratedCommandsMemoryRequirementsNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetGeneratedCommandsMemoryRequirementsNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkCreateIndirectCommandsLayoutNV = reinterpret_cast<PFN_vkCreateIndirectCommandsLayoutNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateIndirectCommandsLayoutNV"));
#endif
#if defined(VK_NV_device_generated_commands)
    table.vkDestroyIndirectCommandsLayoutNV = reinterpret_cast<PFN_vkDestroyIndirectCommandsLayoutNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyIndirectCommandsLayoutNV"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkCmdExecuteGeneratedCommandsEXT = reinterpret_cast<PFN_vkCmdExecuteGeneratedCommandsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdExecuteGeneratedCommandsEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkCmdPreprocessGeneratedCommandsEXT = reinterpret_cast<PFN_vkCmdPreprocessGeneratedCommandsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPreprocessGeneratedCommandsEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkGetGeneratedCommandsMemoryRequirementsEXT =
        reinterpret_cast<PFN_vkGetGeneratedCommandsMemoryRequirementsEXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetGeneratedCommandsMemoryRequirementsEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkCreateIndirectCommandsLayoutEXT = reinterpret_cast<PFN_vkCreateIndirectCommandsLayoutEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateIndirectCommandsLayoutEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkDestroyIndirectCommandsLayoutEXT = reinterpret_cast<PFN_vkDestroyIndirectCommandsLayoutEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyIndirectCommandsLayoutEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkCreateIndirectExecutionSetEXT = reinterpret_cast<PFN_vkCreateIndirectExecutionSetEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateIndirectExecutionSetEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkDestroyIndirectExecutionSetEXT = reinterpret_cast<PFN_vkDestroyIndirectExecutionSetEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyIndirectExecutionSetEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkUpdateIndirectExecutionSetPipelineEXT = reinterpret_cast<PFN_vkUpdateIndirectExecutionSetPipelineEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateIndirectExecutionSetPipelineEXT"));
#endif
#if defined(VK_EXT_device_generated_commands)
    table.vkUpdateIndirectExecutionSetShaderEXT = reinterpret_cast<PFN_vkUpdateIndirectExecutionSetShaderEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateIndirectExecutionSetShaderEXT"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdPushDescriptorSet = reinterpret_cast<PFN_vkCmdPushDescriptorSet>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSet"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkTrimCommandPool =
        reinterpret_cast<PFN_vkTrimCommandPool>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkTrimCommandPool"));
#endif
#if defined(VK_KHR_external_memory_win32)
    table.vkGetMemoryWin32HandleKHR = reinterpret_cast<PFN_vkGetMemoryWin32HandleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryWin32HandleKHR"));
#endif
#if defined(VK_KHR_external_memory_win32)
    table.vkGetMemoryWin32HandlePropertiesKHR = reinterpret_cast<PFN_vkGetMemoryWin32HandlePropertiesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryWin32HandlePropertiesKHR"));
#endif
#if defined(VK_KHR_external_memory_fd)
    table.vkGetMemoryFdKHR =
        reinterpret_cast<PFN_vkGetMemoryFdKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryFdKHR"));
#endif
#if defined(VK_KHR_external_memory_fd)
    table.vkGetMemoryFdPropertiesKHR = reinterpret_cast<PFN_vkGetMemoryFdPropertiesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryFdPropertiesKHR"));
#endif
#if defined(VK_FUCHSIA_external_memory)
    table.vkGetMemoryZirconHandleFUCHSIA = reinterpret_cast<PFN_vkGetMemoryZirconHandleFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryZirconHandleFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_external_memory)
    table.vkGetMemoryZirconHandlePropertiesFUCHSIA = reinterpret_cast<PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryZirconHandlePropertiesFUCHSIA"));
#endif
#if defined(VK_NV_external_memory_rdma)
    table.vkGetMemoryRemoteAddressNV = reinterpret_cast<PFN_vkGetMemoryRemoteAddressNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryRemoteAddressNV"));
#endif
#if defined(VK_NV_external_memory_sci_buf)
    table.vkGetMemorySciBufNV =
        reinterpret_cast<PFN_vkGetMemorySciBufNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemorySciBufNV"));
#endif
#if defined(VK_KHR_external_semaphore_win32)
    table.vkGetSemaphoreWin32HandleKHR = reinterpret_cast<PFN_vkGetSemaphoreWin32HandleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreWin32HandleKHR"));
#endif
#if defined(VK_KHR_external_semaphore_win32)
    table.vkImportSemaphoreWin32HandleKHR = reinterpret_cast<PFN_vkImportSemaphoreWin32HandleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportSemaphoreWin32HandleKHR"));
#endif
#if defined(VK_KHR_external_semaphore_fd)
    table.vkGetSemaphoreFdKHR =
        reinterpret_cast<PFN_vkGetSemaphoreFdKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreFdKHR"));
#endif
#if defined(VK_KHR_external_semaphore_fd)
    table.vkImportSemaphoreFdKHR = reinterpret_cast<PFN_vkImportSemaphoreFdKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportSemaphoreFdKHR"));
#endif
#if defined(VK_FUCHSIA_external_semaphore)
    table.vkGetSemaphoreZirconHandleFUCHSIA = reinterpret_cast<PFN_vkGetSemaphoreZirconHandleFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreZirconHandleFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_external_semaphore)
    table.vkImportSemaphoreZirconHandleFUCHSIA = reinterpret_cast<PFN_vkImportSemaphoreZirconHandleFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportSemaphoreZirconHandleFUCHSIA"));
#endif
#if defined(VK_KHR_external_fence_win32)
    table.vkGetFenceWin32HandleKHR = reinterpret_cast<PFN_vkGetFenceWin32HandleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFenceWin32HandleKHR"));
#endif
#if defined(VK_KHR_external_fence_win32)
    table.vkImportFenceWin32HandleKHR = reinterpret_cast<PFN_vkImportFenceWin32HandleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportFenceWin32HandleKHR"));
#endif
#if defined(VK_KHR_external_fence_fd)
    table.vkGetFenceFdKHR =
        reinterpret_cast<PFN_vkGetFenceFdKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFenceFdKHR"));
#endif
#if defined(VK_KHR_external_fence_fd)
    table.vkImportFenceFdKHR =
        reinterpret_cast<PFN_vkImportFenceFdKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportFenceFdKHR"));
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
    table.vkGetFenceSciSyncFenceNV = reinterpret_cast<PFN_vkGetFenceSciSyncFenceNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFenceSciSyncFenceNV"));
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
    table.vkGetFenceSciSyncObjNV = reinterpret_cast<PFN_vkGetFenceSciSyncObjNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFenceSciSyncObjNV"));
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
    table.vkImportFenceSciSyncFenceNV = reinterpret_cast<PFN_vkImportFenceSciSyncFenceNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportFenceSciSyncFenceNV"));
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
    table.vkImportFenceSciSyncObjNV = reinterpret_cast<PFN_vkImportFenceSciSyncObjNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportFenceSciSyncObjNV"));
#endif
#if defined(VK_NV_external_sci_sync)
    table.vkGetSemaphoreSciSyncObjNV = reinterpret_cast<PFN_vkGetSemaphoreSciSyncObjNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreSciSyncObjNV"));
#endif
#if defined(VK_NV_external_sci_sync)
    table.vkImportSemaphoreSciSyncObjNV = reinterpret_cast<PFN_vkImportSemaphoreSciSyncObjNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkImportSemaphoreSciSyncObjNV"));
#endif
#if defined(VK_NV_external_sci_sync2)
    table.vkCreateSemaphoreSciSyncPoolNV = reinterpret_cast<PFN_vkCreateSemaphoreSciSyncPoolNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSemaphoreSciSyncPoolNV"));
#endif
#if defined(VK_NV_external_sci_sync2)
    table.vkDestroySemaphoreSciSyncPoolNV = reinterpret_cast<PFN_vkDestroySemaphoreSciSyncPoolNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySemaphoreSciSyncPoolNV"));
#endif
#if defined(VK_EXT_display_control)
    table.vkDisplayPowerControlEXT = reinterpret_cast<PFN_vkDisplayPowerControlEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDisplayPowerControlEXT"));
#endif
#if defined(VK_EXT_display_control)
    table.vkRegisterDeviceEventEXT = reinterpret_cast<PFN_vkRegisterDeviceEventEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkRegisterDeviceEventEXT"));
#endif
#if defined(VK_EXT_display_control)
    table.vkRegisterDisplayEventEXT = reinterpret_cast<PFN_vkRegisterDisplayEventEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkRegisterDisplayEventEXT"));
#endif
#if defined(VK_EXT_display_control)
    table.vkGetSwapchainCounterEXT = reinterpret_cast<PFN_vkGetSwapchainCounterEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSwapchainCounterEXT"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetDeviceGroupPeerMemoryFeatures = reinterpret_cast<PFN_vkGetDeviceGroupPeerMemoryFeatures>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceGroupPeerMemoryFeatures"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkBindBufferMemory2 =
        reinterpret_cast<PFN_vkBindBufferMemory2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindBufferMemory2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkBindImageMemory2 =
        reinterpret_cast<PFN_vkBindImageMemory2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindImageMemory2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkCmdSetDeviceMask =
        reinterpret_cast<PFN_vkCmdSetDeviceMask>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDeviceMask"));
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
    table.vkGetDeviceGroupPresentCapabilitiesKHR = reinterpret_cast<PFN_vkGetDeviceGroupPresentCapabilitiesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceGroupPresentCapabilitiesKHR"));
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
    table.vkGetDeviceGroupSurfacePresentModesKHR = reinterpret_cast<PFN_vkGetDeviceGroupSurfacePresentModesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceGroupSurfacePresentModesKHR"));
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain))
    table.vkAcquireNextImage2KHR = reinterpret_cast<PFN_vkAcquireNextImage2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquireNextImage2KHR"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkCmdDispatchBase =
        reinterpret_cast<PFN_vkCmdDispatchBase>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchBase"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkCreateDescriptorUpdateTemplate = reinterpret_cast<PFN_vkCreateDescriptorUpdateTemplate>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDescriptorUpdateTemplate"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkDestroyDescriptorUpdateTemplate = reinterpret_cast<PFN_vkDestroyDescriptorUpdateTemplate>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDescriptorUpdateTemplate"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkUpdateDescriptorSetWithTemplate = reinterpret_cast<PFN_vkUpdateDescriptorSetWithTemplate>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateDescriptorSetWithTemplate"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdPushDescriptorSetWithTemplate = reinterpret_cast<PFN_vkCmdPushDescriptorSetWithTemplate>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSetWithTemplate"));
#endif
#if defined(VK_EXT_hdr_metadata)
    table.vkSetHdrMetadataEXT =
        reinterpret_cast<PFN_vkSetHdrMetadataEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetHdrMetadataEXT"));
#endif
#if defined(VK_KHR_shared_presentable_image)
    table.vkGetSwapchainStatusKHR = reinterpret_cast<PFN_vkGetSwapchainStatusKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSwapchainStatusKHR"));
#endif
#if defined(VK_GOOGLE_display_timing)
    table.vkGetRefreshCycleDurationGOOGLE = reinterpret_cast<PFN_vkGetRefreshCycleDurationGOOGLE>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRefreshCycleDurationGOOGLE"));
#endif
#if defined(VK_GOOGLE_display_timing)
    table.vkGetPastPresentationTimingGOOGLE = reinterpret_cast<PFN_vkGetPastPresentationTimingGOOGLE>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPastPresentationTimingGOOGLE"));
#endif
#if defined(VK_NV_clip_space_w_scaling)
    table.vkCmdSetViewportWScalingNV = reinterpret_cast<PFN_vkCmdSetViewportWScalingNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportWScalingNV"));
#endif
#if defined(VK_EXT_discard_rectangles)
    table.vkCmdSetDiscardRectangleEXT = reinterpret_cast<PFN_vkCmdSetDiscardRectangleEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDiscardRectangleEXT"));
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2))
    table.vkCmdSetDiscardRectangleEnableEXT = reinterpret_cast<PFN_vkCmdSetDiscardRectangleEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDiscardRectangleEnableEXT"));
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 && \
                                  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2))
    table.vkCmdSetDiscardRectangleModeEXT = reinterpret_cast<PFN_vkCmdSetDiscardRectangleModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDiscardRectangleModeEXT"));
#endif
#if defined(VK_EXT_sample_locations)
    table.vkCmdSetSampleLocationsEXT = reinterpret_cast<PFN_vkCmdSetSampleLocationsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetSampleLocationsEXT"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetBufferMemoryRequirements2 = reinterpret_cast<PFN_vkGetBufferMemoryRequirements2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferMemoryRequirements2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetImageMemoryRequirements2 = reinterpret_cast<PFN_vkGetImageMemoryRequirements2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageMemoryRequirements2"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetImageSparseMemoryRequirements2 = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSparseMemoryRequirements2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkGetDeviceBufferMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceBufferMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceBufferMemoryRequirements"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkGetDeviceImageMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceImageMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageMemoryRequirements"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkGetDeviceImageSparseMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceImageSparseMemoryRequirements>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageSparseMemoryRequirements"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkCreateSamplerYcbcrConversion = reinterpret_cast<PFN_vkCreateSamplerYcbcrConversion>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSamplerYcbcrConversion"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkDestroySamplerYcbcrConversion = reinterpret_cast<PFN_vkDestroySamplerYcbcrConversion>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySamplerYcbcrConversion"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetDeviceQueue2 =
        reinterpret_cast<PFN_vkGetDeviceQueue2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceQueue2"));
#endif
#if defined(VK_EXT_validation_cache)
    table.vkCreateValidationCacheEXT = reinterpret_cast<PFN_vkCreateValidationCacheEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateValidationCacheEXT"));
#endif
#if defined(VK_EXT_validation_cache)
    table.vkDestroyValidationCacheEXT = reinterpret_cast<PFN_vkDestroyValidationCacheEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyValidationCacheEXT"));
#endif
#if defined(VK_EXT_validation_cache)
    table.vkGetValidationCacheDataEXT = reinterpret_cast<PFN_vkGetValidationCacheDataEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetValidationCacheDataEXT"));
#endif
#if defined(VK_EXT_validation_cache)
    table.vkMergeValidationCachesEXT = reinterpret_cast<PFN_vkMergeValidationCachesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkMergeValidationCachesEXT"));
#endif
#if defined(VKIT_API_VERSION_1_1)
    table.vkGetDescriptorSetLayoutSupport = reinterpret_cast<PFN_vkGetDescriptorSetLayoutSupport>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetLayoutSupport"));
#endif
#if defined(VK_ANDROID_native_buffer)
    table.vkGetSwapchainGrallocUsageANDROID = reinterpret_cast<PFN_vkGetSwapchainGrallocUsageANDROID>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSwapchainGrallocUsageANDROID"));
#endif
#if defined(VK_ANDROID_native_buffer)
    table.vkGetSwapchainGrallocUsage2ANDROID = reinterpret_cast<PFN_vkGetSwapchainGrallocUsage2ANDROID>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSwapchainGrallocUsage2ANDROID"));
#endif
#if defined(VK_ANDROID_native_buffer)
    table.vkAcquireImageANDROID = reinterpret_cast<PFN_vkAcquireImageANDROID>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquireImageANDROID"));
#endif
#if defined(VK_ANDROID_native_buffer)
    table.vkQueueSignalReleaseImageANDROID = reinterpret_cast<PFN_vkQueueSignalReleaseImageANDROID>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueSignalReleaseImageANDROID"));
#endif
#if defined(VK_AMD_shader_info)
    table.vkGetShaderInfoAMD =
        reinterpret_cast<PFN_vkGetShaderInfoAMD>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetShaderInfoAMD"));
#endif
#if defined(VK_AMD_display_native_hdr)
    table.vkSetLocalDimmingAMD =
        reinterpret_cast<PFN_vkSetLocalDimmingAMD>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetLocalDimmingAMD"));
#endif
#if defined(VK_KHR_calibrated_timestamps)
    table.vkGetCalibratedTimestampsKHR = reinterpret_cast<PFN_vkGetCalibratedTimestampsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetCalibratedTimestampsKHR"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkSetDebugUtilsObjectNameEXT = reinterpret_cast<PFN_vkSetDebugUtilsObjectNameEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetDebugUtilsObjectNameEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkSetDebugUtilsObjectTagEXT = reinterpret_cast<PFN_vkSetDebugUtilsObjectTagEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetDebugUtilsObjectTagEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkQueueBeginDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueBeginDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueBeginDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkQueueEndDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueEndDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueEndDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkQueueInsertDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueInsertDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueInsertDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkCmdBeginDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdBeginDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkCmdEndDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdEndDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_debug_utils)
    table.vkCmdInsertDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdInsertDebugUtilsLabelEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdInsertDebugUtilsLabelEXT"));
#endif
#if defined(VK_EXT_external_memory_host)
    table.vkGetMemoryHostPointerPropertiesEXT = reinterpret_cast<PFN_vkGetMemoryHostPointerPropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryHostPointerPropertiesEXT"));
#endif
#if defined(VK_AMD_buffer_marker)
    table.vkCmdWriteBufferMarkerAMD = reinterpret_cast<PFN_vkCmdWriteBufferMarkerAMD>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteBufferMarkerAMD"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCreateRenderPass2 =
        reinterpret_cast<PFN_vkCreateRenderPass2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateRenderPass2"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCmdBeginRenderPass2 = reinterpret_cast<PFN_vkCmdBeginRenderPass2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginRenderPass2"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCmdNextSubpass2 =
        reinterpret_cast<PFN_vkCmdNextSubpass2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdNextSubpass2"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCmdEndRenderPass2 =
        reinterpret_cast<PFN_vkCmdEndRenderPass2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRenderPass2"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkGetSemaphoreCounterValue = reinterpret_cast<PFN_vkGetSemaphoreCounterValue>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreCounterValue"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkWaitSemaphores =
        reinterpret_cast<PFN_vkWaitSemaphores>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWaitSemaphores"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkSignalSemaphore =
        reinterpret_cast<PFN_vkSignalSemaphore>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSignalSemaphore"));
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
    table.vkGetAndroidHardwareBufferPropertiesANDROID =
        reinterpret_cast<PFN_vkGetAndroidHardwareBufferPropertiesANDROID>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAndroidHardwareBufferPropertiesANDROID"));
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
    table.vkGetMemoryAndroidHardwareBufferANDROID = reinterpret_cast<PFN_vkGetMemoryAndroidHardwareBufferANDROID>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryAndroidHardwareBufferANDROID"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCmdDrawIndirectCount = reinterpret_cast<PFN_vkCmdDrawIndirectCount>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndirectCount"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkCmdDrawIndexedIndirectCount = reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCount>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndexedIndirectCount"));
#endif
#if defined(VK_NV_device_diagnostic_checkpoints)
    table.vkCmdSetCheckpointNV =
        reinterpret_cast<PFN_vkCmdSetCheckpointNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCheckpointNV"));
#endif
#if defined(VK_NV_device_diagnostic_checkpoints)
    table.vkGetQueueCheckpointDataNV = reinterpret_cast<PFN_vkGetQueueCheckpointDataNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetQueueCheckpointDataNV"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdBindTransformFeedbackBuffersEXT = reinterpret_cast<PFN_vkCmdBindTransformFeedbackBuffersEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindTransformFeedbackBuffersEXT"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdBeginTransformFeedbackEXT = reinterpret_cast<PFN_vkCmdBeginTransformFeedbackEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginTransformFeedbackEXT"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdEndTransformFeedbackEXT = reinterpret_cast<PFN_vkCmdEndTransformFeedbackEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndTransformFeedbackEXT"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdBeginQueryIndexedEXT = reinterpret_cast<PFN_vkCmdBeginQueryIndexedEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginQueryIndexedEXT"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdEndQueryIndexedEXT = reinterpret_cast<PFN_vkCmdEndQueryIndexedEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndQueryIndexedEXT"));
#endif
#if defined(VK_EXT_transform_feedback)
    table.vkCmdDrawIndirectByteCountEXT = reinterpret_cast<PFN_vkCmdDrawIndirectByteCountEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndirectByteCountEXT"));
#endif
#if (defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2)
    table.vkCmdSetExclusiveScissorNV = reinterpret_cast<PFN_vkCmdSetExclusiveScissorNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetExclusiveScissorNV"));
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2))
    table.vkCmdSetExclusiveScissorEnableNV = reinterpret_cast<PFN_vkCmdSetExclusiveScissorEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetExclusiveScissorEnableNV"));
#endif
#if defined(VK_NV_shading_rate_image)
    table.vkCmdBindShadingRateImageNV = reinterpret_cast<PFN_vkCmdBindShadingRateImageNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindShadingRateImageNV"));
#endif
#if defined(VK_NV_shading_rate_image)
    table.vkCmdSetViewportShadingRatePaletteNV = reinterpret_cast<PFN_vkCmdSetViewportShadingRatePaletteNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportShadingRatePaletteNV"));
#endif
#if defined(VK_NV_shading_rate_image)
    table.vkCmdSetCoarseSampleOrderNV = reinterpret_cast<PFN_vkCmdSetCoarseSampleOrderNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoarseSampleOrderNV"));
#endif
#if defined(VK_NV_mesh_shader)
    table.vkCmdDrawMeshTasksNV =
        reinterpret_cast<PFN_vkCmdDrawMeshTasksNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksNV"));
#endif
#if defined(VK_NV_mesh_shader)
    table.vkCmdDrawMeshTasksIndirectNV = reinterpret_cast<PFN_vkCmdDrawMeshTasksIndirectNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksIndirectNV"));
#endif
#if (defined(VK_NV_mesh_shader) && (defined(VK_KHR_draw_indirect_count) || defined(VKIT_API_VERSION_1_2)))
    table.vkCmdDrawMeshTasksIndirectCountNV = reinterpret_cast<PFN_vkCmdDrawMeshTasksIndirectCountNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksIndirectCountNV"));
#endif
#if defined(VK_EXT_mesh_shader)
    table.vkCmdDrawMeshTasksEXT = reinterpret_cast<PFN_vkCmdDrawMeshTasksEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksEXT"));
#endif
#if defined(VK_EXT_mesh_shader)
    table.vkCmdDrawMeshTasksIndirectEXT = reinterpret_cast<PFN_vkCmdDrawMeshTasksIndirectEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksIndirectEXT"));
#endif
#if (defined(VK_EXT_mesh_shader) && (defined(VK_KHR_draw_indirect_count) || defined(VKIT_API_VERSION_1_2)))
    table.vkCmdDrawMeshTasksIndirectCountEXT = reinterpret_cast<PFN_vkCmdDrawMeshTasksIndirectCountEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawMeshTasksIndirectCountEXT"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCompileDeferredNV =
        reinterpret_cast<PFN_vkCompileDeferredNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCompileDeferredNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCreateAccelerationStructureNV = reinterpret_cast<PFN_vkCreateAccelerationStructureNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateAccelerationStructureNV"));
#endif
#if defined(VK_HUAWEI_invocation_mask)
    table.vkCmdBindInvocationMaskHUAWEI = reinterpret_cast<PFN_vkCmdBindInvocationMaskHUAWEI>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindInvocationMaskHUAWEI"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkDestroyAccelerationStructureKHR = reinterpret_cast<PFN_vkDestroyAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyAccelerationStructureKHR"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkDestroyAccelerationStructureNV = reinterpret_cast<PFN_vkDestroyAccelerationStructureNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyAccelerationStructureNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkGetAccelerationStructureMemoryRequirementsNV =
        reinterpret_cast<PFN_vkGetAccelerationStructureMemoryRequirementsNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAccelerationStructureMemoryRequirementsNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkBindAccelerationStructureMemoryNV = reinterpret_cast<PFN_vkBindAccelerationStructureMemoryNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindAccelerationStructureMemoryNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCmdCopyAccelerationStructureNV = reinterpret_cast<PFN_vkCmdCopyAccelerationStructureNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyAccelerationStructureNV"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdCopyAccelerationStructureKHR = reinterpret_cast<PFN_vkCmdCopyAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyAccelerationStructureKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCopyAccelerationStructureKHR = reinterpret_cast<PFN_vkCopyAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyAccelerationStructureKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdCopyAccelerationStructureToMemoryKHR = reinterpret_cast<PFN_vkCmdCopyAccelerationStructureToMemoryKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyAccelerationStructureToMemoryKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCopyAccelerationStructureToMemoryKHR = reinterpret_cast<PFN_vkCopyAccelerationStructureToMemoryKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyAccelerationStructureToMemoryKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdCopyMemoryToAccelerationStructureKHR = reinterpret_cast<PFN_vkCmdCopyMemoryToAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMemoryToAccelerationStructureKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCopyMemoryToAccelerationStructureKHR = reinterpret_cast<PFN_vkCopyMemoryToAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMemoryToAccelerationStructureKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdWriteAccelerationStructuresPropertiesKHR =
        reinterpret_cast<PFN_vkCmdWriteAccelerationStructuresPropertiesKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteAccelerationStructuresPropertiesKHR"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCmdWriteAccelerationStructuresPropertiesNV =
        reinterpret_cast<PFN_vkCmdWriteAccelerationStructuresPropertiesNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteAccelerationStructuresPropertiesNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCmdBuildAccelerationStructureNV = reinterpret_cast<PFN_vkCmdBuildAccelerationStructureNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildAccelerationStructureNV"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkWriteAccelerationStructuresPropertiesKHR = reinterpret_cast<PFN_vkWriteAccelerationStructuresPropertiesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWriteAccelerationStructuresPropertiesKHR"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkCmdTraceRaysKHR =
        reinterpret_cast<PFN_vkCmdTraceRaysKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdTraceRaysKHR"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCmdTraceRaysNV =
        reinterpret_cast<PFN_vkCmdTraceRaysNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdTraceRaysNV"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkGetRayTracingShaderGroupHandlesKHR = reinterpret_cast<PFN_vkGetRayTracingShaderGroupHandlesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRayTracingShaderGroupHandlesKHR"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
        reinterpret_cast<PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkGetAccelerationStructureHandleNV = reinterpret_cast<PFN_vkGetAccelerationStructureHandleNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAccelerationStructureHandleNV"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkCreateRayTracingPipelinesNV = reinterpret_cast<PFN_vkCreateRayTracingPipelinesNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateRayTracingPipelinesNV"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkCreateRayTracingPipelinesKHR = reinterpret_cast<PFN_vkCreateRayTracingPipelinesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateRayTracingPipelinesKHR"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkCmdTraceRaysIndirectKHR = reinterpret_cast<PFN_vkCmdTraceRaysIndirectKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdTraceRaysIndirectKHR"));
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline))
    table.vkCmdTraceRaysIndirect2KHR = reinterpret_cast<PFN_vkCmdTraceRaysIndirect2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdTraceRaysIndirect2KHR"));
#endif
#if defined(VK_NV_cluster_acceleration_structure)
    table.vkGetClusterAccelerationStructureBuildSizesNV =
        reinterpret_cast<PFN_vkGetClusterAccelerationStructureBuildSizesNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetClusterAccelerationStructureBuildSizesNV"));
#endif
#if defined(VK_NV_cluster_acceleration_structure)
    table.vkCmdBuildClusterAccelerationStructureIndirectNV =
        reinterpret_cast<PFN_vkCmdBuildClusterAccelerationStructureIndirectNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildClusterAccelerationStructureIndirectNV"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkGetDeviceAccelerationStructureCompatibilityKHR =
        reinterpret_cast<PFN_vkGetDeviceAccelerationStructureCompatibilityKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceAccelerationStructureCompatibilityKHR"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkGetRayTracingShaderGroupStackSizeKHR = reinterpret_cast<PFN_vkGetRayTracingShaderGroupStackSizeKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRayTracingShaderGroupStackSizeKHR"));
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
    table.vkCmdSetRayTracingPipelineStackSizeKHR = reinterpret_cast<PFN_vkCmdSetRayTracingPipelineStackSizeKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRayTracingPipelineStackSizeKHR"));
#endif
#if defined(VK_NVX_image_view_handle)
    table.vkGetImageViewHandleNVX = reinterpret_cast<PFN_vkGetImageViewHandleNVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageViewHandleNVX"));
#endif
#if (defined(VK_NVX_image_view_handle) && VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 3)
    table.vkGetImageViewHandle64NVX = reinterpret_cast<PFN_vkGetImageViewHandle64NVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageViewHandle64NVX"));
#endif
#if (defined(VK_NVX_image_view_handle) && VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 3 &&                                \
     VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 2)
    table.vkGetImageViewAddressNVX = reinterpret_cast<PFN_vkGetImageViewAddressNVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageViewAddressNVX"));
#endif
#if (defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_device_group) || defined(VKIT_API_VERSION_1_1)))
    table.vkGetDeviceGroupSurfacePresentModes2EXT = reinterpret_cast<PFN_vkGetDeviceGroupSurfacePresentModes2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceGroupSurfacePresentModes2EXT"));
#endif
#if defined(VK_EXT_full_screen_exclusive)
    table.vkAcquireFullScreenExclusiveModeEXT = reinterpret_cast<PFN_vkAcquireFullScreenExclusiveModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquireFullScreenExclusiveModeEXT"));
#endif
#if defined(VK_EXT_full_screen_exclusive)
    table.vkReleaseFullScreenExclusiveModeEXT = reinterpret_cast<PFN_vkReleaseFullScreenExclusiveModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleaseFullScreenExclusiveModeEXT"));
#endif
#if defined(VK_KHR_performance_query)
    table.vkAcquireProfilingLockKHR = reinterpret_cast<PFN_vkAcquireProfilingLockKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquireProfilingLockKHR"));
#endif
#if defined(VK_KHR_performance_query)
    table.vkReleaseProfilingLockKHR = reinterpret_cast<PFN_vkReleaseProfilingLockKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleaseProfilingLockKHR"));
#endif
#if defined(VK_EXT_image_drm_format_modifier)
    table.vkGetImageDrmFormatModifierPropertiesEXT = reinterpret_cast<PFN_vkGetImageDrmFormatModifierPropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageDrmFormatModifierPropertiesEXT"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkGetBufferOpaqueCaptureAddress = reinterpret_cast<PFN_vkGetBufferOpaqueCaptureAddress>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferOpaqueCaptureAddress"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkGetBufferDeviceAddress = reinterpret_cast<PFN_vkGetBufferDeviceAddress>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferDeviceAddress"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkInitializePerformanceApiINTEL = reinterpret_cast<PFN_vkInitializePerformanceApiINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkInitializePerformanceApiINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkUninitializePerformanceApiINTEL = reinterpret_cast<PFN_vkUninitializePerformanceApiINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUninitializePerformanceApiINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkCmdSetPerformanceMarkerINTEL = reinterpret_cast<PFN_vkCmdSetPerformanceMarkerINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPerformanceMarkerINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkCmdSetPerformanceStreamMarkerINTEL = reinterpret_cast<PFN_vkCmdSetPerformanceStreamMarkerINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPerformanceStreamMarkerINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkCmdSetPerformanceOverrideINTEL = reinterpret_cast<PFN_vkCmdSetPerformanceOverrideINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPerformanceOverrideINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkAcquirePerformanceConfigurationINTEL = reinterpret_cast<PFN_vkAcquirePerformanceConfigurationINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAcquirePerformanceConfigurationINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkReleasePerformanceConfigurationINTEL = reinterpret_cast<PFN_vkReleasePerformanceConfigurationINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleasePerformanceConfigurationINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkQueueSetPerformanceConfigurationINTEL = reinterpret_cast<PFN_vkQueueSetPerformanceConfigurationINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueSetPerformanceConfigurationINTEL"));
#endif
#if defined(VK_INTEL_performance_query)
    table.vkGetPerformanceParameterINTEL = reinterpret_cast<PFN_vkGetPerformanceParameterINTEL>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPerformanceParameterINTEL"));
#endif
#if defined(VKIT_API_VERSION_1_2)
    table.vkGetDeviceMemoryOpaqueCaptureAddress = reinterpret_cast<PFN_vkGetDeviceMemoryOpaqueCaptureAddress>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceMemoryOpaqueCaptureAddress"));
#endif
#if defined(VK_KHR_pipeline_executable_properties)
    table.vkGetPipelineExecutablePropertiesKHR = reinterpret_cast<PFN_vkGetPipelineExecutablePropertiesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineExecutablePropertiesKHR"));
#endif
#if defined(VK_KHR_pipeline_executable_properties)
    table.vkGetPipelineExecutableStatisticsKHR = reinterpret_cast<PFN_vkGetPipelineExecutableStatisticsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineExecutableStatisticsKHR"));
#endif
#if defined(VK_KHR_pipeline_executable_properties)
    table.vkGetPipelineExecutableInternalRepresentationsKHR =
        reinterpret_cast<PFN_vkGetPipelineExecutableInternalRepresentationsKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineExecutableInternalRepresentationsKHR"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdSetLineStipple =
        reinterpret_cast<PFN_vkCmdSetLineStipple>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineStipple"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCreateAccelerationStructureKHR = reinterpret_cast<PFN_vkCreateAccelerationStructureKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateAccelerationStructureKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdBuildAccelerationStructuresKHR = reinterpret_cast<PFN_vkCmdBuildAccelerationStructuresKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildAccelerationStructuresKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkCmdBuildAccelerationStructuresIndirectKHR =
        reinterpret_cast<PFN_vkCmdBuildAccelerationStructuresIndirectKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildAccelerationStructuresIndirectKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkBuildAccelerationStructuresKHR = reinterpret_cast<PFN_vkBuildAccelerationStructuresKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBuildAccelerationStructuresKHR"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkGetAccelerationStructureDeviceAddressKHR = reinterpret_cast<PFN_vkGetAccelerationStructureDeviceAddressKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAccelerationStructureDeviceAddressKHR"));
#endif
#if defined(VK_KHR_deferred_host_operations)
    table.vkCreateDeferredOperationKHR = reinterpret_cast<PFN_vkCreateDeferredOperationKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDeferredOperationKHR"));
#endif
#if defined(VK_KHR_deferred_host_operations)
    table.vkDestroyDeferredOperationKHR = reinterpret_cast<PFN_vkDestroyDeferredOperationKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDeferredOperationKHR"));
#endif
#if defined(VK_KHR_deferred_host_operations)
    table.vkGetDeferredOperationMaxConcurrencyKHR = reinterpret_cast<PFN_vkGetDeferredOperationMaxConcurrencyKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeferredOperationMaxConcurrencyKHR"));
#endif
#if defined(VK_KHR_deferred_host_operations)
    table.vkGetDeferredOperationResultKHR = reinterpret_cast<PFN_vkGetDeferredOperationResultKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeferredOperationResultKHR"));
#endif
#if defined(VK_KHR_deferred_host_operations)
    table.vkDeferredOperationJoinKHR = reinterpret_cast<PFN_vkDeferredOperationJoinKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDeferredOperationJoinKHR"));
#endif
#if defined(VK_NV_device_generated_commands_compute)
    table.vkGetPipelineIndirectMemoryRequirementsNV = reinterpret_cast<PFN_vkGetPipelineIndirectMemoryRequirementsNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineIndirectMemoryRequirementsNV"));
#endif
#if defined(VK_NV_device_generated_commands_compute)
    table.vkGetPipelineIndirectDeviceAddressNV = reinterpret_cast<PFN_vkGetPipelineIndirectDeviceAddressNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelineIndirectDeviceAddressNV"));
#endif
#if defined(VK_AMD_anti_lag)
    table.vkAntiLagUpdateAMD =
        reinterpret_cast<PFN_vkAntiLagUpdateAMD>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkAntiLagUpdateAMD"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetCullMode =
        reinterpret_cast<PFN_vkCmdSetCullMode>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCullMode"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetFrontFace =
        reinterpret_cast<PFN_vkCmdSetFrontFace>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetFrontFace"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetPrimitiveTopology = reinterpret_cast<PFN_vkCmdSetPrimitiveTopology>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPrimitiveTopology"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetViewportWithCount = reinterpret_cast<PFN_vkCmdSetViewportWithCount>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportWithCount"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetScissorWithCount = reinterpret_cast<PFN_vkCmdSetScissorWithCount>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetScissorWithCount"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdBindIndexBuffer2 = reinterpret_cast<PFN_vkCmdBindIndexBuffer2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindIndexBuffer2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdBindVertexBuffers2 = reinterpret_cast<PFN_vkCmdBindVertexBuffers2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindVertexBuffers2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetDepthTestEnable = reinterpret_cast<PFN_vkCmdSetDepthTestEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthTestEnable"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetDepthWriteEnable = reinterpret_cast<PFN_vkCmdSetDepthWriteEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthWriteEnable"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetDepthCompareOp = reinterpret_cast<PFN_vkCmdSetDepthCompareOp>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthCompareOp"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetDepthBoundsTestEnable = reinterpret_cast<PFN_vkCmdSetDepthBoundsTestEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBoundsTestEnable"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetStencilTestEnable = reinterpret_cast<PFN_vkCmdSetStencilTestEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilTestEnable"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetStencilOp =
        reinterpret_cast<PFN_vkCmdSetStencilOp>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilOp"));
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
    table.vkCmdSetPatchControlPointsEXT = reinterpret_cast<PFN_vkCmdSetPatchControlPointsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPatchControlPointsEXT"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetRasterizerDiscardEnable = reinterpret_cast<PFN_vkCmdSetRasterizerDiscardEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRasterizerDiscardEnable"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetDepthBiasEnable = reinterpret_cast<PFN_vkCmdSetDepthBiasEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBiasEnable"));
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
    table.vkCmdSetLogicOpEXT =
        reinterpret_cast<PFN_vkCmdSetLogicOpEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLogicOpEXT"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetPrimitiveRestartEnable = reinterpret_cast<PFN_vkCmdSetPrimitiveRestartEnable>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPrimitiveRestartEnable"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VKIT_API_VERSION_1_1))) ||    \
    defined(VK_EXT_shader_object)
    table.vkCmdSetTessellationDomainOriginEXT = reinterpret_cast<PFN_vkCmdSetTessellationDomainOriginEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetTessellationDomainOriginEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthClampEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthClampEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthClampEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetPolygonModeEXT = reinterpret_cast<PFN_vkCmdSetPolygonModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPolygonModeEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetRasterizationSamplesEXT = reinterpret_cast<PFN_vkCmdSetRasterizationSamplesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRasterizationSamplesEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetSampleMaskEXT = reinterpret_cast<PFN_vkCmdSetSampleMaskEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetSampleMaskEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetAlphaToCoverageEnableEXT = reinterpret_cast<PFN_vkCmdSetAlphaToCoverageEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetAlphaToCoverageEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetAlphaToOneEnableEXT = reinterpret_cast<PFN_vkCmdSetAlphaToOneEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetAlphaToOneEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetLogicOpEnableEXT = reinterpret_cast<PFN_vkCmdSetLogicOpEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLogicOpEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetColorBlendEnableEXT = reinterpret_cast<PFN_vkCmdSetColorBlendEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetColorBlendEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetColorBlendEquationEXT = reinterpret_cast<PFN_vkCmdSetColorBlendEquationEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetColorBlendEquationEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
    table.vkCmdSetColorWriteMaskEXT = reinterpret_cast<PFN_vkCmdSetColorWriteMaskEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetColorWriteMaskEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
    table.vkCmdSetRasterizationStreamEXT = reinterpret_cast<PFN_vkCmdSetRasterizationStreamEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRasterizationStreamEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) ||                         \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
    table.vkCmdSetConservativeRasterizationModeEXT = reinterpret_cast<PFN_vkCmdSetConservativeRasterizationModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetConservativeRasterizationModeEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) ||                         \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
    table.vkCmdSetExtraPrimitiveOverestimationSizeEXT =
        reinterpret_cast<PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) ||                                  \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
    table.vkCmdSetDepthClipEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthClipEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthClipEnableEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) ||                                   \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
    table.vkCmdSetSampleLocationsEnableEXT = reinterpret_cast<PFN_vkCmdSetSampleLocationsEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetSampleLocationsEnableEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
    table.vkCmdSetColorBlendAdvancedEXT = reinterpret_cast<PFN_vkCmdSetColorBlendAdvancedEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetColorBlendAdvancedEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) ||                                   \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
    table.vkCmdSetProvokingVertexModeEXT = reinterpret_cast<PFN_vkCmdSetProvokingVertexModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetProvokingVertexModeEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
    table.vkCmdSetLineRasterizationModeEXT = reinterpret_cast<PFN_vkCmdSetLineRasterizationModeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineRasterizationModeEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
    table.vkCmdSetLineStippleEnableEXT = reinterpret_cast<PFN_vkCmdSetLineStippleEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineStippleEnableEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
    table.vkCmdSetDepthClipNegativeOneToOneEXT = reinterpret_cast<PFN_vkCmdSetDepthClipNegativeOneToOneEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthClipNegativeOneToOneEXT"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) ||                                \
    (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
    table.vkCmdSetViewportWScalingEnableNV = reinterpret_cast<PFN_vkCmdSetViewportWScalingEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportWScalingEnableNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) ||                                    \
    (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
    table.vkCmdSetViewportSwizzleNV = reinterpret_cast<PFN_vkCmdSetViewportSwizzleNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportSwizzleNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) ||                          \
    (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
    table.vkCmdSetCoverageToColorEnableNV = reinterpret_cast<PFN_vkCmdSetCoverageToColorEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageToColorEnableNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) ||                          \
    (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
    table.vkCmdSetCoverageToColorLocationNV = reinterpret_cast<PFN_vkCmdSetCoverageToColorLocationNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageToColorLocationNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
    table.vkCmdSetCoverageModulationModeNV = reinterpret_cast<PFN_vkCmdSetCoverageModulationModeNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageModulationModeNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
    table.vkCmdSetCoverageModulationTableEnableNV = reinterpret_cast<PFN_vkCmdSetCoverageModulationTableEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageModulationTableEnableNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
    table.vkCmdSetCoverageModulationTableNV = reinterpret_cast<PFN_vkCmdSetCoverageModulationTableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageModulationTableNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) ||                                  \
    (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
    table.vkCmdSetShadingRateImageEnableNV = reinterpret_cast<PFN_vkCmdSetShadingRateImageEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetShadingRateImageEnableNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) ||                             \
    (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
    table.vkCmdSetCoverageReductionModeNV = reinterpret_cast<PFN_vkCmdSetCoverageReductionModeNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCoverageReductionModeNV"));
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) ||                        \
    (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
    table.vkCmdSetRepresentativeFragmentTestEnableNV = reinterpret_cast<PFN_vkCmdSetRepresentativeFragmentTestEnableNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRepresentativeFragmentTestEnableNV"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCreatePrivateDataSlot = reinterpret_cast<PFN_vkCreatePrivateDataSlot>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreatePrivateDataSlot"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkDestroyPrivateDataSlot = reinterpret_cast<PFN_vkDestroyPrivateDataSlot>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPrivateDataSlot"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkSetPrivateData =
        reinterpret_cast<PFN_vkSetPrivateData>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetPrivateData"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkGetPrivateData =
        reinterpret_cast<PFN_vkGetPrivateData>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPrivateData"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdCopyBuffer2 =
        reinterpret_cast<PFN_vkCmdCopyBuffer2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBuffer2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdCopyImage2 =
        reinterpret_cast<PFN_vkCmdCopyImage2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImage2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdBlitImage2 =
        reinterpret_cast<PFN_vkCmdBlitImage2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBlitImage2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdCopyBufferToImage2 = reinterpret_cast<PFN_vkCmdCopyBufferToImage2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBufferToImage2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdCopyImageToBuffer2 = reinterpret_cast<PFN_vkCmdCopyImageToBuffer2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImageToBuffer2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdResolveImage2 =
        reinterpret_cast<PFN_vkCmdResolveImage2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResolveImage2"));
#endif
#if defined(VK_KHR_object_refresh)
    table.vkCmdRefreshObjectsKHR = reinterpret_cast<PFN_vkCmdRefreshObjectsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdRefreshObjectsKHR"));
#endif
#if defined(VK_KHR_fragment_shading_rate)
    table.vkCmdSetFragmentShadingRateKHR = reinterpret_cast<PFN_vkCmdSetFragmentShadingRateKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetFragmentShadingRateKHR"));
#endif
#if defined(VK_NV_fragment_shading_rate_enums)
    table.vkCmdSetFragmentShadingRateEnumNV = reinterpret_cast<PFN_vkCmdSetFragmentShadingRateEnumNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetFragmentShadingRateEnumNV"));
#endif
#if defined(VK_KHR_acceleration_structure)
    table.vkGetAccelerationStructureBuildSizesKHR = reinterpret_cast<PFN_vkGetAccelerationStructureBuildSizesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAccelerationStructureBuildSizesKHR"));
#endif
#if defined(VK_EXT_vertex_input_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetVertexInputEXT = reinterpret_cast<PFN_vkCmdSetVertexInputEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetVertexInputEXT"));
#endif
#if defined(VK_EXT_color_write_enable)
    table.vkCmdSetColorWriteEnableEXT = reinterpret_cast<PFN_vkCmdSetColorWriteEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetColorWriteEnableEXT"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdSetEvent2 =
        reinterpret_cast<PFN_vkCmdSetEvent2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetEvent2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdResetEvent2 =
        reinterpret_cast<PFN_vkCmdResetEvent2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResetEvent2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdWaitEvents2 =
        reinterpret_cast<PFN_vkCmdWaitEvents2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWaitEvents2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdPipelineBarrier2 = reinterpret_cast<PFN_vkCmdPipelineBarrier2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPipelineBarrier2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkQueueSubmit2 =
        reinterpret_cast<PFN_vkQueueSubmit2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueSubmit2"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdWriteTimestamp2 =
        reinterpret_cast<PFN_vkCmdWriteTimestamp2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteTimestamp2"));
#endif
#if (defined(VK_AMD_buffer_marker) && (defined(VKIT_API_VERSION_1_3) || defined(VK_KHR_synchronization2)))
    table.vkCmdWriteBufferMarker2AMD = reinterpret_cast<PFN_vkCmdWriteBufferMarker2AMD>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteBufferMarker2AMD"));
#endif
#if (defined(VK_NV_device_diagnostic_checkpoints) &&                                                                   \
     (defined(VKIT_API_VERSION_1_3) || defined(VK_KHR_synchronization2)))
    table.vkGetQueueCheckpointData2NV = reinterpret_cast<PFN_vkGetQueueCheckpointData2NV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetQueueCheckpointData2NV"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCopyMemoryToImage =
        reinterpret_cast<PFN_vkCopyMemoryToImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMemoryToImage"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCopyImageToMemory =
        reinterpret_cast<PFN_vkCopyImageToMemory>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyImageToMemory"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCopyImageToImage =
        reinterpret_cast<PFN_vkCopyImageToImage>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyImageToImage"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkTransitionImageLayout = reinterpret_cast<PFN_vkTransitionImageLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkTransitionImageLayout"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkCreateVideoSessionKHR = reinterpret_cast<PFN_vkCreateVideoSessionKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateVideoSessionKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkDestroyVideoSessionKHR = reinterpret_cast<PFN_vkDestroyVideoSessionKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyVideoSessionKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkCreateVideoSessionParametersKHR = reinterpret_cast<PFN_vkCreateVideoSessionParametersKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateVideoSessionParametersKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkUpdateVideoSessionParametersKHR = reinterpret_cast<PFN_vkUpdateVideoSessionParametersKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateVideoSessionParametersKHR"));
#endif
#if defined(VK_KHR_video_encode_queue)
    table.vkGetEncodedVideoSessionParametersKHR = reinterpret_cast<PFN_vkGetEncodedVideoSessionParametersKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetEncodedVideoSessionParametersKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkDestroyVideoSessionParametersKHR = reinterpret_cast<PFN_vkDestroyVideoSessionParametersKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyVideoSessionParametersKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkGetVideoSessionMemoryRequirementsKHR = reinterpret_cast<PFN_vkGetVideoSessionMemoryRequirementsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetVideoSessionMemoryRequirementsKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkBindVideoSessionMemoryKHR = reinterpret_cast<PFN_vkBindVideoSessionMemoryKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindVideoSessionMemoryKHR"));
#endif
#if defined(VK_KHR_video_decode_queue)
    table.vkCmdDecodeVideoKHR =
        reinterpret_cast<PFN_vkCmdDecodeVideoKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDecodeVideoKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkCmdBeginVideoCodingKHR = reinterpret_cast<PFN_vkCmdBeginVideoCodingKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginVideoCodingKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkCmdControlVideoCodingKHR = reinterpret_cast<PFN_vkCmdControlVideoCodingKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdControlVideoCodingKHR"));
#endif
#if defined(VK_KHR_video_queue)
    table.vkCmdEndVideoCodingKHR = reinterpret_cast<PFN_vkCmdEndVideoCodingKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndVideoCodingKHR"));
#endif
#if defined(VK_KHR_video_encode_queue)
    table.vkCmdEncodeVideoKHR =
        reinterpret_cast<PFN_vkCmdEncodeVideoKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEncodeVideoKHR"));
#endif
#if defined(VK_NV_memory_decompression)
    table.vkCmdDecompressMemoryNV = reinterpret_cast<PFN_vkCmdDecompressMemoryNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDecompressMemoryNV"));
#endif
#if defined(VK_NV_memory_decompression)
    table.vkCmdDecompressMemoryIndirectCountNV = reinterpret_cast<PFN_vkCmdDecompressMemoryIndirectCountNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDecompressMemoryIndirectCountNV"));
#endif
#if defined(VK_NV_partitioned_acceleration_structure)
    table.vkGetPartitionedAccelerationStructuresBuildSizesNV =
        reinterpret_cast<PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPartitionedAccelerationStructuresBuildSizesNV"));
#endif
#if defined(VK_NV_partitioned_acceleration_structure)
    table.vkCmdBuildPartitionedAccelerationStructuresNV =
        reinterpret_cast<PFN_vkCmdBuildPartitionedAccelerationStructuresNV>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildPartitionedAccelerationStructuresNV"));
#endif
#if defined(VK_NVX_binary_import)
    table.vkCreateCuModuleNVX =
        reinterpret_cast<PFN_vkCreateCuModuleNVX>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateCuModuleNVX"));
#endif
#if defined(VK_NVX_binary_import)
    table.vkCreateCuFunctionNVX = reinterpret_cast<PFN_vkCreateCuFunctionNVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateCuFunctionNVX"));
#endif
#if defined(VK_NVX_binary_import)
    table.vkDestroyCuModuleNVX =
        reinterpret_cast<PFN_vkDestroyCuModuleNVX>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyCuModuleNVX"));
#endif
#if defined(VK_NVX_binary_import)
    table.vkDestroyCuFunctionNVX = reinterpret_cast<PFN_vkDestroyCuFunctionNVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyCuFunctionNVX"));
#endif
#if defined(VK_NVX_binary_import)
    table.vkCmdCuLaunchKernelNVX = reinterpret_cast<PFN_vkCmdCuLaunchKernelNVX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCuLaunchKernelNVX"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetDescriptorSetLayoutSizeEXT = reinterpret_cast<PFN_vkGetDescriptorSetLayoutSizeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetLayoutSizeEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetDescriptorSetLayoutBindingOffsetEXT = reinterpret_cast<PFN_vkGetDescriptorSetLayoutBindingOffsetEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetLayoutBindingOffsetEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetDescriptorEXT =
        reinterpret_cast<PFN_vkGetDescriptorEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkCmdBindDescriptorBuffersEXT = reinterpret_cast<PFN_vkCmdBindDescriptorBuffersEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorBuffersEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkCmdSetDescriptorBufferOffsetsEXT = reinterpret_cast<PFN_vkCmdSetDescriptorBufferOffsetsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDescriptorBufferOffsetsEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkCmdBindDescriptorBufferEmbeddedSamplersEXT =
        reinterpret_cast<PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetBufferOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferOpaqueCaptureDescriptorDataEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetImageOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetImageOpaqueCaptureDescriptorDataEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageOpaqueCaptureDescriptorDataEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetImageViewOpaqueCaptureDescriptorDataEXT =
        reinterpret_cast<PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageViewOpaqueCaptureDescriptorDataEXT"));
#endif
#if defined(VK_EXT_descriptor_buffer)
    table.vkGetSamplerOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSamplerOpaqueCaptureDescriptorDataEXT"));
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)))
    table.vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT =
        reinterpret_cast<PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"));
#endif
#if defined(VK_EXT_pageable_device_local_memory)
    table.vkSetDeviceMemoryPriorityEXT = reinterpret_cast<PFN_vkSetDeviceMemoryPriorityEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetDeviceMemoryPriorityEXT"));
#endif
#if defined(VK_KHR_present_wait2)
    table.vkWaitForPresent2KHR =
        reinterpret_cast<PFN_vkWaitForPresent2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWaitForPresent2KHR"));
#endif
#if defined(VK_KHR_present_wait)
    table.vkWaitForPresentKHR =
        reinterpret_cast<PFN_vkWaitForPresentKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWaitForPresentKHR"));
#endif
#if defined(VK_FUCHSIA_buffer_collection)
    table.vkCreateBufferCollectionFUCHSIA = reinterpret_cast<PFN_vkCreateBufferCollectionFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateBufferCollectionFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_buffer_collection)
    table.vkSetBufferCollectionBufferConstraintsFUCHSIA =
        reinterpret_cast<PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetBufferCollectionBufferConstraintsFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_buffer_collection)
    table.vkSetBufferCollectionImageConstraintsFUCHSIA =
        reinterpret_cast<PFN_vkSetBufferCollectionImageConstraintsFUCHSIA>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetBufferCollectionImageConstraintsFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_buffer_collection)
    table.vkDestroyBufferCollectionFUCHSIA = reinterpret_cast<PFN_vkDestroyBufferCollectionFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyBufferCollectionFUCHSIA"));
#endif
#if defined(VK_FUCHSIA_buffer_collection)
    table.vkGetBufferCollectionPropertiesFUCHSIA = reinterpret_cast<PFN_vkGetBufferCollectionPropertiesFUCHSIA>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferCollectionPropertiesFUCHSIA"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkCreateCudaModuleNV =
        reinterpret_cast<PFN_vkCreateCudaModuleNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateCudaModuleNV"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkGetCudaModuleCacheNV = reinterpret_cast<PFN_vkGetCudaModuleCacheNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetCudaModuleCacheNV"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkCreateCudaFunctionNV = reinterpret_cast<PFN_vkCreateCudaFunctionNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateCudaFunctionNV"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkDestroyCudaModuleNV = reinterpret_cast<PFN_vkDestroyCudaModuleNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyCudaModuleNV"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkDestroyCudaFunctionNV = reinterpret_cast<PFN_vkDestroyCudaFunctionNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyCudaFunctionNV"));
#endif
#if defined(VK_NV_cuda_kernel_launch)
    table.vkCmdCudaLaunchKernelNV = reinterpret_cast<PFN_vkCmdCudaLaunchKernelNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCudaLaunchKernelNV"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdBeginRendering =
        reinterpret_cast<PFN_vkCmdBeginRendering>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginRendering"));
#endif
#if defined(VKIT_API_VERSION_1_3)
    table.vkCmdEndRendering =
        reinterpret_cast<PFN_vkCmdEndRendering>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRendering"));
#endif
#if defined(VK_EXT_fragment_density_map_offset)
    table.vkCmdEndRendering2EXT = reinterpret_cast<PFN_vkCmdEndRendering2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRendering2EXT"));
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping)
    table.vkGetDescriptorSetLayoutHostMappingInfoVALVE =
        reinterpret_cast<PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE"));
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping)
    table.vkGetDescriptorSetHostMappingVALVE = reinterpret_cast<PFN_vkGetDescriptorSetHostMappingVALVE>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetHostMappingVALVE"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCreateMicromapEXT =
        reinterpret_cast<PFN_vkCreateMicromapEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCmdBuildMicromapsEXT = reinterpret_cast<PFN_vkCmdBuildMicromapsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBuildMicromapsEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkBuildMicromapsEXT =
        reinterpret_cast<PFN_vkBuildMicromapsEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBuildMicromapsEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkDestroyMicromapEXT =
        reinterpret_cast<PFN_vkDestroyMicromapEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCmdCopyMicromapEXT =
        reinterpret_cast<PFN_vkCmdCopyMicromapEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCopyMicromapEXT =
        reinterpret_cast<PFN_vkCopyMicromapEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCmdCopyMicromapToMemoryEXT = reinterpret_cast<PFN_vkCmdCopyMicromapToMemoryEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMicromapToMemoryEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCopyMicromapToMemoryEXT = reinterpret_cast<PFN_vkCopyMicromapToMemoryEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMicromapToMemoryEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCmdCopyMemoryToMicromapEXT = reinterpret_cast<PFN_vkCmdCopyMemoryToMicromapEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyMemoryToMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCopyMemoryToMicromapEXT = reinterpret_cast<PFN_vkCopyMemoryToMicromapEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMemoryToMicromapEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkCmdWriteMicromapsPropertiesEXT = reinterpret_cast<PFN_vkCmdWriteMicromapsPropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteMicromapsPropertiesEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkWriteMicromapsPropertiesEXT = reinterpret_cast<PFN_vkWriteMicromapsPropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWriteMicromapsPropertiesEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkGetDeviceMicromapCompatibilityEXT = reinterpret_cast<PFN_vkGetDeviceMicromapCompatibilityEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceMicromapCompatibilityEXT"));
#endif
#if defined(VK_EXT_opacity_micromap)
    table.vkGetMicromapBuildSizesEXT = reinterpret_cast<PFN_vkGetMicromapBuildSizesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMicromapBuildSizesEXT"));
#endif
#if defined(VK_EXT_shader_module_identifier)
    table.vkGetShaderModuleIdentifierEXT = reinterpret_cast<PFN_vkGetShaderModuleIdentifierEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetShaderModuleIdentifierEXT"));
#endif
#if defined(VK_EXT_shader_module_identifier)
    table.vkGetShaderModuleCreateInfoIdentifierEXT = reinterpret_cast<PFN_vkGetShaderModuleCreateInfoIdentifierEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetShaderModuleCreateInfoIdentifierEXT"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkGetImageSubresourceLayout2 = reinterpret_cast<PFN_vkGetImageSubresourceLayout2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSubresourceLayout2"));
#endif
#if defined(VK_EXT_pipeline_properties)
    table.vkGetPipelinePropertiesEXT = reinterpret_cast<PFN_vkGetPipelinePropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPipelinePropertiesEXT"));
#endif
#if defined(VK_EXT_metal_objects)
    table.vkExportMetalObjectsEXT = reinterpret_cast<PFN_vkExportMetalObjectsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkExportMetalObjectsEXT"));
#endif
#if defined(VK_QCOM_tile_memory_heap)
    table.vkCmdBindTileMemoryQCOM = reinterpret_cast<PFN_vkCmdBindTileMemoryQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindTileMemoryQCOM"));
#endif
#if defined(VK_QCOM_tile_properties)
    table.vkGetFramebufferTilePropertiesQCOM = reinterpret_cast<PFN_vkGetFramebufferTilePropertiesQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetFramebufferTilePropertiesQCOM"));
#endif
#if defined(VK_QCOM_tile_properties)
    table.vkGetDynamicRenderingTilePropertiesQCOM = reinterpret_cast<PFN_vkGetDynamicRenderingTilePropertiesQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDynamicRenderingTilePropertiesQCOM"));
#endif
#if defined(VK_NV_optical_flow)
    table.vkCreateOpticalFlowSessionNV = reinterpret_cast<PFN_vkCreateOpticalFlowSessionNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateOpticalFlowSessionNV"));
#endif
#if defined(VK_NV_optical_flow)
    table.vkDestroyOpticalFlowSessionNV = reinterpret_cast<PFN_vkDestroyOpticalFlowSessionNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyOpticalFlowSessionNV"));
#endif
#if defined(VK_NV_optical_flow)
    table.vkBindOpticalFlowSessionImageNV = reinterpret_cast<PFN_vkBindOpticalFlowSessionImageNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindOpticalFlowSessionImageNV"));
#endif
#if defined(VK_NV_optical_flow)
    table.vkCmdOpticalFlowExecuteNV = reinterpret_cast<PFN_vkCmdOpticalFlowExecuteNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdOpticalFlowExecuteNV"));
#endif
#if defined(VK_EXT_device_fault)
    table.vkGetDeviceFaultInfoEXT = reinterpret_cast<PFN_vkGetDeviceFaultInfoEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceFaultInfoEXT"));
#endif
#if defined(VK_EXT_depth_bias_control)
    table.vkCmdSetDepthBias2EXT = reinterpret_cast<PFN_vkCmdSetDepthBias2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBias2EXT"));
#endif
#if defined(VK_KHR_swapchain_maintenance1)
    table.vkReleaseSwapchainImagesKHR = reinterpret_cast<PFN_vkReleaseSwapchainImagesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleaseSwapchainImagesKHR"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkGetDeviceImageSubresourceLayout = reinterpret_cast<PFN_vkGetDeviceImageSubresourceLayout>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageSubresourceLayout"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkMapMemory2 =
        reinterpret_cast<PFN_vkMapMemory2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkMapMemory2"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkUnmapMemory2 =
        reinterpret_cast<PFN_vkUnmapMemory2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUnmapMemory2"));
#endif
#if defined(VK_EXT_shader_object)
    table.vkCreateShadersEXT =
        reinterpret_cast<PFN_vkCreateShadersEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateShadersEXT"));
#endif
#if defined(VK_EXT_shader_object)
    table.vkDestroyShaderEXT =
        reinterpret_cast<PFN_vkDestroyShaderEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyShaderEXT"));
#endif
#if defined(VK_EXT_shader_object)
    table.vkGetShaderBinaryDataEXT = reinterpret_cast<PFN_vkGetShaderBinaryDataEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetShaderBinaryDataEXT"));
#endif
#if defined(VK_EXT_shader_object)
    table.vkCmdBindShadersEXT =
        reinterpret_cast<PFN_vkCmdBindShadersEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindShadersEXT"));
#endif
#if defined(VK_QNX_external_memory_screen_buffer)
    table.vkGetScreenBufferPropertiesQNX = reinterpret_cast<PFN_vkGetScreenBufferPropertiesQNX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetScreenBufferPropertiesQNX"));
#endif
#if defined(VK_AMDX_shader_enqueue)
    table.vkGetExecutionGraphPipelineScratchSizeAMDX = reinterpret_cast<PFN_vkGetExecutionGraphPipelineScratchSizeAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetExecutionGraphPipelineScratchSizeAMDX"));
#endif
#if defined(VK_AMDX_shader_enqueue)
    table.vkGetExecutionGraphPipelineNodeIndexAMDX = reinterpret_cast<PFN_vkGetExecutionGraphPipelineNodeIndexAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetExecutionGraphPipelineNodeIndexAMDX"));
#endif
#if defined(VK_AMDX_shader_enqueue)
    table.vkCreateExecutionGraphPipelinesAMDX = reinterpret_cast<PFN_vkCreateExecutionGraphPipelinesAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateExecutionGraphPipelinesAMDX"));
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
    table.vkCmdInitializeGraphScratchMemoryAMDX = reinterpret_cast<PFN_vkCmdInitializeGraphScratchMemoryAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdInitializeGraphScratchMemoryAMDX"));
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
    table.vkCmdDispatchGraphAMDX = reinterpret_cast<PFN_vkCmdDispatchGraphAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchGraphAMDX"));
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
    table.vkCmdDispatchGraphIndirectAMDX = reinterpret_cast<PFN_vkCmdDispatchGraphIndirectAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchGraphIndirectAMDX"));
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
    table.vkCmdDispatchGraphIndirectCountAMDX = reinterpret_cast<PFN_vkCmdDispatchGraphIndirectCountAMDX>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchGraphIndirectCountAMDX"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdBindDescriptorSets2 = reinterpret_cast<PFN_vkCmdBindDescriptorSets2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorSets2"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdPushConstants2 =
        reinterpret_cast<PFN_vkCmdPushConstants2>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushConstants2"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdPushDescriptorSet2 = reinterpret_cast<PFN_vkCmdPushDescriptorSet2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSet2"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdPushDescriptorSetWithTemplate2 = reinterpret_cast<PFN_vkCmdPushDescriptorSetWithTemplate2>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSetWithTemplate2"));
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer))
    table.vkCmdSetDescriptorBufferOffsets2EXT = reinterpret_cast<PFN_vkCmdSetDescriptorBufferOffsets2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDescriptorBufferOffsets2EXT"));
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer))
    table.vkCmdBindDescriptorBufferEmbeddedSamplers2EXT =
        reinterpret_cast<PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"));
#endif
#if defined(VK_NV_low_latency2)
    table.vkSetLatencySleepModeNV = reinterpret_cast<PFN_vkSetLatencySleepModeNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetLatencySleepModeNV"));
#endif
#if defined(VK_NV_low_latency2)
    table.vkLatencySleepNV =
        reinterpret_cast<PFN_vkLatencySleepNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkLatencySleepNV"));
#endif
#if defined(VK_NV_low_latency2)
    table.vkSetLatencyMarkerNV =
        reinterpret_cast<PFN_vkSetLatencyMarkerNV>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetLatencyMarkerNV"));
#endif
#if VK_HEADER_VERSION >= 271 && (defined(VK_NV_low_latency2))
    table.vkGetLatencyTimingsNV = reinterpret_cast<PFN_vkGetLatencyTimingsNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetLatencyTimingsNV"));
#endif
#if defined(VK_NV_low_latency2)
    table.vkQueueNotifyOutOfBandNV = reinterpret_cast<PFN_vkQueueNotifyOutOfBandNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueNotifyOutOfBandNV"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdSetRenderingAttachmentLocations = reinterpret_cast<PFN_vkCmdSetRenderingAttachmentLocations>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRenderingAttachmentLocations"));
#endif
#if defined(VKIT_API_VERSION_1_4)
    table.vkCmdSetRenderingInputAttachmentIndices = reinterpret_cast<PFN_vkCmdSetRenderingInputAttachmentIndices>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRenderingInputAttachmentIndices"));
#endif
#if (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clamp_control)) || defined(VK_EXT_depth_clamp_control)
    table.vkCmdSetDepthClampRangeEXT = reinterpret_cast<PFN_vkCmdSetDepthClampRangeEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthClampRangeEXT"));
#endif
#if defined(VK_EXT_external_memory_metal)
    table.vkGetMemoryMetalHandleEXT = reinterpret_cast<PFN_vkGetMemoryMetalHandleEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryMetalHandleEXT"));
#endif
#if defined(VK_EXT_external_memory_metal)
    table.vkGetMemoryMetalHandlePropertiesEXT = reinterpret_cast<PFN_vkGetMemoryMetalHandlePropertiesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetMemoryMetalHandlePropertiesEXT"));
#endif
#if defined(VK_NV_cooperative_vector)
    table.vkConvertCooperativeVectorMatrixNV = reinterpret_cast<PFN_vkConvertCooperativeVectorMatrixNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkConvertCooperativeVectorMatrixNV"));
#endif
#if defined(VK_NV_cooperative_vector)
    table.vkCmdConvertCooperativeVectorMatrixNV = reinterpret_cast<PFN_vkCmdConvertCooperativeVectorMatrixNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdConvertCooperativeVectorMatrixNV"));
#endif
#if defined(VK_QCOM_tile_shading)
    table.vkCmdDispatchTileQCOM = reinterpret_cast<PFN_vkCmdDispatchTileQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchTileQCOM"));
#endif
#if defined(VK_QCOM_tile_shading)
    table.vkCmdBeginPerTileExecutionQCOM = reinterpret_cast<PFN_vkCmdBeginPerTileExecutionQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginPerTileExecutionQCOM"));
#endif
#if defined(VK_QCOM_tile_shading)
    table.vkCmdEndPerTileExecutionQCOM = reinterpret_cast<PFN_vkCmdEndPerTileExecutionQCOM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndPerTileExecutionQCOM"));
#endif
#if defined(VK_NV_external_compute_queue)
    table.vkCreateExternalComputeQueueNV = reinterpret_cast<PFN_vkCreateExternalComputeQueueNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateExternalComputeQueueNV"));
#endif
#if defined(VK_NV_external_compute_queue)
    table.vkDestroyExternalComputeQueueNV = reinterpret_cast<PFN_vkDestroyExternalComputeQueueNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyExternalComputeQueueNV"));
#endif
#if defined(VK_NV_external_compute_queue)
    table.vkGetExternalComputeQueueDataNV = reinterpret_cast<PFN_vkGetExternalComputeQueueDataNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetExternalComputeQueueDataNV"));
#endif
#if defined(VK_ARM_tensors)
    table.vkCreateTensorARM =
        reinterpret_cast<PFN_vkCreateTensorARM>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateTensorARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkDestroyTensorARM =
        reinterpret_cast<PFN_vkDestroyTensorARM>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyTensorARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkCreateTensorViewARM = reinterpret_cast<PFN_vkCreateTensorViewARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateTensorViewARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkDestroyTensorViewARM = reinterpret_cast<PFN_vkDestroyTensorViewARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyTensorViewARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkGetTensorMemoryRequirementsARM = reinterpret_cast<PFN_vkGetTensorMemoryRequirementsARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetTensorMemoryRequirementsARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkBindTensorMemoryARM = reinterpret_cast<PFN_vkBindTensorMemoryARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindTensorMemoryARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkGetDeviceTensorMemoryRequirementsARM = reinterpret_cast<PFN_vkGetDeviceTensorMemoryRequirementsARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceTensorMemoryRequirementsARM"));
#endif
#if defined(VK_ARM_tensors)
    table.vkCmdCopyTensorARM =
        reinterpret_cast<PFN_vkCmdCopyTensorARM>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyTensorARM"));
#endif
#if (defined(VK_ARM_tensors) && defined(VK_EXT_descriptor_buffer))
    table.vkGetTensorOpaqueCaptureDescriptorDataARM = reinterpret_cast<PFN_vkGetTensorOpaqueCaptureDescriptorDataARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetTensorOpaqueCaptureDescriptorDataARM"));
#endif
#if (defined(VK_ARM_tensors) && defined(VK_EXT_descriptor_buffer))
    table.vkGetTensorViewOpaqueCaptureDescriptorDataARM =
        reinterpret_cast<PFN_vkGetTensorViewOpaqueCaptureDescriptorDataARM>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetTensorViewOpaqueCaptureDescriptorDataARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkCreateDataGraphPipelinesARM = reinterpret_cast<PFN_vkCreateDataGraphPipelinesARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDataGraphPipelinesARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkCreateDataGraphPipelineSessionARM = reinterpret_cast<PFN_vkCreateDataGraphPipelineSessionARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDataGraphPipelineSessionARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetDataGraphPipelineSessionBindPointRequirementsARM =
        reinterpret_cast<PFN_vkGetDataGraphPipelineSessionBindPointRequirementsARM>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDataGraphPipelineSessionBindPointRequirementsARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetDataGraphPipelineSessionMemoryRequirementsARM =
        reinterpret_cast<PFN_vkGetDataGraphPipelineSessionMemoryRequirementsARM>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDataGraphPipelineSessionMemoryRequirementsARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkBindDataGraphPipelineSessionMemoryARM = reinterpret_cast<PFN_vkBindDataGraphPipelineSessionMemoryARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindDataGraphPipelineSessionMemoryARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkDestroyDataGraphPipelineSessionARM = reinterpret_cast<PFN_vkDestroyDataGraphPipelineSessionARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDataGraphPipelineSessionARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkCmdDispatchDataGraphARM = reinterpret_cast<PFN_vkCmdDispatchDataGraphARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchDataGraphARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetDataGraphPipelineAvailablePropertiesARM =
        reinterpret_cast<PFN_vkGetDataGraphPipelineAvailablePropertiesARM>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDataGraphPipelineAvailablePropertiesARM"));
#endif
#if defined(VK_ARM_data_graph)
    table.vkGetDataGraphPipelinePropertiesARM = reinterpret_cast<PFN_vkGetDataGraphPipelinePropertiesARM>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDataGraphPipelinePropertiesARM"));
#endif
#if defined(VK_EXT_host_query_reset)
    table.vkResetQueryPoolEXT =
        reinterpret_cast<PFN_vkResetQueryPoolEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkResetQueryPoolEXT"));
#endif
#if defined(VK_KHR_maintenance5)
    table.vkGetRenderingAreaGranularityKHR = reinterpret_cast<PFN_vkGetRenderingAreaGranularityKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRenderingAreaGranularityKHR"));
#endif
#if defined(VK_KHR_push_descriptor)
    table.vkCmdPushDescriptorSetKHR = reinterpret_cast<PFN_vkCmdPushDescriptorSetKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSetKHR"));
#endif
#if defined(VK_KHR_maintenance1)
    table.vkTrimCommandPoolKHR =
        reinterpret_cast<PFN_vkTrimCommandPoolKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkTrimCommandPoolKHR"));
#endif
#if defined(VK_KHR_device_group)
    table.vkGetDeviceGroupPeerMemoryFeaturesKHR = reinterpret_cast<PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceGroupPeerMemoryFeaturesKHR"));
#endif
#if defined(VK_KHR_bind_memory2)
    table.vkBindBufferMemory2KHR = reinterpret_cast<PFN_vkBindBufferMemory2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindBufferMemory2KHR"));
#endif
#if defined(VK_KHR_bind_memory2)
    table.vkBindImageMemory2KHR = reinterpret_cast<PFN_vkBindImageMemory2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkBindImageMemory2KHR"));
#endif
#if defined(VK_KHR_device_group)
    table.vkCmdSetDeviceMaskKHR = reinterpret_cast<PFN_vkCmdSetDeviceMaskKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDeviceMaskKHR"));
#endif
#if defined(VK_KHR_device_group)
    table.vkCmdDispatchBaseKHR =
        reinterpret_cast<PFN_vkCmdDispatchBaseKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDispatchBaseKHR"));
#endif
#if defined(VK_KHR_descriptor_update_template)
    table.vkCreateDescriptorUpdateTemplateKHR = reinterpret_cast<PFN_vkCreateDescriptorUpdateTemplateKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateDescriptorUpdateTemplateKHR"));
#endif
#if defined(VK_KHR_descriptor_update_template)
    table.vkDestroyDescriptorUpdateTemplateKHR = reinterpret_cast<PFN_vkDestroyDescriptorUpdateTemplateKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyDescriptorUpdateTemplateKHR"));
#endif
#if defined(VK_KHR_descriptor_update_template)
    table.vkUpdateDescriptorSetWithTemplateKHR = reinterpret_cast<PFN_vkUpdateDescriptorSetWithTemplateKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUpdateDescriptorSetWithTemplateKHR"));
#endif
#if (defined(VK_KHR_push_descriptor) &&                                                                                \
     (defined(VKIT_API_VERSION_1_1) || defined(VK_KHR_descriptor_update_template))) ||                                 \
    (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor))
    table.vkCmdPushDescriptorSetWithTemplateKHR = reinterpret_cast<PFN_vkCmdPushDescriptorSetWithTemplateKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSetWithTemplateKHR"));
#endif
#if defined(VK_KHR_get_memory_requirements2)
    table.vkGetBufferMemoryRequirements2KHR = reinterpret_cast<PFN_vkGetBufferMemoryRequirements2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferMemoryRequirements2KHR"));
#endif
#if defined(VK_KHR_get_memory_requirements2)
    table.vkGetImageMemoryRequirements2KHR = reinterpret_cast<PFN_vkGetImageMemoryRequirements2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageMemoryRequirements2KHR"));
#endif
#if defined(VK_KHR_get_memory_requirements2)
    table.vkGetImageSparseMemoryRequirements2KHR = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSparseMemoryRequirements2KHR"));
#endif
#if defined(VK_KHR_maintenance4)
    table.vkGetDeviceBufferMemoryRequirementsKHR = reinterpret_cast<PFN_vkGetDeviceBufferMemoryRequirementsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceBufferMemoryRequirementsKHR"));
#endif
#if defined(VK_KHR_maintenance4)
    table.vkGetDeviceImageMemoryRequirementsKHR = reinterpret_cast<PFN_vkGetDeviceImageMemoryRequirementsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageMemoryRequirementsKHR"));
#endif
#if defined(VK_KHR_maintenance4)
    table.vkGetDeviceImageSparseMemoryRequirementsKHR =
        reinterpret_cast<PFN_vkGetDeviceImageSparseMemoryRequirementsKHR>(
            p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageSparseMemoryRequirementsKHR"));
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion)
    table.vkCreateSamplerYcbcrConversionKHR = reinterpret_cast<PFN_vkCreateSamplerYcbcrConversionKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateSamplerYcbcrConversionKHR"));
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion)
    table.vkDestroySamplerYcbcrConversionKHR = reinterpret_cast<PFN_vkDestroySamplerYcbcrConversionKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroySamplerYcbcrConversionKHR"));
#endif
#if defined(VK_KHR_maintenance3)
    table.vkGetDescriptorSetLayoutSupportKHR = reinterpret_cast<PFN_vkGetDescriptorSetLayoutSupportKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDescriptorSetLayoutSupportKHR"));
#endif
#if defined(VK_EXT_calibrated_timestamps)
    table.vkGetCalibratedTimestampsEXT = reinterpret_cast<PFN_vkGetCalibratedTimestampsEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetCalibratedTimestampsEXT"));
#endif
#if defined(VK_KHR_create_renderpass2)
    table.vkCreateRenderPass2KHR = reinterpret_cast<PFN_vkCreateRenderPass2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreateRenderPass2KHR"));
#endif
#if defined(VK_KHR_create_renderpass2)
    table.vkCmdBeginRenderPass2KHR = reinterpret_cast<PFN_vkCmdBeginRenderPass2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginRenderPass2KHR"));
#endif
#if defined(VK_KHR_create_renderpass2)
    table.vkCmdNextSubpass2KHR =
        reinterpret_cast<PFN_vkCmdNextSubpass2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdNextSubpass2KHR"));
#endif
#if defined(VK_KHR_create_renderpass2)
    table.vkCmdEndRenderPass2KHR = reinterpret_cast<PFN_vkCmdEndRenderPass2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRenderPass2KHR"));
#endif
#if defined(VK_KHR_timeline_semaphore)
    table.vkGetSemaphoreCounterValueKHR = reinterpret_cast<PFN_vkGetSemaphoreCounterValueKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetSemaphoreCounterValueKHR"));
#endif
#if defined(VK_KHR_timeline_semaphore)
    table.vkWaitSemaphoresKHR =
        reinterpret_cast<PFN_vkWaitSemaphoresKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkWaitSemaphoresKHR"));
#endif
#if defined(VK_KHR_timeline_semaphore)
    table.vkSignalSemaphoreKHR =
        reinterpret_cast<PFN_vkSignalSemaphoreKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSignalSemaphoreKHR"));
#endif
#if defined(VK_KHR_draw_indirect_count)
    table.vkCmdDrawIndirectCountKHR = reinterpret_cast<PFN_vkCmdDrawIndirectCountKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndirectCountKHR"));
#endif
#if defined(VK_AMD_draw_indirect_count)
    table.vkCmdDrawIndirectCountAMD = reinterpret_cast<PFN_vkCmdDrawIndirectCountAMD>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndirectCountAMD"));
#endif
#if defined(VK_KHR_draw_indirect_count)
    table.vkCmdDrawIndexedIndirectCountKHR = reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCountKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndexedIndirectCountKHR"));
#endif
#if defined(VK_AMD_draw_indirect_count)
    table.vkCmdDrawIndexedIndirectCountAMD = reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCountAMD>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdDrawIndexedIndirectCountAMD"));
#endif
#if defined(VK_NV_ray_tracing)
    table.vkGetRayTracingShaderGroupHandlesNV = reinterpret_cast<PFN_vkGetRayTracingShaderGroupHandlesNV>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetRayTracingShaderGroupHandlesNV"));
#endif
#if defined(VK_KHR_buffer_device_address)
    table.vkGetBufferOpaqueCaptureAddressKHR = reinterpret_cast<PFN_vkGetBufferOpaqueCaptureAddressKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferOpaqueCaptureAddressKHR"));
#endif
#if defined(VK_KHR_buffer_device_address)
    table.vkGetBufferDeviceAddressKHR = reinterpret_cast<PFN_vkGetBufferDeviceAddressKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferDeviceAddressKHR"));
#endif
#if defined(VK_EXT_buffer_device_address)
    table.vkGetBufferDeviceAddressEXT = reinterpret_cast<PFN_vkGetBufferDeviceAddressEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetBufferDeviceAddressEXT"));
#endif
#if defined(VK_KHR_buffer_device_address)
    table.vkGetDeviceMemoryOpaqueCaptureAddressKHR = reinterpret_cast<PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR"));
#endif
#if defined(VK_KHR_line_rasterization)
    table.vkCmdSetLineStippleKHR = reinterpret_cast<PFN_vkCmdSetLineStippleKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineStippleKHR"));
#endif
#if defined(VK_EXT_line_rasterization)
    table.vkCmdSetLineStippleEXT = reinterpret_cast<PFN_vkCmdSetLineStippleEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetLineStippleEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetCullModeEXT =
        reinterpret_cast<PFN_vkCmdSetCullModeEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetCullModeEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetFrontFaceEXT =
        reinterpret_cast<PFN_vkCmdSetFrontFaceEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetFrontFaceEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetPrimitiveTopologyEXT = reinterpret_cast<PFN_vkCmdSetPrimitiveTopologyEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPrimitiveTopologyEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetViewportWithCountEXT = reinterpret_cast<PFN_vkCmdSetViewportWithCountEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetViewportWithCountEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetScissorWithCountEXT = reinterpret_cast<PFN_vkCmdSetScissorWithCountEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetScissorWithCountEXT"));
#endif
#if defined(VK_KHR_maintenance5)
    table.vkCmdBindIndexBuffer2KHR = reinterpret_cast<PFN_vkCmdBindIndexBuffer2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindIndexBuffer2KHR"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdBindVertexBuffers2EXT = reinterpret_cast<PFN_vkCmdBindVertexBuffers2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindVertexBuffers2EXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthTestEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthTestEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthTestEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthWriteEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthWriteEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthWriteEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthCompareOpEXT = reinterpret_cast<PFN_vkCmdSetDepthCompareOpEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthCompareOpEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthBoundsTestEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthBoundsTestEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBoundsTestEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetStencilTestEnableEXT = reinterpret_cast<PFN_vkCmdSetStencilTestEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilTestEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
    table.vkCmdSetStencilOpEXT =
        reinterpret_cast<PFN_vkCmdSetStencilOpEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetStencilOpEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
    table.vkCmdSetRasterizerDiscardEnableEXT = reinterpret_cast<PFN_vkCmdSetRasterizerDiscardEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRasterizerDiscardEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
    table.vkCmdSetDepthBiasEnableEXT = reinterpret_cast<PFN_vkCmdSetDepthBiasEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetDepthBiasEnableEXT"));
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
    table.vkCmdSetPrimitiveRestartEnableEXT = reinterpret_cast<PFN_vkCmdSetPrimitiveRestartEnableEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetPrimitiveRestartEnableEXT"));
#endif
#if defined(VK_EXT_private_data)
    table.vkCreatePrivateDataSlotEXT = reinterpret_cast<PFN_vkCreatePrivateDataSlotEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCreatePrivateDataSlotEXT"));
#endif
#if defined(VK_EXT_private_data)
    table.vkDestroyPrivateDataSlotEXT = reinterpret_cast<PFN_vkDestroyPrivateDataSlotEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkDestroyPrivateDataSlotEXT"));
#endif
#if defined(VK_EXT_private_data)
    table.vkSetPrivateDataEXT =
        reinterpret_cast<PFN_vkSetPrivateDataEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkSetPrivateDataEXT"));
#endif
#if defined(VK_EXT_private_data)
    table.vkGetPrivateDataEXT =
        reinterpret_cast<PFN_vkGetPrivateDataEXT>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetPrivateDataEXT"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdCopyBuffer2KHR =
        reinterpret_cast<PFN_vkCmdCopyBuffer2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBuffer2KHR"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdCopyImage2KHR =
        reinterpret_cast<PFN_vkCmdCopyImage2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImage2KHR"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdBlitImage2KHR =
        reinterpret_cast<PFN_vkCmdBlitImage2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBlitImage2KHR"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdCopyBufferToImage2KHR = reinterpret_cast<PFN_vkCmdCopyBufferToImage2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyBufferToImage2KHR"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdCopyImageToBuffer2KHR = reinterpret_cast<PFN_vkCmdCopyImageToBuffer2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdCopyImageToBuffer2KHR"));
#endif
#if defined(VK_KHR_copy_commands2)
    table.vkCmdResolveImage2KHR = reinterpret_cast<PFN_vkCmdResolveImage2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResolveImage2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkCmdSetEvent2KHR =
        reinterpret_cast<PFN_vkCmdSetEvent2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetEvent2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkCmdResetEvent2KHR =
        reinterpret_cast<PFN_vkCmdResetEvent2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdResetEvent2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkCmdWaitEvents2KHR =
        reinterpret_cast<PFN_vkCmdWaitEvents2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWaitEvents2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkCmdPipelineBarrier2KHR = reinterpret_cast<PFN_vkCmdPipelineBarrier2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPipelineBarrier2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkQueueSubmit2KHR =
        reinterpret_cast<PFN_vkQueueSubmit2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkQueueSubmit2KHR"));
#endif
#if defined(VK_KHR_synchronization2)
    table.vkCmdWriteTimestamp2KHR = reinterpret_cast<PFN_vkCmdWriteTimestamp2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdWriteTimestamp2KHR"));
#endif
#if defined(VK_EXT_host_image_copy)
    table.vkCopyMemoryToImageEXT = reinterpret_cast<PFN_vkCopyMemoryToImageEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyMemoryToImageEXT"));
#endif
#if defined(VK_EXT_host_image_copy)
    table.vkCopyImageToMemoryEXT = reinterpret_cast<PFN_vkCopyImageToMemoryEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyImageToMemoryEXT"));
#endif
#if defined(VK_EXT_host_image_copy)
    table.vkCopyImageToImageEXT = reinterpret_cast<PFN_vkCopyImageToImageEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCopyImageToImageEXT"));
#endif
#if defined(VK_EXT_host_image_copy)
    table.vkTransitionImageLayoutEXT = reinterpret_cast<PFN_vkTransitionImageLayoutEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkTransitionImageLayoutEXT"));
#endif
#if defined(VK_KHR_dynamic_rendering)
    table.vkCmdBeginRenderingKHR = reinterpret_cast<PFN_vkCmdBeginRenderingKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBeginRenderingKHR"));
#endif
#if defined(VK_KHR_dynamic_rendering)
    table.vkCmdEndRenderingKHR =
        reinterpret_cast<PFN_vkCmdEndRenderingKHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdEndRenderingKHR"));
#endif
#if defined(VK_KHR_maintenance5)
    table.vkGetImageSubresourceLayout2KHR = reinterpret_cast<PFN_vkGetImageSubresourceLayout2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSubresourceLayout2KHR"));
#endif
#if defined(VK_EXT_host_image_copy) || defined(VK_EXT_image_compression_control)
    table.vkGetImageSubresourceLayout2EXT = reinterpret_cast<PFN_vkGetImageSubresourceLayout2EXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetImageSubresourceLayout2EXT"));
#endif
#if defined(VK_EXT_swapchain_maintenance1)
    table.vkReleaseSwapchainImagesEXT = reinterpret_cast<PFN_vkReleaseSwapchainImagesEXT>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkReleaseSwapchainImagesEXT"));
#endif
#if defined(VK_KHR_maintenance5)
    table.vkGetDeviceImageSubresourceLayoutKHR = reinterpret_cast<PFN_vkGetDeviceImageSubresourceLayoutKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkGetDeviceImageSubresourceLayoutKHR"));
#endif
#if defined(VK_KHR_map_memory2)
    table.vkMapMemory2KHR =
        reinterpret_cast<PFN_vkMapMemory2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkMapMemory2KHR"));
#endif
#if defined(VK_KHR_map_memory2)
    table.vkUnmapMemory2KHR =
        reinterpret_cast<PFN_vkUnmapMemory2KHR>(p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkUnmapMemory2KHR"));
#endif
#if defined(VK_KHR_maintenance6)
    table.vkCmdBindDescriptorSets2KHR = reinterpret_cast<PFN_vkCmdBindDescriptorSets2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdBindDescriptorSets2KHR"));
#endif
#if defined(VK_KHR_maintenance6)
    table.vkCmdPushConstants2KHR = reinterpret_cast<PFN_vkCmdPushConstants2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushConstants2KHR"));
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor))
    table.vkCmdPushDescriptorSet2KHR = reinterpret_cast<PFN_vkCmdPushDescriptorSet2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSet2KHR"));
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor))
    table.vkCmdPushDescriptorSetWithTemplate2KHR = reinterpret_cast<PFN_vkCmdPushDescriptorSetWithTemplate2KHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdPushDescriptorSetWithTemplate2KHR"));
#endif
#if defined(VK_KHR_dynamic_rendering_local_read)
    table.vkCmdSetRenderingAttachmentLocationsKHR = reinterpret_cast<PFN_vkCmdSetRenderingAttachmentLocationsKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRenderingAttachmentLocationsKHR"));
#endif
#if defined(VK_KHR_dynamic_rendering_local_read)
    table.vkCmdSetRenderingInputAttachmentIndicesKHR = reinterpret_cast<PFN_vkCmdSetRenderingInputAttachmentIndicesKHR>(
        p_InstanceFuncs.GetDeviceProcAddr(p_Device, "vkCmdSetRenderingInputAttachmentIndicesKHR"));
#endif
    return table;
}

void InstanceTable::DestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyInstance fn = validateFunction("vkDestroyInstance", this->vkDestroyInstance);
    fn(instance, pAllocator);
#else
    this->vkDestroyInstance(instance, pAllocator);
#endif
}
VkResult InstanceTable::EnumeratePhysicalDevices(VkInstance instance, uint32_t *pPhysicalDeviceCount,
                                                 VkPhysicalDevice *pPhysicalDevices) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumeratePhysicalDevices fn =
        validateFunction("vkEnumeratePhysicalDevices", this->vkEnumeratePhysicalDevices);
    return fn(instance, pPhysicalDeviceCount, pPhysicalDevices);
#else
    return this->vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
#endif
}
PFN_vkVoidFunction InstanceTable::GetDeviceProcAddr(VkDevice device, const char *pName) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceProcAddr fn = validateFunction("vkGetDeviceProcAddr", this->vkGetDeviceProcAddr);
    return fn(device, pName);
#else
    return this->vkGetDeviceProcAddr(device, pName);
#endif
}
void InstanceTable::GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice,
                                                VkPhysicalDeviceProperties *pProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceProperties fn =
        validateFunction("vkGetPhysicalDeviceProperties", this->vkGetPhysicalDeviceProperties);
    fn(physicalDevice, pProperties);
#else
    this->vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
#endif
}
void InstanceTable::GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice,
                                                           uint32_t *pQueueFamilyPropertyCount,
                                                           VkQueueFamilyProperties *pQueueFamilyProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyProperties fn =
        validateFunction("vkGetPhysicalDeviceQueueFamilyProperties", this->vkGetPhysicalDeviceQueueFamilyProperties);
    fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
#else
    this->vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
#endif
}
void InstanceTable::GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice,
                                                      VkPhysicalDeviceMemoryProperties *pMemoryProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceMemoryProperties fn =
        validateFunction("vkGetPhysicalDeviceMemoryProperties", this->vkGetPhysicalDeviceMemoryProperties);
    fn(physicalDevice, pMemoryProperties);
#else
    this->vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
#endif
}
void InstanceTable::GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice,
                                              VkPhysicalDeviceFeatures *pFeatures) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFeatures fn =
        validateFunction("vkGetPhysicalDeviceFeatures", this->vkGetPhysicalDeviceFeatures);
    fn(physicalDevice, pFeatures);
#else
    this->vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
#endif
}
void InstanceTable::GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format,
                                                      VkFormatProperties *pFormatProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFormatProperties fn =
        validateFunction("vkGetPhysicalDeviceFormatProperties", this->vkGetPhysicalDeviceFormatProperties);
    fn(physicalDevice, format, pFormatProperties);
#else
    this->vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
#endif
}
VkResult InstanceTable::GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format,
                                                               VkImageType type, VkImageTiling tiling,
                                                               VkImageUsageFlags usage, VkImageCreateFlags flags,
                                                               VkImageFormatProperties *pImageFormatProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceImageFormatProperties fn =
        validateFunction("vkGetPhysicalDeviceImageFormatProperties", this->vkGetPhysicalDeviceImageFormatProperties);
    return fn(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
#else
    return this->vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags,
                                                          pImageFormatProperties);
#endif
}
VkResult InstanceTable::CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo,
                                     const VkAllocationCallbacks *pAllocator, VkDevice *pDevice) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDevice fn = validateFunction("vkCreateDevice", this->vkCreateDevice);
    return fn(physicalDevice, pCreateInfo, pAllocator, pDevice);
#else
    return this->vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
#endif
}
VkResult InstanceTable::EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
                                                       VkLayerProperties *pProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumerateDeviceLayerProperties fn =
        validateFunction("vkEnumerateDeviceLayerProperties", this->vkEnumerateDeviceLayerProperties);
    return fn(physicalDevice, pPropertyCount, pProperties);
#else
    return this->vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
#endif
}
VkResult InstanceTable::EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName,
                                                           uint32_t *pPropertyCount,
                                                           VkExtensionProperties *pProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumerateDeviceExtensionProperties fn =
        validateFunction("vkEnumerateDeviceExtensionProperties", this->vkEnumerateDeviceExtensionProperties);
    return fn(physicalDevice, pLayerName, pPropertyCount, pProperties);
#else
    return this->vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
#endif
}
void InstanceTable::GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format,
                                                                 VkImageType type, VkSampleCountFlagBits samples,
                                                                 VkImageUsageFlags usage, VkImageTiling tiling,
                                                                 uint32_t *pPropertyCount,
                                                                 VkSparseImageFormatProperties *pProperties) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSparseImageFormatProperties fn = validateFunction(
        "vkGetPhysicalDeviceSparseImageFormatProperties", this->vkGetPhysicalDeviceSparseImageFormatProperties);
    fn(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
#else
    this->vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling,
                                                         pPropertyCount, pProperties);
#endif
}
#if defined(VK_KHR_android_surface)
VkResult InstanceTable::CreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR *pCreateInfo,
                                                const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateAndroidSurfaceKHR fn =
        validateFunction("vkCreateAndroidSurfaceKHR", this->vkCreateAndroidSurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_OHOS_surface)
VkResult InstanceTable::CreateSurfaceOHOS(VkInstance instance, const VkSurfaceCreateInfoOHOS *pCreateInfo,
                                          const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSurfaceOHOS fn = validateFunction("vkCreateSurfaceOHOS", this->vkCreateSurfaceOHOS);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateSurfaceOHOS(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
                                                              VkDisplayPropertiesKHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceDisplayPropertiesKHR fn =
        validateFunction("vkGetPhysicalDeviceDisplayPropertiesKHR", this->vkGetPhysicalDeviceDisplayPropertiesKHR);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice,
                                                                   uint32_t *pPropertyCount,
                                                                   VkDisplayPlanePropertiesKHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", this->vkGetPhysicalDeviceDisplayPlanePropertiesKHR);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex,
                                                            uint32_t *pDisplayCount, VkDisplayKHR *pDisplays) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDisplayPlaneSupportedDisplaysKHR fn =
        validateFunction("vkGetDisplayPlaneSupportedDisplaysKHR", this->vkGetDisplayPlaneSupportedDisplaysKHR);
    return fn(physicalDevice, planeIndex, pDisplayCount, pDisplays);
#    else
    return this->vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::GetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display,
                                                    uint32_t *pPropertyCount,
                                                    VkDisplayModePropertiesKHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDisplayModePropertiesKHR fn =
        validateFunction("vkGetDisplayModePropertiesKHR", this->vkGetDisplayModePropertiesKHR);
    return fn(physicalDevice, display, pPropertyCount, pProperties);
#    else
    return this->vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display,
                                             const VkDisplayModeCreateInfoKHR *pCreateInfo,
                                             const VkAllocationCallbacks *pAllocator, VkDisplayModeKHR *pMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDisplayModeKHR fn = validateFunction("vkCreateDisplayModeKHR", this->vkCreateDisplayModeKHR);
    return fn(physicalDevice, display, pCreateInfo, pAllocator, pMode);
#    else
    return this->vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::GetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode,
                                                       uint32_t planeIndex,
                                                       VkDisplayPlaneCapabilitiesKHR *pCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDisplayPlaneCapabilitiesKHR fn =
        validateFunction("vkGetDisplayPlaneCapabilitiesKHR", this->vkGetDisplayPlaneCapabilitiesKHR);
    return fn(physicalDevice, mode, planeIndex, pCapabilities);
#    else
    return this->vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
#    endif
}
#endif
#if defined(VK_KHR_display)
VkResult InstanceTable::CreateDisplayPlaneSurfaceKHR(VkInstance instance,
                                                     const VkDisplaySurfaceCreateInfoKHR *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDisplayPlaneSurfaceKHR fn =
        validateFunction("vkCreateDisplayPlaneSurfaceKHR", this->vkCreateDisplayPlaneSurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_surface)
void InstanceTable::DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface,
                                      const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySurfaceKHR fn = validateFunction("vkDestroySurfaceKHR", this->vkDestroySurfaceKHR);
    fn(instance, surface, pAllocator);
#    else
    this->vkDestroySurfaceKHR(instance, surface, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_surface)
VkResult InstanceTable::GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex,
                                                           VkSurfaceKHR surface, VkBool32 *pSupported) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceSupportKHR fn =
        validateFunction("vkGetPhysicalDeviceSurfaceSupportKHR", this->vkGetPhysicalDeviceSurfaceSupportKHR);
    return fn(physicalDevice, queueFamilyIndex, surface, pSupported);
#    else
    return this->vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
#    endif
}
#endif
#if defined(VK_KHR_surface)
VkResult InstanceTable::GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
                                                                VkSurfaceCapabilitiesKHR *pSurfaceCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR fn =
        validateFunction("vkGetPhysicalDeviceSurfaceCapabilitiesKHR", this->vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
    return fn(physicalDevice, surface, pSurfaceCapabilities);
#    else
    return this->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
#    endif
}
#endif
#if defined(VK_KHR_surface)
VkResult InstanceTable::GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
                                                           uint32_t *pSurfaceFormatCount,
                                                           VkSurfaceFormatKHR *pSurfaceFormats) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceFormatsKHR fn =
        validateFunction("vkGetPhysicalDeviceSurfaceFormatsKHR", this->vkGetPhysicalDeviceSurfaceFormatsKHR);
    return fn(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
#    else
    return this->vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
#    endif
}
#endif
#if defined(VK_KHR_surface)
VkResult InstanceTable::GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
                                                                uint32_t *pPresentModeCount,
                                                                VkPresentModeKHR *pPresentModes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfacePresentModesKHR fn =
        validateFunction("vkGetPhysicalDeviceSurfacePresentModesKHR", this->vkGetPhysicalDeviceSurfacePresentModesKHR);
    return fn(physicalDevice, surface, pPresentModeCount, pPresentModes);
#    else
    return this->vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
#    endif
}
#endif
#if defined(VK_NN_vi_surface)
VkResult InstanceTable::CreateViSurfaceNN(VkInstance instance, const VkViSurfaceCreateInfoNN *pCreateInfo,
                                          const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateViSurfaceNN fn = validateFunction("vkCreateViSurfaceNN", this->vkCreateViSurfaceNN);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_wayland_surface)
VkResult InstanceTable::CreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR *pCreateInfo,
                                                const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateWaylandSurfaceKHR fn =
        validateFunction("vkCreateWaylandSurfaceKHR", this->vkCreateWaylandSurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_wayland_surface)
VkBool32 InstanceTable::GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice,
                                                                       uint32_t queueFamilyIndex,
                                                                       struct wl_display *display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR fn = validateFunction(
        "vkGetPhysicalDeviceWaylandPresentationSupportKHR", this->vkGetPhysicalDeviceWaylandPresentationSupportKHR);
    return fn(physicalDevice, queueFamilyIndex, display);
#    else
    return this->vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
#    endif
}
#endif
#if defined(VK_KHR_win32_surface)
VkResult InstanceTable::CreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR *pCreateInfo,
                                              const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateWin32SurfaceKHR fn = validateFunction("vkCreateWin32SurfaceKHR", this->vkCreateWin32SurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_win32_surface)
VkBool32 InstanceTable::GetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice,
                                                                     uint32_t queueFamilyIndex) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR fn = validateFunction(
        "vkGetPhysicalDeviceWin32PresentationSupportKHR", this->vkGetPhysicalDeviceWin32PresentationSupportKHR);
    return fn(physicalDevice, queueFamilyIndex);
#    else
    return this->vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
#    endif
}
#endif
#if defined(VK_KHR_xlib_surface)
VkResult InstanceTable::CreateXlibSurfaceKHR(VkInstance instance, const VkXlibSurfaceCreateInfoKHR *pCreateInfo,
                                             const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateXlibSurfaceKHR fn = validateFunction("vkCreateXlibSurfaceKHR", this->vkCreateXlibSurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_xlib_surface)
VkBool32 InstanceTable::GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice,
                                                                    uint32_t queueFamilyIndex, Display *dpy,
                                                                    VisualID visualID) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR fn = validateFunction(
        "vkGetPhysicalDeviceXlibPresentationSupportKHR", this->vkGetPhysicalDeviceXlibPresentationSupportKHR);
    return fn(physicalDevice, queueFamilyIndex, dpy, visualID);
#    else
    return this->vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
#    endif
}
#endif
#if defined(VK_KHR_xcb_surface)
VkResult InstanceTable::CreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR *pCreateInfo,
                                            const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateXcbSurfaceKHR fn = validateFunction("vkCreateXcbSurfaceKHR", this->vkCreateXcbSurfaceKHR);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_KHR_xcb_surface)
VkBool32 InstanceTable::GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice,
                                                                   uint32_t queueFamilyIndex,
                                                                   xcb_connection_t *connection,
                                                                   xcb_visualid_t visual_id) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR fn = validateFunction(
        "vkGetPhysicalDeviceXcbPresentationSupportKHR", this->vkGetPhysicalDeviceXcbPresentationSupportKHR);
    return fn(physicalDevice, queueFamilyIndex, connection, visual_id);
#    else
    return this->vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
#    endif
}
#endif
#if defined(VK_EXT_directfb_surface)
VkResult InstanceTable::CreateDirectFBSurfaceEXT(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT *pCreateInfo,
                                                 const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDirectFBSurfaceEXT fn =
        validateFunction("vkCreateDirectFBSurfaceEXT", this->vkCreateDirectFBSurfaceEXT);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_EXT_directfb_surface)
VkBool32 InstanceTable::GetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice,
                                                                        uint32_t queueFamilyIndex, IDirectFB *dfb) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT fn = validateFunction(
        "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", this->vkGetPhysicalDeviceDirectFBPresentationSupportEXT);
    return fn(physicalDevice, queueFamilyIndex, dfb);
#    else
    return this->vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
#    endif
}
#endif
#if defined(VK_FUCHSIA_imagepipe_surface)
VkResult InstanceTable::CreateImagePipeSurfaceFUCHSIA(VkInstance instance,
                                                      const VkImagePipeSurfaceCreateInfoFUCHSIA *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateImagePipeSurfaceFUCHSIA fn =
        validateFunction("vkCreateImagePipeSurfaceFUCHSIA", this->vkCreateImagePipeSurfaceFUCHSIA);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_GGP_stream_descriptor_surface)
VkResult InstanceTable::CreateStreamDescriptorSurfaceGGP(VkInstance instance,
                                                         const VkStreamDescriptorSurfaceCreateInfoGGP *pCreateInfo,
                                                         const VkAllocationCallbacks *pAllocator,
                                                         VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateStreamDescriptorSurfaceGGP fn =
        validateFunction("vkCreateStreamDescriptorSurfaceGGP", this->vkCreateStreamDescriptorSurfaceGGP);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_QNX_screen_surface)
VkResult InstanceTable::CreateScreenSurfaceQNX(VkInstance instance, const VkScreenSurfaceCreateInfoQNX *pCreateInfo,
                                               const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateScreenSurfaceQNX fn =
        validateFunction("vkCreateScreenSurfaceQNX", this->vkCreateScreenSurfaceQNX);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_QNX_screen_surface)
VkBool32 InstanceTable::GetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice,
                                                                      uint32_t queueFamilyIndex,
                                                                      struct _screen_window *window) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX fn = validateFunction(
        "vkGetPhysicalDeviceScreenPresentationSupportQNX", this->vkGetPhysicalDeviceScreenPresentationSupportQNX);
    return fn(physicalDevice, queueFamilyIndex, window);
#    else
    return this->vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
#    endif
}
#endif
#if defined(VK_EXT_debug_report)
VkResult InstanceTable::CreateDebugReportCallbackEXT(VkInstance instance,
                                                     const VkDebugReportCallbackCreateInfoEXT *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkDebugReportCallbackEXT *pCallback) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDebugReportCallbackEXT fn =
        validateFunction("vkCreateDebugReportCallbackEXT", this->vkCreateDebugReportCallbackEXT);
    return fn(instance, pCreateInfo, pAllocator, pCallback);
#    else
    return this->vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
#    endif
}
#endif
#if defined(VK_EXT_debug_report)
void InstanceTable::DestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback,
                                                  const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDebugReportCallbackEXT fn =
        validateFunction("vkDestroyDebugReportCallbackEXT", this->vkDestroyDebugReportCallbackEXT);
    fn(instance, callback, pAllocator);
#    else
    this->vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_debug_report)
void InstanceTable::DebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags,
                                          VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location,
                                          int32_t messageCode, const char *pLayerPrefix, const char *pMessage) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDebugReportMessageEXT fn = validateFunction("vkDebugReportMessageEXT", this->vkDebugReportMessageEXT);
    fn(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
#    else
    this->vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
#    endif
}
#endif
#if defined(VK_NV_external_memory_capabilities)
VkResult InstanceTable::GetPhysicalDeviceExternalImageFormatPropertiesNV(
    VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage,
    VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV fn = validateFunction(
        "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", this->vkGetPhysicalDeviceExternalImageFormatPropertiesNV);
    return fn(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
#    else
    return this->vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags,
                                                                    externalHandleType, pExternalImageFormatProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice,
                                               VkPhysicalDeviceFeatures2 *pFeatures) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFeatures2 fn =
        validateFunction("vkGetPhysicalDeviceFeatures2", this->vkGetPhysicalDeviceFeatures2);
    fn(physicalDevice, pFeatures);
#    else
    this->vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice,
                                                 VkPhysicalDeviceProperties2 *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceProperties2 fn =
        validateFunction("vkGetPhysicalDeviceProperties2", this->vkGetPhysicalDeviceProperties2);
    fn(physicalDevice, pProperties);
#    else
    this->vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format,
                                                       VkFormatProperties2 *pFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFormatProperties2 fn =
        validateFunction("vkGetPhysicalDeviceFormatProperties2", this->vkGetPhysicalDeviceFormatProperties2);
    fn(physicalDevice, format, pFormatProperties);
#    else
    this->vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult InstanceTable::GetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
    VkImageFormatProperties2 *pImageFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceImageFormatProperties2 fn =
        validateFunction("vkGetPhysicalDeviceImageFormatProperties2", this->vkGetPhysicalDeviceImageFormatProperties2);
    return fn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
#    else
    return this->vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice,
                                                            uint32_t *pQueueFamilyPropertyCount,
                                                            VkQueueFamilyProperties2 *pQueueFamilyProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyProperties2 fn =
        validateFunction("vkGetPhysicalDeviceQueueFamilyProperties2", this->vkGetPhysicalDeviceQueueFamilyProperties2);
    fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
#    else
    this->vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice,
                                                       VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceMemoryProperties2 fn =
        validateFunction("vkGetPhysicalDeviceMemoryProperties2", this->vkGetPhysicalDeviceMemoryProperties2);
    fn(physicalDevice, pMemoryProperties);
#    else
    this->vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
    uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 fn = validateFunction(
        "vkGetPhysicalDeviceSparseImageFormatProperties2", this->vkGetPhysicalDeviceSparseImageFormatProperties2);
    fn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
#    else
    this->vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
    VkExternalBufferProperties *pExternalBufferProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalBufferProperties fn = validateFunction(
        "vkGetPhysicalDeviceExternalBufferProperties", this->vkGetPhysicalDeviceExternalBufferProperties);
    fn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
#    else
    this->vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
#    endif
}
#endif
#if defined(VK_NV_external_memory_sci_buf)
VkResult InstanceTable::GetPhysicalDeviceExternalMemorySciBufPropertiesNV(
    VkPhysicalDevice physicalDevice, VkExternalMemoryHandleTypeFlagBits handleType, NvSciBufObj handle,
    VkMemorySciBufPropertiesNV *pMemorySciBufProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV fn =
        validateFunction("vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV",
                         this->vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV);
    return fn(physicalDevice, handleType, handle, pMemorySciBufProperties);
#    else
    return this->vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(physicalDevice, handleType, handle,
                                                                     pMemorySciBufProperties);
#    endif
}
#endif
#if defined(VK_NV_external_memory_sci_buf)
VkResult InstanceTable::GetPhysicalDeviceSciBufAttributesNV(VkPhysicalDevice physicalDevice,
                                                            NvSciBufAttrList pAttributes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSciBufAttributesNV fn =
        validateFunction("vkGetPhysicalDeviceSciBufAttributesNV", this->vkGetPhysicalDeviceSciBufAttributesNV);
    return fn(physicalDevice, pAttributes);
#    else
    return this->vkGetPhysicalDeviceSciBufAttributesNV(physicalDevice, pAttributes);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties *pExternalSemaphoreProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalSemaphoreProperties fn = validateFunction(
        "vkGetPhysicalDeviceExternalSemaphoreProperties", this->vkGetPhysicalDeviceExternalSemaphoreProperties);
    fn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
#    else
    this->vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo,
                                                         pExternalSemaphoreProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void InstanceTable::GetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
    VkExternalFenceProperties *pExternalFenceProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalFenceProperties fn = validateFunction(
        "vkGetPhysicalDeviceExternalFenceProperties", this->vkGetPhysicalDeviceExternalFenceProperties);
    fn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
#    else
    this->vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
VkResult InstanceTable::GetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice,
                                                             const VkSciSyncAttributesInfoNV *pSciSyncAttributesInfo,
                                                             NvSciSyncAttrList pAttributes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSciSyncAttributesNV fn =
        validateFunction("vkGetPhysicalDeviceSciSyncAttributesNV", this->vkGetPhysicalDeviceSciSyncAttributesNV);
    return fn(physicalDevice, pSciSyncAttributesInfo, pAttributes);
#    else
    return this->vkGetPhysicalDeviceSciSyncAttributesNV(physicalDevice, pSciSyncAttributesInfo, pAttributes);
#    endif
}
#endif
#if defined(VK_EXT_direct_mode_display)
VkResult InstanceTable::ReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseDisplayEXT fn = validateFunction("vkReleaseDisplayEXT", this->vkReleaseDisplayEXT);
    return fn(physicalDevice, display);
#    else
    return this->vkReleaseDisplayEXT(physicalDevice, display);
#    endif
}
#endif
#if defined(VK_EXT_acquire_xlib_display)
VkResult InstanceTable::AcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display *dpy, VkDisplayKHR display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireXlibDisplayEXT fn = validateFunction("vkAcquireXlibDisplayEXT", this->vkAcquireXlibDisplayEXT);
    return fn(physicalDevice, dpy, display);
#    else
    return this->vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
#    endif
}
#endif
#if defined(VK_EXT_acquire_xlib_display)
VkResult InstanceTable::GetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display *dpy, RROutput rrOutput,
                                                 VkDisplayKHR *pDisplay) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRandROutputDisplayEXT fn =
        validateFunction("vkGetRandROutputDisplayEXT", this->vkGetRandROutputDisplayEXT);
    return fn(physicalDevice, dpy, rrOutput, pDisplay);
#    else
    return this->vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
#    endif
}
#endif
#if defined(VK_NV_acquire_winrt_display)
VkResult InstanceTable::AcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireWinrtDisplayNV fn = validateFunction("vkAcquireWinrtDisplayNV", this->vkAcquireWinrtDisplayNV);
    return fn(physicalDevice, display);
#    else
    return this->vkAcquireWinrtDisplayNV(physicalDevice, display);
#    endif
}
#endif
#if defined(VK_NV_acquire_winrt_display)
VkResult InstanceTable::GetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId,
                                          VkDisplayKHR *pDisplay) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetWinrtDisplayNV fn = validateFunction("vkGetWinrtDisplayNV", this->vkGetWinrtDisplayNV);
    return fn(physicalDevice, deviceRelativeId, pDisplay);
#    else
    return this->vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
#    endif
}
#endif
#if defined(VK_EXT_display_surface_counter)
VkResult InstanceTable::GetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
                                                                 VkSurfaceCapabilities2EXT *pSurfaceCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT fn = validateFunction(
        "vkGetPhysicalDeviceSurfaceCapabilities2EXT", this->vkGetPhysicalDeviceSurfaceCapabilities2EXT);
    return fn(physicalDevice, surface, pSurfaceCapabilities);
#    else
    return this->vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult InstanceTable::EnumeratePhysicalDeviceGroups(
    VkInstance instance, uint32_t *pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumeratePhysicalDeviceGroups fn =
        validateFunction("vkEnumeratePhysicalDeviceGroups", this->vkEnumeratePhysicalDeviceGroups);
    return fn(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
#    else
    return this->vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
#    endif
}
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
VkResult InstanceTable::GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface,
                                                              uint32_t *pRectCount, VkRect2D *pRects) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDevicePresentRectanglesKHR fn =
        validateFunction("vkGetPhysicalDevicePresentRectanglesKHR", this->vkGetPhysicalDevicePresentRectanglesKHR);
    return fn(physicalDevice, surface, pRectCount, pRects);
#    else
    return this->vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
#    endif
}
#endif
#if defined(VK_MVK_ios_surface)
VkResult InstanceTable::CreateIOSSurfaceMVK(VkInstance instance, const VkIOSSurfaceCreateInfoMVK *pCreateInfo,
                                            const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateIOSSurfaceMVK fn = validateFunction("vkCreateIOSSurfaceMVK", this->vkCreateIOSSurfaceMVK);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_MVK_macos_surface)
VkResult InstanceTable::CreateMacOSSurfaceMVK(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK *pCreateInfo,
                                              const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateMacOSSurfaceMVK fn = validateFunction("vkCreateMacOSSurfaceMVK", this->vkCreateMacOSSurfaceMVK);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_EXT_metal_surface)
VkResult InstanceTable::CreateMetalSurfaceEXT(VkInstance instance, const VkMetalSurfaceCreateInfoEXT *pCreateInfo,
                                              const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateMetalSurfaceEXT fn = validateFunction("vkCreateMetalSurfaceEXT", this->vkCreateMetalSurfaceEXT);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_EXT_sample_locations)
void InstanceTable::GetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice,
                                                              VkSampleCountFlagBits samples,
                                                              VkMultisamplePropertiesEXT *pMultisampleProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT fn = validateFunction(
        "vkGetPhysicalDeviceMultisamplePropertiesEXT", this->vkGetPhysicalDeviceMultisamplePropertiesEXT);
    fn(physicalDevice, samples, pMultisampleProperties);
#    else
    this->vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_surface_capabilities2)
VkResult InstanceTable::GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice,
                                                                 const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                 VkSurfaceCapabilities2KHR *pSurfaceCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR fn = validateFunction(
        "vkGetPhysicalDeviceSurfaceCapabilities2KHR", this->vkGetPhysicalDeviceSurfaceCapabilities2KHR);
    return fn(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
#    else
    return this->vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
#    endif
}
#endif
#if defined(VK_KHR_get_surface_capabilities2)
VkResult InstanceTable::GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice,
                                                            const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                            uint32_t *pSurfaceFormatCount,
                                                            VkSurfaceFormat2KHR *pSurfaceFormats) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfaceFormats2KHR fn =
        validateFunction("vkGetPhysicalDeviceSurfaceFormats2KHR", this->vkGetPhysicalDeviceSurfaceFormats2KHR);
    return fn(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
#    else
    return this->vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount,
                                                       pSurfaceFormats);
#    endif
}
#endif
#if defined(VK_KHR_get_display_properties2)
VkResult InstanceTable::GetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice,
                                                               uint32_t *pPropertyCount,
                                                               VkDisplayProperties2KHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceDisplayProperties2KHR fn =
        validateFunction("vkGetPhysicalDeviceDisplayProperties2KHR", this->vkGetPhysicalDeviceDisplayProperties2KHR);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_display_properties2)
VkResult InstanceTable::GetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice,
                                                                    uint32_t *pPropertyCount,
                                                                    VkDisplayPlaneProperties2KHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR fn = validateFunction(
        "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", this->vkGetPhysicalDeviceDisplayPlaneProperties2KHR);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_display_properties2)
VkResult InstanceTable::GetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display,
                                                     uint32_t *pPropertyCount,
                                                     VkDisplayModeProperties2KHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDisplayModeProperties2KHR fn =
        validateFunction("vkGetDisplayModeProperties2KHR", this->vkGetDisplayModeProperties2KHR);
    return fn(physicalDevice, display, pPropertyCount, pProperties);
#    else
    return this->vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_display_properties2)
VkResult InstanceTable::GetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice,
                                                        const VkDisplayPlaneInfo2KHR *pDisplayPlaneInfo,
                                                        VkDisplayPlaneCapabilities2KHR *pCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDisplayPlaneCapabilities2KHR fn =
        validateFunction("vkGetDisplayPlaneCapabilities2KHR", this->vkGetDisplayPlaneCapabilities2KHR);
    return fn(physicalDevice, pDisplayPlaneInfo, pCapabilities);
#    else
    return this->vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
#    endif
}
#endif
#if defined(VK_KHR_calibrated_timestamps)
VkResult InstanceTable::GetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice,
                                                                     uint32_t *pTimeDomainCount,
                                                                     VkTimeDomainKHR *pTimeDomains) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR fn = validateFunction(
        "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR", this->vkGetPhysicalDeviceCalibrateableTimeDomainsKHR);
    return fn(physicalDevice, pTimeDomainCount, pTimeDomains);
#    else
    return this->vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, pTimeDomainCount, pTimeDomains);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
VkResult InstanceTable::CreateDebugUtilsMessengerEXT(VkInstance instance,
                                                     const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkDebugUtilsMessengerEXT *pMessenger) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDebugUtilsMessengerEXT fn =
        validateFunction("vkCreateDebugUtilsMessengerEXT", this->vkCreateDebugUtilsMessengerEXT);
    return fn(instance, pCreateInfo, pAllocator, pMessenger);
#    else
    return this->vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void InstanceTable::DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger,
                                                  const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDebugUtilsMessengerEXT fn =
        validateFunction("vkDestroyDebugUtilsMessengerEXT", this->vkDestroyDebugUtilsMessengerEXT);
    fn(instance, messenger, pAllocator);
#    else
    this->vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void InstanceTable::SubmitDebugUtilsMessageEXT(VkInstance instance,
                                               VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
                                               VkDebugUtilsMessageTypeFlagsEXT messageTypes,
                                               const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSubmitDebugUtilsMessageEXT fn =
        validateFunction("vkSubmitDebugUtilsMessageEXT", this->vkSubmitDebugUtilsMessageEXT);
    fn(instance, messageSeverity, messageTypes, pCallbackData);
#    else
    this->vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
#    endif
}
#endif
#if defined(VK_NV_cooperative_matrix)
VkResult InstanceTable::GetPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesNV *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV fn = validateFunction(
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", this->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_EXT_full_screen_exclusive)
VkResult InstanceTable::GetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice,
                                                                 const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                 uint32_t *pPresentModeCount,
                                                                 VkPresentModeKHR *pPresentModes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT fn = validateFunction(
        "vkGetPhysicalDeviceSurfacePresentModes2EXT", this->vkGetPhysicalDeviceSurfacePresentModes2EXT);
    return fn(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
#    else
    return this->vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount,
                                                            pPresentModes);
#    endif
}
#endif
#if defined(VK_KHR_performance_query)
VkResult InstanceTable::EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t *pCounterCount,
    VkPerformanceCounterKHR *pCounters, VkPerformanceCounterDescriptionKHR *pCounterDescriptions) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR fn =
        validateFunction("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
                         this->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR);
    return fn(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
#    else
    return this->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
#    endif
}
#endif
#if defined(VK_KHR_performance_query)
void InstanceTable::GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo,
    uint32_t *pNumPasses) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR fn =
        validateFunction("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
                         this->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR);
    fn(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
#    else
    this->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo,
                                                                  pNumPasses);
#    endif
}
#endif
#if defined(VK_EXT_headless_surface)
VkResult InstanceTable::CreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo,
                                                 const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateHeadlessSurfaceEXT fn =
        validateFunction("vkCreateHeadlessSurfaceEXT", this->vkCreateHeadlessSurfaceEXT);
    return fn(instance, pCreateInfo, pAllocator, pSurface);
#    else
    return this->vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
#    endif
}
#endif
#if defined(VK_NV_coverage_reduction_mode)
VkResult InstanceTable::GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    VkPhysicalDevice physicalDevice, uint32_t *pCombinationCount,
    VkFramebufferMixedSamplesCombinationNV *pCombinations) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV fn =
        validateFunction("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
                         this->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV);
    return fn(physicalDevice, pCombinationCount, pCombinations);
#    else
    return this->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount,
                                                                                   pCombinations);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
VkResult InstanceTable::GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount,
                                                        VkPhysicalDeviceToolProperties *pToolProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceToolProperties fn =
        validateFunction("vkGetPhysicalDeviceToolProperties", this->vkGetPhysicalDeviceToolProperties);
    return fn(physicalDevice, pToolCount, pToolProperties);
#    else
    return this->vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
#    endif
}
#endif
#if defined(VK_KHR_object_refresh)
VkResult InstanceTable::GetPhysicalDeviceRefreshableObjectTypesKHR(VkPhysicalDevice physicalDevice,
                                                                   uint32_t *pRefreshableObjectTypeCount,
                                                                   VkObjectType *pRefreshableObjectTypes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR fn = validateFunction(
        "vkGetPhysicalDeviceRefreshableObjectTypesKHR", this->vkGetPhysicalDeviceRefreshableObjectTypesKHR);
    return fn(physicalDevice, pRefreshableObjectTypeCount, pRefreshableObjectTypes);
#    else
    return this->vkGetPhysicalDeviceRefreshableObjectTypesKHR(physicalDevice, pRefreshableObjectTypeCount,
                                                              pRefreshableObjectTypes);
#    endif
}
#endif
#if defined(VK_KHR_fragment_shading_rate)
VkResult InstanceTable::GetPhysicalDeviceFragmentShadingRatesKHR(
    VkPhysicalDevice physicalDevice, uint32_t *pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR fn = validateFunction(
        "vkGetPhysicalDeviceFragmentShadingRatesKHR", this->vkGetPhysicalDeviceFragmentShadingRatesKHR);
    return fn(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
#    else
    return this->vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount,
                                                            pFragmentShadingRates);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult InstanceTable::GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice,
                                                              const VkVideoProfileInfoKHR *pVideoProfile,
                                                              VkVideoCapabilitiesKHR *pCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR fn =
        validateFunction("vkGetPhysicalDeviceVideoCapabilitiesKHR", this->vkGetPhysicalDeviceVideoCapabilitiesKHR);
    return fn(physicalDevice, pVideoProfile, pCapabilities);
#    else
    return this->vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult InstanceTable::GetPhysicalDeviceVideoFormatPropertiesKHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo,
    uint32_t *pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *pVideoFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceVideoFormatPropertiesKHR", this->vkGetPhysicalDeviceVideoFormatPropertiesKHR);
    return fn(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
#    else
    return this->vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo,
                                                             pVideoFormatPropertyCount, pVideoFormatProperties);
#    endif
}
#endif
#if defined(VK_KHR_video_encode_queue)
VkResult InstanceTable::GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *pQualityLevelInfo,
    VkVideoEncodeQualityLevelPropertiesKHR *pQualityLevelProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR fn =
        validateFunction("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",
                         this->vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR);
    return fn(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
#    else
    return this->vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo,
                                                                         pQualityLevelProperties);
#    endif
}
#endif
#if defined(VK_EXT_acquire_drm_display)
VkResult InstanceTable::AcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireDrmDisplayEXT fn = validateFunction("vkAcquireDrmDisplayEXT", this->vkAcquireDrmDisplayEXT);
    return fn(physicalDevice, drmFd, display);
#    else
    return this->vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
#    endif
}
#endif
#if defined(VK_EXT_acquire_drm_display)
VkResult InstanceTable::GetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId,
                                         VkDisplayKHR *display) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDrmDisplayEXT fn = validateFunction("vkGetDrmDisplayEXT", this->vkGetDrmDisplayEXT);
    return fn(physicalDevice, drmFd, connectorId, display);
#    else
    return this->vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
#    endif
}
#endif
#if defined(VK_NV_optical_flow)
VkResult InstanceTable::GetPhysicalDeviceOpticalFlowImageFormatsNV(
    VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV *pOpticalFlowImageFormatInfo,
    uint32_t *pFormatCount, VkOpticalFlowImageFormatPropertiesNV *pImageFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV fn = validateFunction(
        "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", this->vkGetPhysicalDeviceOpticalFlowImageFormatsNV);
    return fn(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
#    else
    return this->vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount,
                                                              pImageFormatProperties);
#    endif
}
#endif
#if defined(VK_KHR_cooperative_matrix)
VkResult InstanceTable::GetPhysicalDeviceCooperativeMatrixPropertiesKHR(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesKHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR", this->vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_NV_cooperative_matrix2)
VkResult InstanceTable::GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount,
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV fn =
        validateFunction("vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV",
                         this->vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice, pPropertyCount,
                                                                                    pProperties);
#    endif
}
#endif
#if defined(VK_NV_cooperative_vector)
VkResult InstanceTable::GetPhysicalDeviceCooperativeVectorPropertiesNV(
    VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeVectorPropertiesNV *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV fn = validateFunction(
        "vkGetPhysicalDeviceCooperativeVectorPropertiesNV", this->vkGetPhysicalDeviceCooperativeVectorPropertiesNV);
    return fn(physicalDevice, pPropertyCount, pProperties);
#    else
    return this->vkGetPhysicalDeviceCooperativeVectorPropertiesNV(physicalDevice, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void InstanceTable::GetPhysicalDeviceExternalTensorPropertiesARM(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalTensorInfoARM *pExternalTensorInfo,
    VkExternalTensorPropertiesARM *pExternalTensorProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalTensorPropertiesARM fn = validateFunction(
        "vkGetPhysicalDeviceExternalTensorPropertiesARM", this->vkGetPhysicalDeviceExternalTensorPropertiesARM);
    fn(physicalDevice, pExternalTensorInfo, pExternalTensorProperties);
#    else
    this->vkGetPhysicalDeviceExternalTensorPropertiesARM(physicalDevice, pExternalTensorInfo,
                                                         pExternalTensorProperties);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult InstanceTable::GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
    VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t *pQueueFamilyDataGraphPropertyCount,
    VkQueueFamilyDataGraphPropertiesARM *pQueueFamilyDataGraphProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM fn =
        validateFunction("vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM",
                         this->vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM);
    return fn(physicalDevice, queueFamilyIndex, pQueueFamilyDataGraphPropertyCount, pQueueFamilyDataGraphProperties);
#    else
    return this->vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(
        physicalDevice, queueFamilyIndex, pQueueFamilyDataGraphPropertyCount, pQueueFamilyDataGraphProperties);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
void InstanceTable::GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM *pQueueFamilyDataGraphProcessingEngineInfo,
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM *pQueueFamilyDataGraphProcessingEngineProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM fn =
        validateFunction("vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM",
                         this->vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM);
    fn(physicalDevice, pQueueFamilyDataGraphProcessingEngineInfo, pQueueFamilyDataGraphProcessingEngineProperties);
#    else
    this->vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(
        physicalDevice, pQueueFamilyDataGraphProcessingEngineInfo, pQueueFamilyDataGraphProcessingEngineProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice,
                                                  VkPhysicalDeviceFeatures2KHR *pFeatures) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFeatures2KHR fn =
        validateFunction("vkGetPhysicalDeviceFeatures2KHR", this->vkGetPhysicalDeviceFeatures2KHR);
    fn(physicalDevice, pFeatures);
#    else
    this->vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice,
                                                    VkPhysicalDeviceProperties2KHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceProperties2KHR fn =
        validateFunction("vkGetPhysicalDeviceProperties2KHR", this->vkGetPhysicalDeviceProperties2KHR);
    fn(physicalDevice, pProperties);
#    else
    this->vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format,
                                                          VkFormatProperties2KHR *pFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceFormatProperties2KHR fn =
        validateFunction("vkGetPhysicalDeviceFormatProperties2KHR", this->vkGetPhysicalDeviceFormatProperties2KHR);
    fn(physicalDevice, format, pFormatProperties);
#    else
    this->vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VkResult InstanceTable::GetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR *pImageFormatInfo,
    VkImageFormatProperties2KHR *pImageFormatProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceImageFormatProperties2KHR fn = validateFunction(
        "vkGetPhysicalDeviceImageFormatProperties2KHR", this->vkGetPhysicalDeviceImageFormatProperties2KHR);
    return fn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
#    else
    return this->vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2KHR *pQueueFamilyProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR fn = validateFunction(
        "vkGetPhysicalDeviceQueueFamilyProperties2KHR", this->vkGetPhysicalDeviceQueueFamilyProperties2KHR);
    fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
#    else
    this->vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount,
                                                       pQueueFamilyProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice,
                                                          VkPhysicalDeviceMemoryProperties2KHR *pMemoryProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceMemoryProperties2KHR fn =
        validateFunction("vkGetPhysicalDeviceMemoryProperties2KHR", this->vkGetPhysicalDeviceMemoryProperties2KHR);
    fn(physicalDevice, pMemoryProperties);
#    else
    this->vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
#    endif
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
void InstanceTable::GetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR *pFormatInfo,
    uint32_t *pPropertyCount, VkSparseImageFormatProperties2KHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR fn = validateFunction(
        "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", this->vkGetPhysicalDeviceSparseImageFormatProperties2KHR);
    fn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
#    else
    this->vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_external_memory_capabilities)
void InstanceTable::GetPhysicalDeviceExternalBufferPropertiesKHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR *pExternalBufferInfo,
    VkExternalBufferPropertiesKHR *pExternalBufferProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceExternalBufferPropertiesKHR", this->vkGetPhysicalDeviceExternalBufferPropertiesKHR);
    fn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
#    else
    this->vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo,
                                                         pExternalBufferProperties);
#    endif
}
#endif
#if defined(VK_KHR_external_semaphore_capabilities)
void InstanceTable::GetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR *pExternalSemaphoreInfo,
    VkExternalSemaphorePropertiesKHR *pExternalSemaphoreProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", this->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR);
    fn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
#    else
    this->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo,
                                                            pExternalSemaphoreProperties);
#    endif
}
#endif
#if defined(VK_KHR_external_fence_capabilities)
void InstanceTable::GetPhysicalDeviceExternalFencePropertiesKHR(
    VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR *pExternalFenceInfo,
    VkExternalFencePropertiesKHR *pExternalFenceProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR fn = validateFunction(
        "vkGetPhysicalDeviceExternalFencePropertiesKHR", this->vkGetPhysicalDeviceExternalFencePropertiesKHR);
    fn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
#    else
    this->vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
#    endif
}
#endif
#if defined(VK_KHR_device_group_creation)
VkResult InstanceTable::EnumeratePhysicalDeviceGroupsKHR(
    VkInstance instance, uint32_t *pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupPropertiesKHR *pPhysicalDeviceGroupProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEnumeratePhysicalDeviceGroupsKHR fn =
        validateFunction("vkEnumeratePhysicalDeviceGroupsKHR", this->vkEnumeratePhysicalDeviceGroupsKHR);
    return fn(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
#    else
    return this->vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount,
                                                    pPhysicalDeviceGroupProperties);
#    endif
}
#endif
#if defined(VK_EXT_calibrated_timestamps)
VkResult InstanceTable::GetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice,
                                                                     uint32_t *pTimeDomainCount,
                                                                     VkTimeDomainEXT *pTimeDomains) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT fn = validateFunction(
        "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", this->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT);
    return fn(physicalDevice, pTimeDomainCount, pTimeDomains);
#    else
    return this->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
#    endif
}
#endif
#if defined(VK_EXT_tooling_info)
VkResult InstanceTable::GetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount,
                                                           VkPhysicalDeviceToolPropertiesEXT *pToolProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPhysicalDeviceToolPropertiesEXT fn =
        validateFunction("vkGetPhysicalDeviceToolPropertiesEXT", this->vkGetPhysicalDeviceToolPropertiesEXT);
    return fn(physicalDevice, pToolCount, pToolProperties);
#    else
    return this->vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
#    endif
}
#endif

void DeviceTable::DestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDevice fn = validateFunction("vkDestroyDevice", this->vkDestroyDevice);
    fn(device, pAllocator);
#else
    this->vkDestroyDevice(device, pAllocator);
#endif
}
void DeviceTable::GetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceQueue fn = validateFunction("vkGetDeviceQueue", this->vkGetDeviceQueue);
    fn(device, queueFamilyIndex, queueIndex, pQueue);
#else
    this->vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
#endif
}
VkResult DeviceTable::QueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits,
                                  VkFence fence) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueSubmit fn = validateFunction("vkQueueSubmit", this->vkQueueSubmit);
    return fn(queue, submitCount, pSubmits, fence);
#else
    return this->vkQueueSubmit(queue, submitCount, pSubmits, fence);
#endif
}
VkResult DeviceTable::QueueWaitIdle(VkQueue queue) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueWaitIdle fn = validateFunction("vkQueueWaitIdle", this->vkQueueWaitIdle);
    return fn(queue);
#else
    return this->vkQueueWaitIdle(queue);
#endif
}
VkResult DeviceTable::DeviceWaitIdle(VkDevice device) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDeviceWaitIdle fn = validateFunction("vkDeviceWaitIdle", this->vkDeviceWaitIdle);
    return fn(device);
#else
    return this->vkDeviceWaitIdle(device);
#endif
}
VkResult DeviceTable::AllocateMemory(VkDevice device, const VkMemoryAllocateInfo *pAllocateInfo,
                                     const VkAllocationCallbacks *pAllocator, VkDeviceMemory *pMemory) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAllocateMemory fn = validateFunction("vkAllocateMemory", this->vkAllocateMemory);
    return fn(device, pAllocateInfo, pAllocator, pMemory);
#else
    return this->vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
#endif
}
void DeviceTable::FreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkFreeMemory fn = validateFunction("vkFreeMemory", this->vkFreeMemory);
    fn(device, memory, pAllocator);
#else
    this->vkFreeMemory(device, memory, pAllocator);
#endif
}
VkResult DeviceTable::MapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size,
                                VkMemoryMapFlags flags, void **ppData) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkMapMemory fn = validateFunction("vkMapMemory", this->vkMapMemory);
    return fn(device, memory, offset, size, flags, ppData);
#else
    return this->vkMapMemory(device, memory, offset, size, flags, ppData);
#endif
}
void DeviceTable::UnmapMemory(VkDevice device, VkDeviceMemory memory) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUnmapMemory fn = validateFunction("vkUnmapMemory", this->vkUnmapMemory);
    fn(device, memory);
#else
    this->vkUnmapMemory(device, memory);
#endif
}
VkResult DeviceTable::FlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount,
                                              const VkMappedMemoryRange *pMemoryRanges) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkFlushMappedMemoryRanges fn =
        validateFunction("vkFlushMappedMemoryRanges", this->vkFlushMappedMemoryRanges);
    return fn(device, memoryRangeCount, pMemoryRanges);
#else
    return this->vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
#endif
}
VkResult DeviceTable::InvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount,
                                                   const VkMappedMemoryRange *pMemoryRanges) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkInvalidateMappedMemoryRanges fn =
        validateFunction("vkInvalidateMappedMemoryRanges", this->vkInvalidateMappedMemoryRanges);
    return fn(device, memoryRangeCount, pMemoryRanges);
#else
    return this->vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
#endif
}
void DeviceTable::GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory,
                                            VkDeviceSize *pCommittedMemoryInBytes) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceMemoryCommitment fn =
        validateFunction("vkGetDeviceMemoryCommitment", this->vkGetDeviceMemoryCommitment);
    fn(device, memory, pCommittedMemoryInBytes);
#else
    this->vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
#endif
}
void DeviceTable::GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer,
                                              VkMemoryRequirements *pMemoryRequirements) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferMemoryRequirements fn =
        validateFunction("vkGetBufferMemoryRequirements", this->vkGetBufferMemoryRequirements);
    fn(device, buffer, pMemoryRequirements);
#else
    this->vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
#endif
}
VkResult DeviceTable::BindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory,
                                       VkDeviceSize memoryOffset) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindBufferMemory fn = validateFunction("vkBindBufferMemory", this->vkBindBufferMemory);
    return fn(device, buffer, memory, memoryOffset);
#else
    return this->vkBindBufferMemory(device, buffer, memory, memoryOffset);
#endif
}
void DeviceTable::GetImageMemoryRequirements(VkDevice device, VkImage image,
                                             VkMemoryRequirements *pMemoryRequirements) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageMemoryRequirements fn =
        validateFunction("vkGetImageMemoryRequirements", this->vkGetImageMemoryRequirements);
    fn(device, image, pMemoryRequirements);
#else
    this->vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
#endif
}
VkResult DeviceTable::BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory,
                                      VkDeviceSize memoryOffset) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindImageMemory fn = validateFunction("vkBindImageMemory", this->vkBindImageMemory);
    return fn(device, image, memory, memoryOffset);
#else
    return this->vkBindImageMemory(device, image, memory, memoryOffset);
#endif
}
void DeviceTable::GetImageSparseMemoryRequirements(VkDevice device, VkImage image,
                                                   uint32_t *pSparseMemoryRequirementCount,
                                                   VkSparseImageMemoryRequirements *pSparseMemoryRequirements) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSparseMemoryRequirements fn =
        validateFunction("vkGetImageSparseMemoryRequirements", this->vkGetImageSparseMemoryRequirements);
    fn(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#else
    this->vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#endif
}
VkResult DeviceTable::QueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo,
                                      VkFence fence) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueBindSparse fn = validateFunction("vkQueueBindSparse", this->vkQueueBindSparse);
    return fn(queue, bindInfoCount, pBindInfo, fence);
#else
    return this->vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
#endif
}
VkResult DeviceTable::CreateFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator, VkFence *pFence) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateFence fn = validateFunction("vkCreateFence", this->vkCreateFence);
    return fn(device, pCreateInfo, pAllocator, pFence);
#else
    return this->vkCreateFence(device, pCreateInfo, pAllocator, pFence);
#endif
}
void DeviceTable::DestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyFence fn = validateFunction("vkDestroyFence", this->vkDestroyFence);
    fn(device, fence, pAllocator);
#else
    this->vkDestroyFence(device, fence, pAllocator);
#endif
}
VkResult DeviceTable::ResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetFences fn = validateFunction("vkResetFences", this->vkResetFences);
    return fn(device, fenceCount, pFences);
#else
    return this->vkResetFences(device, fenceCount, pFences);
#endif
}
VkResult DeviceTable::GetFenceStatus(VkDevice device, VkFence fence) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFenceStatus fn = validateFunction("vkGetFenceStatus", this->vkGetFenceStatus);
    return fn(device, fence);
#else
    return this->vkGetFenceStatus(device, fence);
#endif
}
VkResult DeviceTable::WaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll,
                                    uint64_t timeout) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWaitForFences fn = validateFunction("vkWaitForFences", this->vkWaitForFences);
    return fn(device, fenceCount, pFences, waitAll, timeout);
#else
    return this->vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
#endif
}
VkResult DeviceTable::CreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo *pCreateInfo,
                                      const VkAllocationCallbacks *pAllocator, VkSemaphore *pSemaphore) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSemaphore fn = validateFunction("vkCreateSemaphore", this->vkCreateSemaphore);
    return fn(device, pCreateInfo, pAllocator, pSemaphore);
#else
    return this->vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
#endif
}
void DeviceTable::DestroySemaphore(VkDevice device, VkSemaphore semaphore,
                                   const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySemaphore fn = validateFunction("vkDestroySemaphore", this->vkDestroySemaphore);
    fn(device, semaphore, pAllocator);
#else
    this->vkDestroySemaphore(device, semaphore, pAllocator);
#endif
}
VkResult DeviceTable::CreateEvent(VkDevice device, const VkEventCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator, VkEvent *pEvent) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateEvent fn = validateFunction("vkCreateEvent", this->vkCreateEvent);
    return fn(device, pCreateInfo, pAllocator, pEvent);
#else
    return this->vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
#endif
}
void DeviceTable::DestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyEvent fn = validateFunction("vkDestroyEvent", this->vkDestroyEvent);
    fn(device, event, pAllocator);
#else
    this->vkDestroyEvent(device, event, pAllocator);
#endif
}
VkResult DeviceTable::GetEventStatus(VkDevice device, VkEvent event) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetEventStatus fn = validateFunction("vkGetEventStatus", this->vkGetEventStatus);
    return fn(device, event);
#else
    return this->vkGetEventStatus(device, event);
#endif
}
VkResult DeviceTable::SetEvent(VkDevice device, VkEvent event) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetEvent fn = validateFunction("vkSetEvent", this->vkSetEvent);
    return fn(device, event);
#else
    return this->vkSetEvent(device, event);
#endif
}
VkResult DeviceTable::ResetEvent(VkDevice device, VkEvent event) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetEvent fn = validateFunction("vkResetEvent", this->vkResetEvent);
    return fn(device, event);
#else
    return this->vkResetEvent(device, event);
#endif
}
VkResult DeviceTable::CreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo,
                                      const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateQueryPool fn = validateFunction("vkCreateQueryPool", this->vkCreateQueryPool);
    return fn(device, pCreateInfo, pAllocator, pQueryPool);
#else
    return this->vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
#endif
}
void DeviceTable::DestroyQueryPool(VkDevice device, VkQueryPool queryPool,
                                   const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyQueryPool fn = validateFunction("vkDestroyQueryPool", this->vkDestroyQueryPool);
    fn(device, queryPool, pAllocator);
#else
    this->vkDestroyQueryPool(device, queryPool, pAllocator);
#endif
}
VkResult DeviceTable::GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery,
                                          uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride,
                                          VkQueryResultFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetQueryPoolResults fn = validateFunction("vkGetQueryPoolResults", this->vkGetQueryPoolResults);
    return fn(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
#else
    return this->vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
#endif
}
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::ResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetQueryPool fn = validateFunction("vkResetQueryPool", this->vkResetQueryPool);
    fn(device, queryPool, firstQuery, queryCount);
#    else
    this->vkResetQueryPool(device, queryPool, firstQuery, queryCount);
#    endif
}
#endif
VkResult DeviceTable::CreateBuffer(VkDevice device, const VkBufferCreateInfo *pCreateInfo,
                                   const VkAllocationCallbacks *pAllocator, VkBuffer *pBuffer) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateBuffer fn = validateFunction("vkCreateBuffer", this->vkCreateBuffer);
    return fn(device, pCreateInfo, pAllocator, pBuffer);
#else
    return this->vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
#endif
}
void DeviceTable::DestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyBuffer fn = validateFunction("vkDestroyBuffer", this->vkDestroyBuffer);
    fn(device, buffer, pAllocator);
#else
    this->vkDestroyBuffer(device, buffer, pAllocator);
#endif
}
VkResult DeviceTable::CreateBufferView(VkDevice device, const VkBufferViewCreateInfo *pCreateInfo,
                                       const VkAllocationCallbacks *pAllocator, VkBufferView *pView) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateBufferView fn = validateFunction("vkCreateBufferView", this->vkCreateBufferView);
    return fn(device, pCreateInfo, pAllocator, pView);
#else
    return this->vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
#endif
}
void DeviceTable::DestroyBufferView(VkDevice device, VkBufferView bufferView,
                                    const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyBufferView fn = validateFunction("vkDestroyBufferView", this->vkDestroyBufferView);
    fn(device, bufferView, pAllocator);
#else
    this->vkDestroyBufferView(device, bufferView, pAllocator);
#endif
}
VkResult DeviceTable::CreateImage(VkDevice device, const VkImageCreateInfo *pCreateInfo,
                                  const VkAllocationCallbacks *pAllocator, VkImage *pImage) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateImage fn = validateFunction("vkCreateImage", this->vkCreateImage);
    return fn(device, pCreateInfo, pAllocator, pImage);
#else
    return this->vkCreateImage(device, pCreateInfo, pAllocator, pImage);
#endif
}
void DeviceTable::DestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyImage fn = validateFunction("vkDestroyImage", this->vkDestroyImage);
    fn(device, image, pAllocator);
#else
    this->vkDestroyImage(device, image, pAllocator);
#endif
}
void DeviceTable::GetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource *pSubresource,
                                            VkSubresourceLayout *pLayout) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSubresourceLayout fn =
        validateFunction("vkGetImageSubresourceLayout", this->vkGetImageSubresourceLayout);
    fn(device, image, pSubresource, pLayout);
#else
    this->vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
#endif
}
VkResult DeviceTable::CreateImageView(VkDevice device, const VkImageViewCreateInfo *pCreateInfo,
                                      const VkAllocationCallbacks *pAllocator, VkImageView *pView) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateImageView fn = validateFunction("vkCreateImageView", this->vkCreateImageView);
    return fn(device, pCreateInfo, pAllocator, pView);
#else
    return this->vkCreateImageView(device, pCreateInfo, pAllocator, pView);
#endif
}
void DeviceTable::DestroyImageView(VkDevice device, VkImageView imageView,
                                   const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyImageView fn = validateFunction("vkDestroyImageView", this->vkDestroyImageView);
    fn(device, imageView, pAllocator);
#else
    this->vkDestroyImageView(device, imageView, pAllocator);
#endif
}
VkResult DeviceTable::CreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo,
                                         const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateShaderModule fn = validateFunction("vkCreateShaderModule", this->vkCreateShaderModule);
    return fn(device, pCreateInfo, pAllocator, pShaderModule);
#else
    return this->vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
#endif
}
void DeviceTable::DestroyShaderModule(VkDevice device, VkShaderModule shaderModule,
                                      const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyShaderModule fn = validateFunction("vkDestroyShaderModule", this->vkDestroyShaderModule);
    fn(device, shaderModule, pAllocator);
#else
    this->vkDestroyShaderModule(device, shaderModule, pAllocator);
#endif
}
VkResult DeviceTable::CreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo,
                                          const VkAllocationCallbacks *pAllocator,
                                          VkPipelineCache *pPipelineCache) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreatePipelineCache fn = validateFunction("vkCreatePipelineCache", this->vkCreatePipelineCache);
    return fn(device, pCreateInfo, pAllocator, pPipelineCache);
#else
    return this->vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
#endif
}
void DeviceTable::DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache,
                                       const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPipelineCache fn = validateFunction("vkDestroyPipelineCache", this->vkDestroyPipelineCache);
    fn(device, pipelineCache, pAllocator);
#else
    this->vkDestroyPipelineCache(device, pipelineCache, pAllocator);
#endif
}
VkResult DeviceTable::GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize,
                                           void *pData) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineCacheData fn = validateFunction("vkGetPipelineCacheData", this->vkGetPipelineCacheData);
    return fn(device, pipelineCache, pDataSize, pData);
#else
    return this->vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
#endif
}
VkResult DeviceTable::MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount,
                                          const VkPipelineCache *pSrcCaches) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkMergePipelineCaches fn = validateFunction("vkMergePipelineCaches", this->vkMergePipelineCaches);
    return fn(device, dstCache, srcCacheCount, pSrcCaches);
#else
    return this->vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
#endif
}
#if defined(VK_KHR_pipeline_binary)
VkResult DeviceTable::CreatePipelineBinariesKHR(VkDevice device, const VkPipelineBinaryCreateInfoKHR *pCreateInfo,
                                                const VkAllocationCallbacks *pAllocator,
                                                VkPipelineBinaryHandlesInfoKHR *pBinaries) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreatePipelineBinariesKHR fn =
        validateFunction("vkCreatePipelineBinariesKHR", this->vkCreatePipelineBinariesKHR);
    return fn(device, pCreateInfo, pAllocator, pBinaries);
#    else
    return this->vkCreatePipelineBinariesKHR(device, pCreateInfo, pAllocator, pBinaries);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_binary)
void DeviceTable::DestroyPipelineBinaryKHR(VkDevice device, VkPipelineBinaryKHR pipelineBinary,
                                           const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPipelineBinaryKHR fn =
        validateFunction("vkDestroyPipelineBinaryKHR", this->vkDestroyPipelineBinaryKHR);
    fn(device, pipelineBinary, pAllocator);
#    else
    this->vkDestroyPipelineBinaryKHR(device, pipelineBinary, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_binary)
VkResult DeviceTable::GetPipelineKeyKHR(VkDevice device, const VkPipelineCreateInfoKHR *pPipelineCreateInfo,
                                        VkPipelineBinaryKeyKHR *pPipelineKey) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineKeyKHR fn = validateFunction("vkGetPipelineKeyKHR", this->vkGetPipelineKeyKHR);
    return fn(device, pPipelineCreateInfo, pPipelineKey);
#    else
    return this->vkGetPipelineKeyKHR(device, pPipelineCreateInfo, pPipelineKey);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_binary)
VkResult DeviceTable::GetPipelineBinaryDataKHR(VkDevice device, const VkPipelineBinaryDataInfoKHR *pInfo,
                                               VkPipelineBinaryKeyKHR *pPipelineBinaryKey,
                                               size_t *pPipelineBinaryDataSize, void *pPipelineBinaryData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineBinaryDataKHR fn =
        validateFunction("vkGetPipelineBinaryDataKHR", this->vkGetPipelineBinaryDataKHR);
    return fn(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize, pPipelineBinaryData);
#    else
    return this->vkGetPipelineBinaryDataKHR(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize,
                                            pPipelineBinaryData);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_binary)
VkResult DeviceTable::ReleaseCapturedPipelineDataKHR(VkDevice device, const VkReleaseCapturedPipelineDataInfoKHR *pInfo,
                                                     const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseCapturedPipelineDataKHR fn =
        validateFunction("vkReleaseCapturedPipelineDataKHR", this->vkReleaseCapturedPipelineDataKHR);
    return fn(device, pInfo, pAllocator);
#    else
    return this->vkReleaseCapturedPipelineDataKHR(device, pInfo, pAllocator);
#    endif
}
#endif
VkResult DeviceTable::CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
                                              const VkGraphicsPipelineCreateInfo *pCreateInfos,
                                              const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateGraphicsPipelines fn =
        validateFunction("vkCreateGraphicsPipelines", this->vkCreateGraphicsPipelines);
    return fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#else
    return this->vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                           pPipelines);
#endif
}
VkResult DeviceTable::CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
                                             const VkComputePipelineCreateInfo *pCreateInfos,
                                             const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateComputePipelines fn =
        validateFunction("vkCreateComputePipelines", this->vkCreateComputePipelines);
    return fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#else
    return this->vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#endif
}
#if (defined(VK_HUAWEI_subpass_shading) && VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION >= 2)
VkResult DeviceTable::GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass,
                                                                    VkExtent2D *pMaxWorkgroupSize) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI fn = validateFunction(
        "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", this->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI);
    return fn(device, renderpass, pMaxWorkgroupSize);
#    else
    return this->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
#    endif
}
#endif
void DeviceTable::DestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPipeline fn = validateFunction("vkDestroyPipeline", this->vkDestroyPipeline);
    fn(device, pipeline, pAllocator);
#else
    this->vkDestroyPipeline(device, pipeline, pAllocator);
#endif
}
VkResult DeviceTable::CreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo,
                                           const VkAllocationCallbacks *pAllocator,
                                           VkPipelineLayout *pPipelineLayout) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreatePipelineLayout fn = validateFunction("vkCreatePipelineLayout", this->vkCreatePipelineLayout);
    return fn(device, pCreateInfo, pAllocator, pPipelineLayout);
#else
    return this->vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
#endif
}
void DeviceTable::DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout,
                                        const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPipelineLayout fn = validateFunction("vkDestroyPipelineLayout", this->vkDestroyPipelineLayout);
    fn(device, pipelineLayout, pAllocator);
#else
    this->vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
#endif
}
VkResult DeviceTable::CreateSampler(VkDevice device, const VkSamplerCreateInfo *pCreateInfo,
                                    const VkAllocationCallbacks *pAllocator, VkSampler *pSampler) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSampler fn = validateFunction("vkCreateSampler", this->vkCreateSampler);
    return fn(device, pCreateInfo, pAllocator, pSampler);
#else
    return this->vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
#endif
}
void DeviceTable::DestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySampler fn = validateFunction("vkDestroySampler", this->vkDestroySampler);
    fn(device, sampler, pAllocator);
#else
    this->vkDestroySampler(device, sampler, pAllocator);
#endif
}
VkResult DeviceTable::CreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                const VkAllocationCallbacks *pAllocator,
                                                VkDescriptorSetLayout *pSetLayout) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDescriptorSetLayout fn =
        validateFunction("vkCreateDescriptorSetLayout", this->vkCreateDescriptorSetLayout);
    return fn(device, pCreateInfo, pAllocator, pSetLayout);
#else
    return this->vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
#endif
}
void DeviceTable::DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout,
                                             const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDescriptorSetLayout fn =
        validateFunction("vkDestroyDescriptorSetLayout", this->vkDestroyDescriptorSetLayout);
    fn(device, descriptorSetLayout, pAllocator);
#else
    this->vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
#endif
}
VkResult DeviceTable::CreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo *pCreateInfo,
                                           const VkAllocationCallbacks *pAllocator,
                                           VkDescriptorPool *pDescriptorPool) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDescriptorPool fn = validateFunction("vkCreateDescriptorPool", this->vkCreateDescriptorPool);
    return fn(device, pCreateInfo, pAllocator, pDescriptorPool);
#else
    return this->vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
#endif
}
void DeviceTable::DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool,
                                        const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDescriptorPool fn = validateFunction("vkDestroyDescriptorPool", this->vkDestroyDescriptorPool);
    fn(device, descriptorPool, pAllocator);
#else
    this->vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
#endif
}
VkResult DeviceTable::ResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool,
                                          VkDescriptorPoolResetFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetDescriptorPool fn = validateFunction("vkResetDescriptorPool", this->vkResetDescriptorPool);
    return fn(device, descriptorPool, flags);
#else
    return this->vkResetDescriptorPool(device, descriptorPool, flags);
#endif
}
VkResult DeviceTable::AllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo,
                                             VkDescriptorSet *pDescriptorSets) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAllocateDescriptorSets fn =
        validateFunction("vkAllocateDescriptorSets", this->vkAllocateDescriptorSets);
    return fn(device, pAllocateInfo, pDescriptorSets);
#else
    return this->vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
#endif
}
VkResult DeviceTable::FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount,
                                         const VkDescriptorSet *pDescriptorSets) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkFreeDescriptorSets fn = validateFunction("vkFreeDescriptorSets", this->vkFreeDescriptorSets);
    return fn(device, descriptorPool, descriptorSetCount, pDescriptorSets);
#else
    return this->vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
#endif
}
void DeviceTable::UpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount,
                                       const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount,
                                       const VkCopyDescriptorSet *pDescriptorCopies) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateDescriptorSets fn = validateFunction("vkUpdateDescriptorSets", this->vkUpdateDescriptorSets);
    fn(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
#else
    this->vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount,
                                 pDescriptorCopies);
#endif
}
VkResult DeviceTable::CreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo *pCreateInfo,
                                        const VkAllocationCallbacks *pAllocator, VkFramebuffer *pFramebuffer) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateFramebuffer fn = validateFunction("vkCreateFramebuffer", this->vkCreateFramebuffer);
    return fn(device, pCreateInfo, pAllocator, pFramebuffer);
#else
    return this->vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
#endif
}
void DeviceTable::DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer,
                                     const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyFramebuffer fn = validateFunction("vkDestroyFramebuffer", this->vkDestroyFramebuffer);
    fn(device, framebuffer, pAllocator);
#else
    this->vkDestroyFramebuffer(device, framebuffer, pAllocator);
#endif
}
VkResult DeviceTable::CreateRenderPass(VkDevice device, const VkRenderPassCreateInfo *pCreateInfo,
                                       const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateRenderPass fn = validateFunction("vkCreateRenderPass", this->vkCreateRenderPass);
    return fn(device, pCreateInfo, pAllocator, pRenderPass);
#else
    return this->vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
#endif
}
void DeviceTable::DestroyRenderPass(VkDevice device, VkRenderPass renderPass,
                                    const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyRenderPass fn = validateFunction("vkDestroyRenderPass", this->vkDestroyRenderPass);
    fn(device, renderPass, pAllocator);
#else
    this->vkDestroyRenderPass(device, renderPass, pAllocator);
#endif
}
void DeviceTable::GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRenderAreaGranularity fn =
        validateFunction("vkGetRenderAreaGranularity", this->vkGetRenderAreaGranularity);
    fn(device, renderPass, pGranularity);
#else
    this->vkGetRenderAreaGranularity(device, renderPass, pGranularity);
#endif
}
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::GetRenderingAreaGranularity(VkDevice device, const VkRenderingAreaInfo *pRenderingAreaInfo,
                                              VkExtent2D *pGranularity) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRenderingAreaGranularity fn =
        validateFunction("vkGetRenderingAreaGranularity", this->vkGetRenderingAreaGranularity);
    fn(device, pRenderingAreaInfo, pGranularity);
#    else
    this->vkGetRenderingAreaGranularity(device, pRenderingAreaInfo, pGranularity);
#    endif
}
#endif
VkResult DeviceTable::CreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo *pCreateInfo,
                                        const VkAllocationCallbacks *pAllocator, VkCommandPool *pCommandPool) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateCommandPool fn = validateFunction("vkCreateCommandPool", this->vkCreateCommandPool);
    return fn(device, pCreateInfo, pAllocator, pCommandPool);
#else
    return this->vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
#endif
}
void DeviceTable::DestroyCommandPool(VkDevice device, VkCommandPool commandPool,
                                     const VkAllocationCallbacks *pAllocator) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyCommandPool fn = validateFunction("vkDestroyCommandPool", this->vkDestroyCommandPool);
    fn(device, commandPool, pAllocator);
#else
    this->vkDestroyCommandPool(device, commandPool, pAllocator);
#endif
}
VkResult DeviceTable::ResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetCommandPool fn = validateFunction("vkResetCommandPool", this->vkResetCommandPool);
    return fn(device, commandPool, flags);
#else
    return this->vkResetCommandPool(device, commandPool, flags);
#endif
}
VkResult DeviceTable::AllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo,
                                             VkCommandBuffer *pCommandBuffers) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAllocateCommandBuffers fn =
        validateFunction("vkAllocateCommandBuffers", this->vkAllocateCommandBuffers);
    return fn(device, pAllocateInfo, pCommandBuffers);
#else
    return this->vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
#endif
}
void DeviceTable::FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount,
                                     const VkCommandBuffer *pCommandBuffers) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkFreeCommandBuffers fn = validateFunction("vkFreeCommandBuffers", this->vkFreeCommandBuffers);
    fn(device, commandPool, commandBufferCount, pCommandBuffers);
#else
    this->vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
#endif
}
VkResult DeviceTable::BeginCommandBuffer(VkCommandBuffer commandBuffer,
                                         const VkCommandBufferBeginInfo *pBeginInfo) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBeginCommandBuffer fn = validateFunction("vkBeginCommandBuffer", this->vkBeginCommandBuffer);
    return fn(commandBuffer, pBeginInfo);
#else
    return this->vkBeginCommandBuffer(commandBuffer, pBeginInfo);
#endif
}
VkResult DeviceTable::EndCommandBuffer(VkCommandBuffer commandBuffer) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkEndCommandBuffer fn = validateFunction("vkEndCommandBuffer", this->vkEndCommandBuffer);
    return fn(commandBuffer);
#else
    return this->vkEndCommandBuffer(commandBuffer);
#endif
}
VkResult DeviceTable::ResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetCommandBuffer fn = validateFunction("vkResetCommandBuffer", this->vkResetCommandBuffer);
    return fn(commandBuffer, flags);
#else
    return this->vkResetCommandBuffer(commandBuffer, flags);
#endif
}
void DeviceTable::CmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                  VkPipeline pipeline) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindPipeline fn = validateFunction("vkCmdBindPipeline", this->vkCmdBindPipeline);
    fn(commandBuffer, pipelineBindPoint, pipeline);
#else
    this->vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
#endif
}
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
void DeviceTable::CmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer,
                                                        VkImageAspectFlags aspectMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT fn =
        validateFunction("vkCmdSetAttachmentFeedbackLoopEnableEXT", this->vkCmdSetAttachmentFeedbackLoopEnableEXT);
    fn(commandBuffer, aspectMask);
#    else
    this->vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
#    endif
}
#endif
void DeviceTable::CmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount,
                                 const VkViewport *pViewports) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewport fn = validateFunction("vkCmdSetViewport", this->vkCmdSetViewport);
    fn(commandBuffer, firstViewport, viewportCount, pViewports);
#else
    this->vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
#endif
}
void DeviceTable::CmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount,
                                const VkRect2D *pScissors) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetScissor fn = validateFunction("vkCmdSetScissor", this->vkCmdSetScissor);
    fn(commandBuffer, firstScissor, scissorCount, pScissors);
#else
    this->vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
#endif
}
void DeviceTable::CmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineWidth fn = validateFunction("vkCmdSetLineWidth", this->vkCmdSetLineWidth);
    fn(commandBuffer, lineWidth);
#else
    this->vkCmdSetLineWidth(commandBuffer, lineWidth);
#endif
}
void DeviceTable::CmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp,
                                  float depthBiasSlopeFactor) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBias fn = validateFunction("vkCmdSetDepthBias", this->vkCmdSetDepthBias);
    fn(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
#else
    this->vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
#endif
}
void DeviceTable::CmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetBlendConstants fn = validateFunction("vkCmdSetBlendConstants", this->vkCmdSetBlendConstants);
    fn(commandBuffer, blendConstants);
#else
    this->vkCmdSetBlendConstants(commandBuffer, blendConstants);
#endif
}
void DeviceTable::CmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBounds fn = validateFunction("vkCmdSetDepthBounds", this->vkCmdSetDepthBounds);
    fn(commandBuffer, minDepthBounds, maxDepthBounds);
#else
    this->vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
#endif
}
void DeviceTable::CmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask,
                                           uint32_t compareMask) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilCompareMask fn =
        validateFunction("vkCmdSetStencilCompareMask", this->vkCmdSetStencilCompareMask);
    fn(commandBuffer, faceMask, compareMask);
#else
    this->vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
#endif
}
void DeviceTable::CmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask,
                                         uint32_t writeMask) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilWriteMask fn =
        validateFunction("vkCmdSetStencilWriteMask", this->vkCmdSetStencilWriteMask);
    fn(commandBuffer, faceMask, writeMask);
#else
    this->vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
#endif
}
void DeviceTable::CmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask,
                                         uint32_t reference) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilReference fn =
        validateFunction("vkCmdSetStencilReference", this->vkCmdSetStencilReference);
    fn(commandBuffer, faceMask, reference);
#else
    this->vkCmdSetStencilReference(commandBuffer, faceMask, reference);
#endif
}
void DeviceTable::CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                        VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount,
                                        const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount,
                                        const uint32_t *pDynamicOffsets) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorSets fn = validateFunction("vkCmdBindDescriptorSets", this->vkCmdBindDescriptorSets);
    fn(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount,
       pDynamicOffsets);
#else
    this->vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount,
                                  pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
#endif
}
void DeviceTable::CmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                     VkIndexType indexType) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindIndexBuffer fn = validateFunction("vkCmdBindIndexBuffer", this->vkCmdBindIndexBuffer);
    fn(commandBuffer, buffer, offset, indexType);
#else
    this->vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
#endif
}
void DeviceTable::CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,
                                       const VkBuffer *pBuffers, const VkDeviceSize *pOffsets) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindVertexBuffers fn = validateFunction("vkCmdBindVertexBuffers", this->vkCmdBindVertexBuffers);
    fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
#else
    this->vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
#endif
}
void DeviceTable::CmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount,
                          uint32_t firstVertex, uint32_t firstInstance) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDraw fn = validateFunction("vkCmdDraw", this->vkCmdDraw);
    fn(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
#else
    this->vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
#endif
}
void DeviceTable::CmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount,
                                 uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndexed fn = validateFunction("vkCmdDrawIndexed", this->vkCmdDrawIndexed);
    fn(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
#else
    this->vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
#endif
}
#if defined(VK_EXT_multi_draw)
void DeviceTable::CmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount,
                                  const VkMultiDrawInfoEXT *pVertexInfo, uint32_t instanceCount, uint32_t firstInstance,
                                  uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMultiEXT fn = validateFunction("vkCmdDrawMultiEXT", this->vkCmdDrawMultiEXT);
    fn(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
#    else
    this->vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
#    endif
}
#endif
#if defined(VK_EXT_multi_draw)
void DeviceTable::CmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount,
                                         const VkMultiDrawIndexedInfoEXT *pIndexInfo, uint32_t instanceCount,
                                         uint32_t firstInstance, uint32_t stride, const int32_t *pVertexOffset) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMultiIndexedEXT fn =
        validateFunction("vkCmdDrawMultiIndexedEXT", this->vkCmdDrawMultiIndexedEXT);
    fn(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
#    else
    this->vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride,
                                   pVertexOffset);
#    endif
}
#endif
void DeviceTable::CmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                  uint32_t drawCount, uint32_t stride) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndirect fn = validateFunction("vkCmdDrawIndirect", this->vkCmdDrawIndirect);
    fn(commandBuffer, buffer, offset, drawCount, stride);
#else
    this->vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
#endif
}
void DeviceTable::CmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                         uint32_t drawCount, uint32_t stride) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndexedIndirect fn =
        validateFunction("vkCmdDrawIndexedIndirect", this->vkCmdDrawIndexedIndirect);
    fn(commandBuffer, buffer, offset, drawCount, stride);
#else
    this->vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
#endif
}
void DeviceTable::CmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
                              uint32_t groupCountZ) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatch fn = validateFunction("vkCmdDispatch", this->vkCmdDispatch);
    fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
#else
    this->vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
#endif
}
void DeviceTable::CmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchIndirect fn = validateFunction("vkCmdDispatchIndirect", this->vkCmdDispatchIndirect);
    fn(commandBuffer, buffer, offset);
#else
    this->vkCmdDispatchIndirect(commandBuffer, buffer, offset);
#endif
}
#if (defined(VK_HUAWEI_subpass_shading) && VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION >= 2)
void DeviceTable::CmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSubpassShadingHUAWEI fn =
        validateFunction("vkCmdSubpassShadingHUAWEI", this->vkCmdSubpassShadingHUAWEI);
    fn(commandBuffer);
#    else
    this->vkCmdSubpassShadingHUAWEI(commandBuffer);
#    endif
}
#endif
#if defined(VK_HUAWEI_cluster_culling_shader)
void DeviceTable::CmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
                                       uint32_t groupCountZ) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawClusterHUAWEI fn = validateFunction("vkCmdDrawClusterHUAWEI", this->vkCmdDrawClusterHUAWEI);
    fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
#    else
    this->vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
#    endif
}
#endif
#if defined(VK_HUAWEI_cluster_culling_shader)
void DeviceTable::CmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer,
                                               VkDeviceSize offset) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawClusterIndirectHUAWEI fn =
        validateFunction("vkCmdDrawClusterIndirectHUAWEI", this->vkCmdDrawClusterIndirectHUAWEI);
    fn(commandBuffer, buffer, offset);
#    else
    this->vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands_compute)
void DeviceTable::CmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer,
                                                    VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdUpdatePipelineIndirectBufferNV fn =
        validateFunction("vkCmdUpdatePipelineIndirectBufferNV", this->vkCmdUpdatePipelineIndirectBufferNV);
    fn(commandBuffer, pipelineBindPoint, pipeline);
#    else
    this->vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
#    endif
}
#endif
void DeviceTable::CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer,
                                uint32_t regionCount, const VkBufferCopy *pRegions) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBuffer fn = validateFunction("vkCmdCopyBuffer", this->vkCmdCopyBuffer);
    fn(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
#else
    this->vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
#endif
}
void DeviceTable::CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout,
                               VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,
                               const VkImageCopy *pRegions) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImage fn = validateFunction("vkCmdCopyImage", this->vkCmdCopyImage);
    fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
#else
    this->vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
#endif
}
void DeviceTable::CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout,
                               VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,
                               const VkImageBlit *pRegions, VkFilter filter) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBlitImage fn = validateFunction("vkCmdBlitImage", this->vkCmdBlitImage);
    fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
#else
    this->vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions,
                         filter);
#endif
}
void DeviceTable::CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage,
                                       VkImageLayout dstImageLayout, uint32_t regionCount,
                                       const VkBufferImageCopy *pRegions) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBufferToImage fn = validateFunction("vkCmdCopyBufferToImage", this->vkCmdCopyBufferToImage);
    fn(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
#else
    this->vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
#endif
}
void DeviceTable::CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout,
                                       VkBuffer dstBuffer, uint32_t regionCount,
                                       const VkBufferImageCopy *pRegions) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImageToBuffer fn = validateFunction("vkCmdCopyImageToBuffer", this->vkCmdCopyImageToBuffer);
    fn(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
#else
    this->vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
#endif
}
#if defined(VK_NV_copy_memory_indirect)
void DeviceTable::CmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress,
                                          uint32_t copyCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMemoryIndirectNV fn =
        validateFunction("vkCmdCopyMemoryIndirectNV", this->vkCmdCopyMemoryIndirectNV);
    fn(commandBuffer, copyBufferAddress, copyCount, stride);
#    else
    this->vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
#    endif
}
#endif
#if defined(VK_NV_copy_memory_indirect)
void DeviceTable::CmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress,
                                                 uint32_t copyCount, uint32_t stride, VkImage dstImage,
                                                 VkImageLayout dstImageLayout,
                                                 const VkImageSubresourceLayers *pImageSubresources) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMemoryToImageIndirectNV fn =
        validateFunction("vkCmdCopyMemoryToImageIndirectNV", this->vkCmdCopyMemoryToImageIndirectNV);
    fn(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
#    else
    this->vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage,
                                           dstImageLayout, pImageSubresources);
#    endif
}
#endif
void DeviceTable::CmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset,
                                  VkDeviceSize dataSize, const void *pData) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdUpdateBuffer fn = validateFunction("vkCmdUpdateBuffer", this->vkCmdUpdateBuffer);
    fn(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
#else
    this->vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
#endif
}
void DeviceTable::CmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset,
                                VkDeviceSize size, uint32_t data) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdFillBuffer fn = validateFunction("vkCmdFillBuffer", this->vkCmdFillBuffer);
    fn(commandBuffer, dstBuffer, dstOffset, size, data);
#else
    this->vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
#endif
}
void DeviceTable::CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout,
                                     const VkClearColorValue *pColor, uint32_t rangeCount,
                                     const VkImageSubresourceRange *pRanges) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdClearColorImage fn = validateFunction("vkCmdClearColorImage", this->vkCmdClearColorImage);
    fn(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
#else
    this->vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
#endif
}
void DeviceTable::CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout,
                                            const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount,
                                            const VkImageSubresourceRange *pRanges) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdClearDepthStencilImage fn =
        validateFunction("vkCmdClearDepthStencilImage", this->vkCmdClearDepthStencilImage);
    fn(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
#else
    this->vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
#endif
}
void DeviceTable::CmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount,
                                      const VkClearAttachment *pAttachments, uint32_t rectCount,
                                      const VkClearRect *pRects) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdClearAttachments fn = validateFunction("vkCmdClearAttachments", this->vkCmdClearAttachments);
    fn(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
#else
    this->vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
#endif
}
void DeviceTable::CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout,
                                  VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,
                                  const VkImageResolve *pRegions) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResolveImage fn = validateFunction("vkCmdResolveImage", this->vkCmdResolveImage);
    fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
#else
    this->vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
#endif
}
void DeviceTable::CmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetEvent fn = validateFunction("vkCmdSetEvent", this->vkCmdSetEvent);
    fn(commandBuffer, event, stageMask);
#else
    this->vkCmdSetEvent(commandBuffer, event, stageMask);
#endif
}
void DeviceTable::CmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResetEvent fn = validateFunction("vkCmdResetEvent", this->vkCmdResetEvent);
    fn(commandBuffer, event, stageMask);
#else
    this->vkCmdResetEvent(commandBuffer, event, stageMask);
#endif
}
void DeviceTable::CmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents,
                                VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask,
                                uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers,
                                uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                uint32_t imageMemoryBarrierCount,
                                const VkImageMemoryBarrier *pImageMemoryBarriers) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWaitEvents fn = validateFunction("vkCmdWaitEvents", this->vkCmdWaitEvents);
    fn(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers,
       bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
#else
    this->vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount,
                          pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount,
                          pImageMemoryBarriers);
#endif
}
void DeviceTable::CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask,
                                     VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags,
                                     uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers,
                                     uint32_t bufferMemoryBarrierCount,
                                     const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                     uint32_t imageMemoryBarrierCount,
                                     const VkImageMemoryBarrier *pImageMemoryBarriers) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPipelineBarrier fn = validateFunction("vkCmdPipelineBarrier", this->vkCmdPipelineBarrier);
    fn(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers,
       bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
#else
    this->vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount,
                               pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers,
                               imageMemoryBarrierCount, pImageMemoryBarriers);
#endif
}
void DeviceTable::CmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query,
                                VkQueryControlFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginQuery fn = validateFunction("vkCmdBeginQuery", this->vkCmdBeginQuery);
    fn(commandBuffer, queryPool, query, flags);
#else
    this->vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
#endif
}
void DeviceTable::CmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndQuery fn = validateFunction("vkCmdEndQuery", this->vkCmdEndQuery);
    fn(commandBuffer, queryPool, query);
#else
    this->vkCmdEndQuery(commandBuffer, queryPool, query);
#endif
}
#if defined(VK_EXT_conditional_rendering)
void DeviceTable::CmdBeginConditionalRenderingEXT(
    VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginConditionalRenderingEXT fn =
        validateFunction("vkCmdBeginConditionalRenderingEXT", this->vkCmdBeginConditionalRenderingEXT);
    fn(commandBuffer, pConditionalRenderingBegin);
#    else
    this->vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
#    endif
}
#endif
#if defined(VK_EXT_conditional_rendering)
void DeviceTable::CmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndConditionalRenderingEXT fn =
        validateFunction("vkCmdEndConditionalRenderingEXT", this->vkCmdEndConditionalRenderingEXT);
    fn(commandBuffer);
#    else
    this->vkCmdEndConditionalRenderingEXT(commandBuffer);
#    endif
}
#endif
void DeviceTable::CmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery,
                                    uint32_t queryCount) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResetQueryPool fn = validateFunction("vkCmdResetQueryPool", this->vkCmdResetQueryPool);
    fn(commandBuffer, queryPool, firstQuery, queryCount);
#else
    this->vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
#endif
}
void DeviceTable::CmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage,
                                    VkQueryPool queryPool, uint32_t query) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteTimestamp fn = validateFunction("vkCmdWriteTimestamp", this->vkCmdWriteTimestamp);
    fn(commandBuffer, pipelineStage, queryPool, query);
#else
    this->vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
#endif
}
void DeviceTable::CmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery,
                                          uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset,
                                          VkDeviceSize stride, VkQueryResultFlags flags) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyQueryPoolResults fn =
        validateFunction("vkCmdCopyQueryPoolResults", this->vkCmdCopyQueryPoolResults);
    fn(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
#else
    this->vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride,
                                    flags);
#endif
}
void DeviceTable::CmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout,
                                   VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size,
                                   const void *pValues) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushConstants fn = validateFunction("vkCmdPushConstants", this->vkCmdPushConstants);
    fn(commandBuffer, layout, stageFlags, offset, size, pValues);
#else
    this->vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
#endif
}
void DeviceTable::CmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin,
                                     VkSubpassContents contents) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginRenderPass fn = validateFunction("vkCmdBeginRenderPass", this->vkCmdBeginRenderPass);
    fn(commandBuffer, pRenderPassBegin, contents);
#else
    this->vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
#endif
}
void DeviceTable::CmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdNextSubpass fn = validateFunction("vkCmdNextSubpass", this->vkCmdNextSubpass);
    fn(commandBuffer, contents);
#else
    this->vkCmdNextSubpass(commandBuffer, contents);
#endif
}
void DeviceTable::CmdEndRenderPass(VkCommandBuffer commandBuffer) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRenderPass fn = validateFunction("vkCmdEndRenderPass", this->vkCmdEndRenderPass);
    fn(commandBuffer);
#else
    this->vkCmdEndRenderPass(commandBuffer);
#endif
}
void DeviceTable::CmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount,
                                     const VkCommandBuffer *pCommandBuffers) const
{
#ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdExecuteCommands fn = validateFunction("vkCmdExecuteCommands", this->vkCmdExecuteCommands);
    fn(commandBuffer, commandBufferCount, pCommandBuffers);
#else
    this->vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
#endif
}
#if defined(VK_KHR_display_swapchain)
VkResult DeviceTable::CreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount,
                                                const VkSwapchainCreateInfoKHR *pCreateInfos,
                                                const VkAllocationCallbacks *pAllocator,
                                                VkSwapchainKHR *pSwapchains) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSharedSwapchainsKHR fn =
        validateFunction("vkCreateSharedSwapchainsKHR", this->vkCreateSharedSwapchainsKHR);
    return fn(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
#    else
    return this->vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
#    endif
}
#endif
#if defined(VK_KHR_swapchain)
VkResult DeviceTable::CreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo,
                                         const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSwapchainKHR fn = validateFunction("vkCreateSwapchainKHR", this->vkCreateSwapchainKHR);
    return fn(device, pCreateInfo, pAllocator, pSwapchain);
#    else
    return this->vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
#    endif
}
#endif
#if defined(VK_KHR_swapchain)
void DeviceTable::DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain,
                                      const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySwapchainKHR fn = validateFunction("vkDestroySwapchainKHR", this->vkDestroySwapchainKHR);
    fn(device, swapchain, pAllocator);
#    else
    this->vkDestroySwapchainKHR(device, swapchain, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_swapchain)
VkResult DeviceTable::GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount,
                                            VkImage *pSwapchainImages) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSwapchainImagesKHR fn = validateFunction("vkGetSwapchainImagesKHR", this->vkGetSwapchainImagesKHR);
    return fn(device, swapchain, pSwapchainImageCount, pSwapchainImages);
#    else
    return this->vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
#    endif
}
#endif
#if defined(VK_KHR_swapchain)
VkResult DeviceTable::AcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout,
                                          VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireNextImageKHR fn = validateFunction("vkAcquireNextImageKHR", this->vkAcquireNextImageKHR);
    return fn(device, swapchain, timeout, semaphore, fence, pImageIndex);
#    else
    return this->vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
#    endif
}
#endif
#if defined(VK_KHR_swapchain)
VkResult DeviceTable::QueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueuePresentKHR fn = validateFunction("vkQueuePresentKHR", this->vkQueuePresentKHR);
    return fn(queue, pPresentInfo);
#    else
    return this->vkQueuePresentKHR(queue, pPresentInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_marker)
VkResult DeviceTable::DebugMarkerSetObjectNameEXT(VkDevice device,
                                                  const VkDebugMarkerObjectNameInfoEXT *pNameInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDebugMarkerSetObjectNameEXT fn =
        validateFunction("vkDebugMarkerSetObjectNameEXT", this->vkDebugMarkerSetObjectNameEXT);
    return fn(device, pNameInfo);
#    else
    return this->vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_marker)
VkResult DeviceTable::DebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDebugMarkerSetObjectTagEXT fn =
        validateFunction("vkDebugMarkerSetObjectTagEXT", this->vkDebugMarkerSetObjectTagEXT);
    return fn(device, pTagInfo);
#    else
    return this->vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_marker)
void DeviceTable::CmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer,
                                         const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDebugMarkerBeginEXT fn =
        validateFunction("vkCmdDebugMarkerBeginEXT", this->vkCmdDebugMarkerBeginEXT);
    fn(commandBuffer, pMarkerInfo);
#    else
    this->vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_marker)
void DeviceTable::CmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDebugMarkerEndEXT fn = validateFunction("vkCmdDebugMarkerEndEXT", this->vkCmdDebugMarkerEndEXT);
    fn(commandBuffer);
#    else
    this->vkCmdDebugMarkerEndEXT(commandBuffer);
#    endif
}
#endif
#if defined(VK_EXT_debug_marker)
void DeviceTable::CmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer,
                                          const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDebugMarkerInsertEXT fn =
        validateFunction("vkCmdDebugMarkerInsertEXT", this->vkCmdDebugMarkerInsertEXT);
    fn(commandBuffer, pMarkerInfo);
#    else
    this->vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
#    endif
}
#endif
#if defined(VK_NV_external_memory_win32)
VkResult DeviceTable::GetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory,
                                             VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryWin32HandleNV fn =
        validateFunction("vkGetMemoryWin32HandleNV", this->vkGetMemoryWin32HandleNV);
    return fn(device, memory, handleType, pHandle);
#    else
    return this->vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
void DeviceTable::CmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed,
                                                const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdExecuteGeneratedCommandsNV fn =
        validateFunction("vkCmdExecuteGeneratedCommandsNV", this->vkCmdExecuteGeneratedCommandsNV);
    fn(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
#    else
    this->vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
void DeviceTable::CmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer,
                                                   const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPreprocessGeneratedCommandsNV fn =
        validateFunction("vkCmdPreprocessGeneratedCommandsNV", this->vkCmdPreprocessGeneratedCommandsNV);
    fn(commandBuffer, pGeneratedCommandsInfo);
#    else
    this->vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
void DeviceTable::CmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                               VkPipeline pipeline, uint32_t groupIndex) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindPipelineShaderGroupNV fn =
        validateFunction("vkCmdBindPipelineShaderGroupNV", this->vkCmdBindPipelineShaderGroupNV);
    fn(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
#    else
    this->vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
void DeviceTable::GetGeneratedCommandsMemoryRequirementsNV(VkDevice device,
                                                           const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo,
                                                           VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetGeneratedCommandsMemoryRequirementsNV fn = validateFunction(
        "vkGetGeneratedCommandsMemoryRequirementsNV", this->vkGetGeneratedCommandsMemoryRequirementsNV);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
VkResult DeviceTable::CreateIndirectCommandsLayoutNV(VkDevice device,
                                                     const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkIndirectCommandsLayoutNV *pIndirectCommandsLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateIndirectCommandsLayoutNV fn =
        validateFunction("vkCreateIndirectCommandsLayoutNV", this->vkCreateIndirectCommandsLayoutNV);
    return fn(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
#    else
    return this->vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands)
void DeviceTable::DestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout,
                                                  const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyIndirectCommandsLayoutNV fn =
        validateFunction("vkDestroyIndirectCommandsLayoutNV", this->vkDestroyIndirectCommandsLayoutNV);
    fn(device, indirectCommandsLayout, pAllocator);
#    else
    this->vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::CmdExecuteGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed,
                                                 const VkGeneratedCommandsInfoEXT *pGeneratedCommandsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdExecuteGeneratedCommandsEXT fn =
        validateFunction("vkCmdExecuteGeneratedCommandsEXT", this->vkCmdExecuteGeneratedCommandsEXT);
    fn(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
#    else
    this->vkCmdExecuteGeneratedCommandsEXT(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::CmdPreprocessGeneratedCommandsEXT(VkCommandBuffer commandBuffer,
                                                    const VkGeneratedCommandsInfoEXT *pGeneratedCommandsInfo,
                                                    VkCommandBuffer stateCommandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPreprocessGeneratedCommandsEXT fn =
        validateFunction("vkCmdPreprocessGeneratedCommandsEXT", this->vkCmdPreprocessGeneratedCommandsEXT);
    fn(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer);
#    else
    this->vkCmdPreprocessGeneratedCommandsEXT(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::GetGeneratedCommandsMemoryRequirementsEXT(VkDevice device,
                                                            const VkGeneratedCommandsMemoryRequirementsInfoEXT *pInfo,
                                                            VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetGeneratedCommandsMemoryRequirementsEXT fn = validateFunction(
        "vkGetGeneratedCommandsMemoryRequirementsEXT", this->vkGetGeneratedCommandsMemoryRequirementsEXT);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetGeneratedCommandsMemoryRequirementsEXT(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
VkResult DeviceTable::CreateIndirectCommandsLayoutEXT(VkDevice device,
                                                      const VkIndirectCommandsLayoutCreateInfoEXT *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkIndirectCommandsLayoutEXT *pIndirectCommandsLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateIndirectCommandsLayoutEXT fn =
        validateFunction("vkCreateIndirectCommandsLayoutEXT", this->vkCreateIndirectCommandsLayoutEXT);
    return fn(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
#    else
    return this->vkCreateIndirectCommandsLayoutEXT(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::DestroyIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout,
                                                   const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyIndirectCommandsLayoutEXT fn =
        validateFunction("vkDestroyIndirectCommandsLayoutEXT", this->vkDestroyIndirectCommandsLayoutEXT);
    fn(device, indirectCommandsLayout, pAllocator);
#    else
    this->vkDestroyIndirectCommandsLayoutEXT(device, indirectCommandsLayout, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
VkResult DeviceTable::CreateIndirectExecutionSetEXT(VkDevice device,
                                                    const VkIndirectExecutionSetCreateInfoEXT *pCreateInfo,
                                                    const VkAllocationCallbacks *pAllocator,
                                                    VkIndirectExecutionSetEXT *pIndirectExecutionSet) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateIndirectExecutionSetEXT fn =
        validateFunction("vkCreateIndirectExecutionSetEXT", this->vkCreateIndirectExecutionSetEXT);
    return fn(device, pCreateInfo, pAllocator, pIndirectExecutionSet);
#    else
    return this->vkCreateIndirectExecutionSetEXT(device, pCreateInfo, pAllocator, pIndirectExecutionSet);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::DestroyIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet,
                                                 const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyIndirectExecutionSetEXT fn =
        validateFunction("vkDestroyIndirectExecutionSetEXT", this->vkDestroyIndirectExecutionSetEXT);
    fn(device, indirectExecutionSet, pAllocator);
#    else
    this->vkDestroyIndirectExecutionSetEXT(device, indirectExecutionSet, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::UpdateIndirectExecutionSetPipelineEXT(
    VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount,
    const VkWriteIndirectExecutionSetPipelineEXT *pExecutionSetWrites) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateIndirectExecutionSetPipelineEXT fn =
        validateFunction("vkUpdateIndirectExecutionSetPipelineEXT", this->vkUpdateIndirectExecutionSetPipelineEXT);
    fn(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);
#    else
    this->vkUpdateIndirectExecutionSetPipelineEXT(device, indirectExecutionSet, executionSetWriteCount,
                                                  pExecutionSetWrites);
#    endif
}
#endif
#if defined(VK_EXT_device_generated_commands)
void DeviceTable::UpdateIndirectExecutionSetShaderEXT(
    VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount,
    const VkWriteIndirectExecutionSetShaderEXT *pExecutionSetWrites) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateIndirectExecutionSetShaderEXT fn =
        validateFunction("vkUpdateIndirectExecutionSetShaderEXT", this->vkUpdateIndirectExecutionSetShaderEXT);
    fn(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites);
#    else
    this->vkUpdateIndirectExecutionSetShaderEXT(device, indirectExecutionSet, executionSetWriteCount,
                                                pExecutionSetWrites);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                       VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount,
                                       const VkWriteDescriptorSet *pDescriptorWrites) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSet fn = validateFunction("vkCmdPushDescriptorSet", this->vkCmdPushDescriptorSet);
    fn(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
#    else
    this->vkCmdPushDescriptorSet(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount,
                                 pDescriptorWrites);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::TrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkTrimCommandPool fn = validateFunction("vkTrimCommandPool", this->vkTrimCommandPool);
    fn(device, commandPool, flags);
#    else
    this->vkTrimCommandPool(device, commandPool, flags);
#    endif
}
#endif
#if defined(VK_KHR_external_memory_win32)
VkResult DeviceTable::GetMemoryWin32HandleKHR(VkDevice device, const VkMemoryGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                              HANDLE *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryWin32HandleKHR fn =
        validateFunction("vkGetMemoryWin32HandleKHR", this->vkGetMemoryWin32HandleKHR);
    return fn(device, pGetWin32HandleInfo, pHandle);
#    else
    return this->vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_KHR_external_memory_win32)
VkResult DeviceTable::GetMemoryWin32HandlePropertiesKHR(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR *pMemoryWin32HandleProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryWin32HandlePropertiesKHR fn =
        validateFunction("vkGetMemoryWin32HandlePropertiesKHR", this->vkGetMemoryWin32HandlePropertiesKHR);
    return fn(device, handleType, handle, pMemoryWin32HandleProperties);
#    else
    return this->vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
#    endif
}
#endif
#if defined(VK_KHR_external_memory_fd)
VkResult DeviceTable::GetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryFdKHR fn = validateFunction("vkGetMemoryFdKHR", this->vkGetMemoryFdKHR);
    return fn(device, pGetFdInfo, pFd);
#    else
    return this->vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
#    endif
}
#endif
#if defined(VK_KHR_external_memory_fd)
VkResult DeviceTable::GetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd,
                                               VkMemoryFdPropertiesKHR *pMemoryFdProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryFdPropertiesKHR fn =
        validateFunction("vkGetMemoryFdPropertiesKHR", this->vkGetMemoryFdPropertiesKHR);
    return fn(device, handleType, fd, pMemoryFdProperties);
#    else
    return this->vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
#    endif
}
#endif
#if defined(VK_FUCHSIA_external_memory)
VkResult DeviceTable::GetMemoryZirconHandleFUCHSIA(VkDevice device,
                                                   const VkMemoryGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                   zx_handle_t *pZirconHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryZirconHandleFUCHSIA fn =
        validateFunction("vkGetMemoryZirconHandleFUCHSIA", this->vkGetMemoryZirconHandleFUCHSIA);
    return fn(device, pGetZirconHandleInfo, pZirconHandle);
#    else
    return this->vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
#    endif
}
#endif
#if defined(VK_FUCHSIA_external_memory)
VkResult DeviceTable::GetMemoryZirconHandlePropertiesFUCHSIA(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle,
    VkMemoryZirconHandlePropertiesFUCHSIA *pMemoryZirconHandleProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA fn =
        validateFunction("vkGetMemoryZirconHandlePropertiesFUCHSIA", this->vkGetMemoryZirconHandlePropertiesFUCHSIA);
    return fn(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
#    else
    return this->vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle,
                                                          pMemoryZirconHandleProperties);
#    endif
}
#endif
#if defined(VK_NV_external_memory_rdma)
VkResult DeviceTable::GetMemoryRemoteAddressNV(VkDevice device,
                                               const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo,
                                               VkRemoteAddressNV *pAddress) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryRemoteAddressNV fn =
        validateFunction("vkGetMemoryRemoteAddressNV", this->vkGetMemoryRemoteAddressNV);
    return fn(device, pMemoryGetRemoteAddressInfo, pAddress);
#    else
    return this->vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
#    endif
}
#endif
#if defined(VK_NV_external_memory_sci_buf)
VkResult DeviceTable::GetMemorySciBufNV(VkDevice device, const VkMemoryGetSciBufInfoNV *pGetSciBufInfo,
                                        NvSciBufObj *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemorySciBufNV fn = validateFunction("vkGetMemorySciBufNV", this->vkGetMemorySciBufNV);
    return fn(device, pGetSciBufInfo, pHandle);
#    else
    return this->vkGetMemorySciBufNV(device, pGetSciBufInfo, pHandle);
#    endif
}
#endif
#if defined(VK_KHR_external_semaphore_win32)
VkResult DeviceTable::GetSemaphoreWin32HandleKHR(VkDevice device,
                                                 const VkSemaphoreGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                                 HANDLE *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreWin32HandleKHR fn =
        validateFunction("vkGetSemaphoreWin32HandleKHR", this->vkGetSemaphoreWin32HandleKHR);
    return fn(device, pGetWin32HandleInfo, pHandle);
#    else
    return this->vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_KHR_external_semaphore_win32)
VkResult DeviceTable::ImportSemaphoreWin32HandleKHR(
    VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR *pImportSemaphoreWin32HandleInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportSemaphoreWin32HandleKHR fn =
        validateFunction("vkImportSemaphoreWin32HandleKHR", this->vkImportSemaphoreWin32HandleKHR);
    return fn(device, pImportSemaphoreWin32HandleInfo);
#    else
    return this->vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
#    endif
}
#endif
#if defined(VK_KHR_external_semaphore_fd)
VkResult DeviceTable::GetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreFdKHR fn = validateFunction("vkGetSemaphoreFdKHR", this->vkGetSemaphoreFdKHR);
    return fn(device, pGetFdInfo, pFd);
#    else
    return this->vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
#    endif
}
#endif
#if defined(VK_KHR_external_semaphore_fd)
VkResult DeviceTable::ImportSemaphoreFdKHR(VkDevice device,
                                           const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportSemaphoreFdKHR fn = validateFunction("vkImportSemaphoreFdKHR", this->vkImportSemaphoreFdKHR);
    return fn(device, pImportSemaphoreFdInfo);
#    else
    return this->vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
#    endif
}
#endif
#if defined(VK_FUCHSIA_external_semaphore)
VkResult DeviceTable::GetSemaphoreZirconHandleFUCHSIA(VkDevice device,
                                                      const VkSemaphoreGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                      zx_handle_t *pZirconHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreZirconHandleFUCHSIA fn =
        validateFunction("vkGetSemaphoreZirconHandleFUCHSIA", this->vkGetSemaphoreZirconHandleFUCHSIA);
    return fn(device, pGetZirconHandleInfo, pZirconHandle);
#    else
    return this->vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
#    endif
}
#endif
#if defined(VK_FUCHSIA_external_semaphore)
VkResult DeviceTable::ImportSemaphoreZirconHandleFUCHSIA(
    VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA *pImportSemaphoreZirconHandleInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportSemaphoreZirconHandleFUCHSIA fn =
        validateFunction("vkImportSemaphoreZirconHandleFUCHSIA", this->vkImportSemaphoreZirconHandleFUCHSIA);
    return fn(device, pImportSemaphoreZirconHandleInfo);
#    else
    return this->vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
#    endif
}
#endif
#if defined(VK_KHR_external_fence_win32)
VkResult DeviceTable::GetFenceWin32HandleKHR(VkDevice device, const VkFenceGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                             HANDLE *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFenceWin32HandleKHR fn =
        validateFunction("vkGetFenceWin32HandleKHR", this->vkGetFenceWin32HandleKHR);
    return fn(device, pGetWin32HandleInfo, pHandle);
#    else
    return this->vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_KHR_external_fence_win32)
VkResult DeviceTable::ImportFenceWin32HandleKHR(
    VkDevice device, const VkImportFenceWin32HandleInfoKHR *pImportFenceWin32HandleInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportFenceWin32HandleKHR fn =
        validateFunction("vkImportFenceWin32HandleKHR", this->vkImportFenceWin32HandleKHR);
    return fn(device, pImportFenceWin32HandleInfo);
#    else
    return this->vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
#    endif
}
#endif
#if defined(VK_KHR_external_fence_fd)
VkResult DeviceTable::GetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFenceFdKHR fn = validateFunction("vkGetFenceFdKHR", this->vkGetFenceFdKHR);
    return fn(device, pGetFdInfo, pFd);
#    else
    return this->vkGetFenceFdKHR(device, pGetFdInfo, pFd);
#    endif
}
#endif
#if defined(VK_KHR_external_fence_fd)
VkResult DeviceTable::ImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportFenceFdKHR fn = validateFunction("vkImportFenceFdKHR", this->vkImportFenceFdKHR);
    return fn(device, pImportFenceFdInfo);
#    else
    return this->vkImportFenceFdKHR(device, pImportFenceFdInfo);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
VkResult DeviceTable::GetFenceSciSyncFenceNV(VkDevice device, const VkFenceGetSciSyncInfoNV *pGetSciSyncHandleInfo,
                                             void *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFenceSciSyncFenceNV fn =
        validateFunction("vkGetFenceSciSyncFenceNV", this->vkGetFenceSciSyncFenceNV);
    return fn(device, pGetSciSyncHandleInfo, pHandle);
#    else
    return this->vkGetFenceSciSyncFenceNV(device, pGetSciSyncHandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
VkResult DeviceTable::GetFenceSciSyncObjNV(VkDevice device, const VkFenceGetSciSyncInfoNV *pGetSciSyncHandleInfo,
                                           void *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFenceSciSyncObjNV fn = validateFunction("vkGetFenceSciSyncObjNV", this->vkGetFenceSciSyncObjNV);
    return fn(device, pGetSciSyncHandleInfo, pHandle);
#    else
    return this->vkGetFenceSciSyncObjNV(device, pGetSciSyncHandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
VkResult DeviceTable::ImportFenceSciSyncFenceNV(VkDevice device,
                                                const VkImportFenceSciSyncInfoNV *pImportFenceSciSyncInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportFenceSciSyncFenceNV fn =
        validateFunction("vkImportFenceSciSyncFenceNV", this->vkImportFenceSciSyncFenceNV);
    return fn(device, pImportFenceSciSyncInfo);
#    else
    return this->vkImportFenceSciSyncFenceNV(device, pImportFenceSciSyncInfo);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync) || defined(VK_NV_external_sci_sync2)
VkResult DeviceTable::ImportFenceSciSyncObjNV(VkDevice device,
                                              const VkImportFenceSciSyncInfoNV *pImportFenceSciSyncInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportFenceSciSyncObjNV fn =
        validateFunction("vkImportFenceSciSyncObjNV", this->vkImportFenceSciSyncObjNV);
    return fn(device, pImportFenceSciSyncInfo);
#    else
    return this->vkImportFenceSciSyncObjNV(device, pImportFenceSciSyncInfo);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync)
VkResult DeviceTable::GetSemaphoreSciSyncObjNV(VkDevice device, const VkSemaphoreGetSciSyncInfoNV *pGetSciSyncInfo,
                                               void *pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreSciSyncObjNV fn =
        validateFunction("vkGetSemaphoreSciSyncObjNV", this->vkGetSemaphoreSciSyncObjNV);
    return fn(device, pGetSciSyncInfo, pHandle);
#    else
    return this->vkGetSemaphoreSciSyncObjNV(device, pGetSciSyncInfo, pHandle);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync)
VkResult DeviceTable::ImportSemaphoreSciSyncObjNV(
    VkDevice device, const VkImportSemaphoreSciSyncInfoNV *pImportSemaphoreSciSyncInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkImportSemaphoreSciSyncObjNV fn =
        validateFunction("vkImportSemaphoreSciSyncObjNV", this->vkImportSemaphoreSciSyncObjNV);
    return fn(device, pImportSemaphoreSciSyncInfo);
#    else
    return this->vkImportSemaphoreSciSyncObjNV(device, pImportSemaphoreSciSyncInfo);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync2)
VkResult DeviceTable::CreateSemaphoreSciSyncPoolNV(VkDevice device,
                                                   const VkSemaphoreSciSyncPoolCreateInfoNV *pCreateInfo,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkSemaphoreSciSyncPoolNV *pSemaphorePool) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSemaphoreSciSyncPoolNV fn =
        validateFunction("vkCreateSemaphoreSciSyncPoolNV", this->vkCreateSemaphoreSciSyncPoolNV);
    return fn(device, pCreateInfo, pAllocator, pSemaphorePool);
#    else
    return this->vkCreateSemaphoreSciSyncPoolNV(device, pCreateInfo, pAllocator, pSemaphorePool);
#    endif
}
#endif
#if defined(VK_NV_external_sci_sync2)
void DeviceTable::DestroySemaphoreSciSyncPoolNV(VkDevice device, VkSemaphoreSciSyncPoolNV semaphorePool,
                                                const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySemaphoreSciSyncPoolNV fn =
        validateFunction("vkDestroySemaphoreSciSyncPoolNV", this->vkDestroySemaphoreSciSyncPoolNV);
    fn(device, semaphorePool, pAllocator);
#    else
    this->vkDestroySemaphoreSciSyncPoolNV(device, semaphorePool, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_display_control)
VkResult DeviceTable::DisplayPowerControlEXT(VkDevice device, VkDisplayKHR display,
                                             const VkDisplayPowerInfoEXT *pDisplayPowerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDisplayPowerControlEXT fn =
        validateFunction("vkDisplayPowerControlEXT", this->vkDisplayPowerControlEXT);
    return fn(device, display, pDisplayPowerInfo);
#    else
    return this->vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
#    endif
}
#endif
#if defined(VK_EXT_display_control)
VkResult DeviceTable::RegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT *pDeviceEventInfo,
                                             const VkAllocationCallbacks *pAllocator, VkFence *pFence) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkRegisterDeviceEventEXT fn =
        validateFunction("vkRegisterDeviceEventEXT", this->vkRegisterDeviceEventEXT);
    return fn(device, pDeviceEventInfo, pAllocator, pFence);
#    else
    return this->vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
#    endif
}
#endif
#if defined(VK_EXT_display_control)
VkResult DeviceTable::RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display,
                                              const VkDisplayEventInfoEXT *pDisplayEventInfo,
                                              const VkAllocationCallbacks *pAllocator, VkFence *pFence) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkRegisterDisplayEventEXT fn =
        validateFunction("vkRegisterDisplayEventEXT", this->vkRegisterDisplayEventEXT);
    return fn(device, display, pDisplayEventInfo, pAllocator, pFence);
#    else
    return this->vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
#    endif
}
#endif
#if defined(VK_EXT_display_control)
VkResult DeviceTable::GetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain,
                                             VkSurfaceCounterFlagBitsEXT counter, uint64_t *pCounterValue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSwapchainCounterEXT fn =
        validateFunction("vkGetSwapchainCounterEXT", this->vkGetSwapchainCounterEXT);
    return fn(device, swapchain, counter, pCounterValue);
#    else
    return this->vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex,
                                                   uint32_t remoteDeviceIndex,
                                                   VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceGroupPeerMemoryFeatures fn =
        validateFunction("vkGetDeviceGroupPeerMemoryFeatures", this->vkGetDeviceGroupPeerMemoryFeatures);
    fn(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
#    else
    this->vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex,
                                             pPeerMemoryFeatures);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult DeviceTable::BindBufferMemory2(VkDevice device, uint32_t bindInfoCount,
                                        const VkBindBufferMemoryInfo *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindBufferMemory2 fn = validateFunction("vkBindBufferMemory2", this->vkBindBufferMemory2);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult DeviceTable::BindImageMemory2(VkDevice device, uint32_t bindInfoCount,
                                       const VkBindImageMemoryInfo *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindImageMemory2 fn = validateFunction("vkBindImageMemory2", this->vkBindImageMemory2);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindImageMemory2(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::CmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDeviceMask fn = validateFunction("vkCmdSetDeviceMask", this->vkCmdSetDeviceMask);
    fn(commandBuffer, deviceMask);
#    else
    this->vkCmdSetDeviceMask(commandBuffer, deviceMask);
#    endif
}
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
VkResult DeviceTable::GetDeviceGroupPresentCapabilitiesKHR(
    VkDevice device, VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceGroupPresentCapabilitiesKHR fn =
        validateFunction("vkGetDeviceGroupPresentCapabilitiesKHR", this->vkGetDeviceGroupPresentCapabilitiesKHR);
    return fn(device, pDeviceGroupPresentCapabilities);
#    else
    return this->vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
#    endif
}
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
VkResult DeviceTable::GetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface,
                                                           VkDeviceGroupPresentModeFlagsKHR *pModes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceGroupSurfacePresentModesKHR fn =
        validateFunction("vkGetDeviceGroupSurfacePresentModesKHR", this->vkGetDeviceGroupSurfacePresentModesKHR);
    return fn(device, surface, pModes);
#    else
    return this->vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
#    endif
}
#endif
#if (defined(VK_KHR_swapchain) && defined(VKIT_API_VERSION_1_1)) ||                                                    \
    (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain))
VkResult DeviceTable::AcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo,
                                           uint32_t *pImageIndex) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireNextImage2KHR fn = validateFunction("vkAcquireNextImage2KHR", this->vkAcquireNextImage2KHR);
    return fn(device, pAcquireInfo, pImageIndex);
#    else
    return this->vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::CmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY,
                                  uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY,
                                  uint32_t groupCountZ) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchBase fn = validateFunction("vkCmdDispatchBase", this->vkCmdDispatchBase);
    fn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
#    else
    this->vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult DeviceTable::CreateDescriptorUpdateTemplate(VkDevice device,
                                                     const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDescriptorUpdateTemplate fn =
        validateFunction("vkCreateDescriptorUpdateTemplate", this->vkCreateDescriptorUpdateTemplate);
    return fn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
#    else
    return this->vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                  const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDescriptorUpdateTemplate fn =
        validateFunction("vkDestroyDescriptorUpdateTemplate", this->vkDestroyDescriptorUpdateTemplate);
    fn(device, descriptorUpdateTemplate, pAllocator);
#    else
    this->vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::UpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet,
                                                  VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                  const void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateDescriptorSetWithTemplate fn =
        validateFunction("vkUpdateDescriptorSetWithTemplate", this->vkUpdateDescriptorSetWithTemplate);
    fn(device, descriptorSet, descriptorUpdateTemplate, pData);
#    else
    this->vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer,
                                                   VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                   VkPipelineLayout layout, uint32_t set, const void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSetWithTemplate fn =
        validateFunction("vkCmdPushDescriptorSetWithTemplate", this->vkCmdPushDescriptorSetWithTemplate);
    fn(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
#    else
    this->vkCmdPushDescriptorSetWithTemplate(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
#    endif
}
#endif
#if defined(VK_EXT_hdr_metadata)
void DeviceTable::SetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR *pSwapchains,
                                    const VkHdrMetadataEXT *pMetadata) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetHdrMetadataEXT fn = validateFunction("vkSetHdrMetadataEXT", this->vkSetHdrMetadataEXT);
    fn(device, swapchainCount, pSwapchains, pMetadata);
#    else
    this->vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
#    endif
}
#endif
#if defined(VK_KHR_shared_presentable_image)
VkResult DeviceTable::GetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSwapchainStatusKHR fn = validateFunction("vkGetSwapchainStatusKHR", this->vkGetSwapchainStatusKHR);
    return fn(device, swapchain);
#    else
    return this->vkGetSwapchainStatusKHR(device, swapchain);
#    endif
}
#endif
#if defined(VK_GOOGLE_display_timing)
VkResult DeviceTable::GetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain,
                                                    VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRefreshCycleDurationGOOGLE fn =
        validateFunction("vkGetRefreshCycleDurationGOOGLE", this->vkGetRefreshCycleDurationGOOGLE);
    return fn(device, swapchain, pDisplayTimingProperties);
#    else
    return this->vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
#    endif
}
#endif
#if defined(VK_GOOGLE_display_timing)
VkResult DeviceTable::GetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain,
                                                      uint32_t *pPresentationTimingCount,
                                                      VkPastPresentationTimingGOOGLE *pPresentationTimings) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPastPresentationTimingGOOGLE fn =
        validateFunction("vkGetPastPresentationTimingGOOGLE", this->vkGetPastPresentationTimingGOOGLE);
    return fn(device, swapchain, pPresentationTimingCount, pPresentationTimings);
#    else
    return this->vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
#    endif
}
#endif
#if defined(VK_NV_clip_space_w_scaling)
void DeviceTable::CmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport,
                                           uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportWScalingNV fn =
        validateFunction("vkCmdSetViewportWScalingNV", this->vkCmdSetViewportWScalingNV);
    fn(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
#    else
    this->vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
#    endif
}
#endif
#if defined(VK_EXT_discard_rectangles)
void DeviceTable::CmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle,
                                            uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDiscardRectangleEXT fn =
        validateFunction("vkCmdSetDiscardRectangleEXT", this->vkCmdSetDiscardRectangleEXT);
    fn(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
#    else
    this->vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2))
void DeviceTable::CmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDiscardRectangleEnableEXT fn =
        validateFunction("vkCmdSetDiscardRectangleEnableEXT", this->vkCmdSetDiscardRectangleEnableEXT);
    fn(commandBuffer, discardRectangleEnable);
#    else
    this->vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_EXT_discard_rectangles) && VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2 && \
                                  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION >= 2))
void DeviceTable::CmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer,
                                                VkDiscardRectangleModeEXT discardRectangleMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDiscardRectangleModeEXT fn =
        validateFunction("vkCmdSetDiscardRectangleModeEXT", this->vkCmdSetDiscardRectangleModeEXT);
    fn(commandBuffer, discardRectangleMode);
#    else
    this->vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
#    endif
}
#endif
#if defined(VK_EXT_sample_locations)
void DeviceTable::CmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer,
                                           const VkSampleLocationsInfoEXT *pSampleLocationsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetSampleLocationsEXT fn =
        validateFunction("vkCmdSetSampleLocationsEXT", this->vkCmdSetSampleLocationsEXT);
    fn(commandBuffer, pSampleLocationsInfo);
#    else
    this->vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo,
                                               VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferMemoryRequirements2 fn =
        validateFunction("vkGetBufferMemoryRequirements2", this->vkGetBufferMemoryRequirements2);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo,
                                              VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageMemoryRequirements2 fn =
        validateFunction("vkGetImageMemoryRequirements2", this->vkGetImageMemoryRequirements2);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo,
                                                    uint32_t *pSparseMemoryRequirementCount,
                                                    VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSparseMemoryRequirements2 fn =
        validateFunction("vkGetImageSparseMemoryRequirements2", this->vkGetImageSparseMemoryRequirements2);
    fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#    else
    this->vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::GetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo,
                                                    VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceBufferMemoryRequirements fn =
        validateFunction("vkGetDeviceBufferMemoryRequirements", this->vkGetDeviceBufferMemoryRequirements);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::GetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo,
                                                   VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageMemoryRequirements fn =
        validateFunction("vkGetDeviceImageMemoryRequirements", this->vkGetDeviceImageMemoryRequirements);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::GetDeviceImageSparseMemoryRequirements(
    VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageSparseMemoryRequirements fn =
        validateFunction("vkGetDeviceImageSparseMemoryRequirements", this->vkGetDeviceImageSparseMemoryRequirements);
    fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#    else
    this->vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount,
                                                   pSparseMemoryRequirements);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
VkResult DeviceTable::CreateSamplerYcbcrConversion(VkDevice device,
                                                   const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkSamplerYcbcrConversion *pYcbcrConversion) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSamplerYcbcrConversion fn =
        validateFunction("vkCreateSamplerYcbcrConversion", this->vkCreateSamplerYcbcrConversion);
    return fn(device, pCreateInfo, pAllocator, pYcbcrConversion);
#    else
    return this->vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion,
                                                const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySamplerYcbcrConversion fn =
        validateFunction("vkDestroySamplerYcbcrConversion", this->vkDestroySamplerYcbcrConversion);
    fn(device, ycbcrConversion, pAllocator);
#    else
    this->vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceQueue2 fn = validateFunction("vkGetDeviceQueue2", this->vkGetDeviceQueue2);
    fn(device, pQueueInfo, pQueue);
#    else
    this->vkGetDeviceQueue2(device, pQueueInfo, pQueue);
#    endif
}
#endif
#if defined(VK_EXT_validation_cache)
VkResult DeviceTable::CreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT *pCreateInfo,
                                               const VkAllocationCallbacks *pAllocator,
                                               VkValidationCacheEXT *pValidationCache) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateValidationCacheEXT fn =
        validateFunction("vkCreateValidationCacheEXT", this->vkCreateValidationCacheEXT);
    return fn(device, pCreateInfo, pAllocator, pValidationCache);
#    else
    return this->vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
#    endif
}
#endif
#if defined(VK_EXT_validation_cache)
void DeviceTable::DestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache,
                                            const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyValidationCacheEXT fn =
        validateFunction("vkDestroyValidationCacheEXT", this->vkDestroyValidationCacheEXT);
    fn(device, validationCache, pAllocator);
#    else
    this->vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_validation_cache)
VkResult DeviceTable::GetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache,
                                                size_t *pDataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetValidationCacheDataEXT fn =
        validateFunction("vkGetValidationCacheDataEXT", this->vkGetValidationCacheDataEXT);
    return fn(device, validationCache, pDataSize, pData);
#    else
    return this->vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
#    endif
}
#endif
#if defined(VK_EXT_validation_cache)
VkResult DeviceTable::MergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount,
                                               const VkValidationCacheEXT *pSrcCaches) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkMergeValidationCachesEXT fn =
        validateFunction("vkMergeValidationCachesEXT", this->vkMergeValidationCachesEXT);
    return fn(device, dstCache, srcCacheCount, pSrcCaches);
#    else
    return this->vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_1)
void DeviceTable::GetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                VkDescriptorSetLayoutSupport *pSupport) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetLayoutSupport fn =
        validateFunction("vkGetDescriptorSetLayoutSupport", this->vkGetDescriptorSetLayoutSupport);
    fn(device, pCreateInfo, pSupport);
#    else
    this->vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
#    endif
}
#endif
#if defined(VK_ANDROID_native_buffer)
VkResult DeviceTable::GetSwapchainGrallocUsageANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage,
                                                      int *grallocUsage) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSwapchainGrallocUsageANDROID fn =
        validateFunction("vkGetSwapchainGrallocUsageANDROID", this->vkGetSwapchainGrallocUsageANDROID);
    return fn(device, format, imageUsage, grallocUsage);
#    else
    return this->vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
#    endif
}
#endif
#if defined(VK_ANDROID_native_buffer)
VkResult DeviceTable::GetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage,
                                                       VkSwapchainImageUsageFlagsANDROID swapchainImageUsage,
                                                       uint64_t *grallocConsumerUsage,
                                                       uint64_t *grallocProducerUsage) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSwapchainGrallocUsage2ANDROID fn =
        validateFunction("vkGetSwapchainGrallocUsage2ANDROID", this->vkGetSwapchainGrallocUsage2ANDROID);
    return fn(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
#    else
    return this->vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage,
                                                    grallocConsumerUsage, grallocProducerUsage);
#    endif
}
#endif
#if defined(VK_ANDROID_native_buffer)
VkResult DeviceTable::AcquireImageANDROID(VkDevice device, VkImage image, int nativeFenceFd, VkSemaphore semaphore,
                                          VkFence fence) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireImageANDROID fn = validateFunction("vkAcquireImageANDROID", this->vkAcquireImageANDROID);
    return fn(device, image, nativeFenceFd, semaphore, fence);
#    else
    return this->vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
#    endif
}
#endif
#if defined(VK_ANDROID_native_buffer)
VkResult DeviceTable::QueueSignalReleaseImageANDROID(VkQueue queue, uint32_t waitSemaphoreCount,
                                                     const VkSemaphore *pWaitSemaphores, VkImage image,
                                                     int *pNativeFenceFd) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueSignalReleaseImageANDROID fn =
        validateFunction("vkQueueSignalReleaseImageANDROID", this->vkQueueSignalReleaseImageANDROID);
    return fn(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
#    else
    return this->vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
#    endif
}
#endif
#if defined(VK_AMD_shader_info)
VkResult DeviceTable::GetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage,
                                       VkShaderInfoTypeAMD infoType, size_t *pInfoSize, void *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetShaderInfoAMD fn = validateFunction("vkGetShaderInfoAMD", this->vkGetShaderInfoAMD);
    return fn(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
#    else
    return this->vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
#    endif
}
#endif
#if defined(VK_AMD_display_native_hdr)
void DeviceTable::SetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetLocalDimmingAMD fn = validateFunction("vkSetLocalDimmingAMD", this->vkSetLocalDimmingAMD);
    fn(device, swapChain, localDimmingEnable);
#    else
    this->vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
#    endif
}
#endif
#if defined(VK_KHR_calibrated_timestamps)
VkResult DeviceTable::GetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount,
                                                 const VkCalibratedTimestampInfoKHR *pTimestampInfos,
                                                 uint64_t *pTimestamps, uint64_t *pMaxDeviation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetCalibratedTimestampsKHR fn =
        validateFunction("vkGetCalibratedTimestampsKHR", this->vkGetCalibratedTimestampsKHR);
    return fn(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
#    else
    return this->vkGetCalibratedTimestampsKHR(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
VkResult DeviceTable::SetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetDebugUtilsObjectNameEXT fn =
        validateFunction("vkSetDebugUtilsObjectNameEXT", this->vkSetDebugUtilsObjectNameEXT);
    return fn(device, pNameInfo);
#    else
    return this->vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
VkResult DeviceTable::SetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetDebugUtilsObjectTagEXT fn =
        validateFunction("vkSetDebugUtilsObjectTagEXT", this->vkSetDebugUtilsObjectTagEXT);
    return fn(device, pTagInfo);
#    else
    return this->vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::QueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueBeginDebugUtilsLabelEXT fn =
        validateFunction("vkQueueBeginDebugUtilsLabelEXT", this->vkQueueBeginDebugUtilsLabelEXT);
    fn(queue, pLabelInfo);
#    else
    this->vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::QueueEndDebugUtilsLabelEXT(VkQueue queue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueEndDebugUtilsLabelEXT fn =
        validateFunction("vkQueueEndDebugUtilsLabelEXT", this->vkQueueEndDebugUtilsLabelEXT);
    fn(queue);
#    else
    this->vkQueueEndDebugUtilsLabelEXT(queue);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::QueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueInsertDebugUtilsLabelEXT fn =
        validateFunction("vkQueueInsertDebugUtilsLabelEXT", this->vkQueueInsertDebugUtilsLabelEXT);
    fn(queue, pLabelInfo);
#    else
    this->vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::CmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer,
                                             const VkDebugUtilsLabelEXT *pLabelInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginDebugUtilsLabelEXT fn =
        validateFunction("vkCmdBeginDebugUtilsLabelEXT", this->vkCmdBeginDebugUtilsLabelEXT);
    fn(commandBuffer, pLabelInfo);
#    else
    this->vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::CmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndDebugUtilsLabelEXT fn =
        validateFunction("vkCmdEndDebugUtilsLabelEXT", this->vkCmdEndDebugUtilsLabelEXT);
    fn(commandBuffer);
#    else
    this->vkCmdEndDebugUtilsLabelEXT(commandBuffer);
#    endif
}
#endif
#if defined(VK_EXT_debug_utils)
void DeviceTable::CmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer,
                                              const VkDebugUtilsLabelEXT *pLabelInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdInsertDebugUtilsLabelEXT fn =
        validateFunction("vkCmdInsertDebugUtilsLabelEXT", this->vkCmdInsertDebugUtilsLabelEXT);
    fn(commandBuffer, pLabelInfo);
#    else
    this->vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
#    endif
}
#endif
#if defined(VK_EXT_external_memory_host)
VkResult DeviceTable::GetMemoryHostPointerPropertiesEXT(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void *pHostPointer,
    VkMemoryHostPointerPropertiesEXT *pMemoryHostPointerProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryHostPointerPropertiesEXT fn =
        validateFunction("vkGetMemoryHostPointerPropertiesEXT", this->vkGetMemoryHostPointerPropertiesEXT);
    return fn(device, handleType, pHostPointer, pMemoryHostPointerProperties);
#    else
    return this->vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
#    endif
}
#endif
#if defined(VK_AMD_buffer_marker)
void DeviceTable::CmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage,
                                          VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteBufferMarkerAMD fn =
        validateFunction("vkCmdWriteBufferMarkerAMD", this->vkCmdWriteBufferMarkerAMD);
    fn(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
#    else
    this->vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
VkResult DeviceTable::CreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo,
                                        const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateRenderPass2 fn = validateFunction("vkCreateRenderPass2", this->vkCreateRenderPass2);
    return fn(device, pCreateInfo, pAllocator, pRenderPass);
#    else
    return this->vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::CmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin,
                                      const VkSubpassBeginInfo *pSubpassBeginInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginRenderPass2 fn = validateFunction("vkCmdBeginRenderPass2", this->vkCmdBeginRenderPass2);
    fn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
#    else
    this->vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::CmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo,
                                  const VkSubpassEndInfo *pSubpassEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdNextSubpass2 fn = validateFunction("vkCmdNextSubpass2", this->vkCmdNextSubpass2);
    fn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
#    else
    this->vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::CmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRenderPass2 fn = validateFunction("vkCmdEndRenderPass2", this->vkCmdEndRenderPass2);
    fn(commandBuffer, pSubpassEndInfo);
#    else
    this->vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
VkResult DeviceTable::GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t *pValue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreCounterValue fn =
        validateFunction("vkGetSemaphoreCounterValue", this->vkGetSemaphoreCounterValue);
    return fn(device, semaphore, pValue);
#    else
    return this->vkGetSemaphoreCounterValue(device, semaphore, pValue);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
VkResult DeviceTable::WaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWaitSemaphores fn = validateFunction("vkWaitSemaphores", this->vkWaitSemaphores);
    return fn(device, pWaitInfo, timeout);
#    else
    return this->vkWaitSemaphores(device, pWaitInfo, timeout);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
VkResult DeviceTable::SignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSignalSemaphore fn = validateFunction("vkSignalSemaphore", this->vkSignalSemaphore);
    return fn(device, pSignalInfo);
#    else
    return this->vkSignalSemaphore(device, pSignalInfo);
#    endif
}
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
VkResult DeviceTable::GetAndroidHardwareBufferPropertiesANDROID(
    VkDevice device, const struct AHardwareBuffer *buffer, VkAndroidHardwareBufferPropertiesANDROID *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAndroidHardwareBufferPropertiesANDROID fn = validateFunction(
        "vkGetAndroidHardwareBufferPropertiesANDROID", this->vkGetAndroidHardwareBufferPropertiesANDROID);
    return fn(device, buffer, pProperties);
#    else
    return this->vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
#    endif
}
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
VkResult DeviceTable::GetMemoryAndroidHardwareBufferANDROID(VkDevice device,
                                                            const VkMemoryGetAndroidHardwareBufferInfoANDROID *pInfo,
                                                            struct AHardwareBuffer **pBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryAndroidHardwareBufferANDROID fn =
        validateFunction("vkGetMemoryAndroidHardwareBufferANDROID", this->vkGetMemoryAndroidHardwareBufferANDROID);
    return fn(device, pInfo, pBuffer);
#    else
    return this->vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::CmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                       VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount,
                                       uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndirectCount fn = validateFunction("vkCmdDrawIndirectCount", this->vkCmdDrawIndirectCount);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
void DeviceTable::CmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                              VkBuffer countBuffer, VkDeviceSize countBufferOffset,
                                              uint32_t maxDrawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndexedIndirectCount fn =
        validateFunction("vkCmdDrawIndexedIndirectCount", this->vkCmdDrawIndexedIndirectCount);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                        stride);
#    endif
}
#endif
#if defined(VK_NV_device_diagnostic_checkpoints)
void DeviceTable::CmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCheckpointNV fn = validateFunction("vkCmdSetCheckpointNV", this->vkCmdSetCheckpointNV);
    fn(commandBuffer, pCheckpointMarker);
#    else
    this->vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
#    endif
}
#endif
#if defined(VK_NV_device_diagnostic_checkpoints)
void DeviceTable::GetQueueCheckpointDataNV(VkQueue queue, uint32_t *pCheckpointDataCount,
                                           VkCheckpointDataNV *pCheckpointData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetQueueCheckpointDataNV fn =
        validateFunction("vkGetQueueCheckpointDataNV", this->vkGetQueueCheckpointDataNV);
    fn(queue, pCheckpointDataCount, pCheckpointData);
#    else
    this->vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding,
                                                     uint32_t bindingCount, const VkBuffer *pBuffers,
                                                     const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindTransformFeedbackBuffersEXT fn =
        validateFunction("vkCmdBindTransformFeedbackBuffersEXT", this->vkCmdBindTransformFeedbackBuffersEXT);
    fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
#    else
    this->vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer,
                                               uint32_t counterBufferCount, const VkBuffer *pCounterBuffers,
                                               const VkDeviceSize *pCounterBufferOffsets) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginTransformFeedbackEXT fn =
        validateFunction("vkCmdBeginTransformFeedbackEXT", this->vkCmdBeginTransformFeedbackEXT);
    fn(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
#    else
    this->vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers,
                                         pCounterBufferOffsets);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer,
                                             uint32_t counterBufferCount, const VkBuffer *pCounterBuffers,
                                             const VkDeviceSize *pCounterBufferOffsets) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndTransformFeedbackEXT fn =
        validateFunction("vkCmdEndTransformFeedbackEXT", this->vkCmdEndTransformFeedbackEXT);
    fn(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
#    else
    this->vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers,
                                       pCounterBufferOffsets);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query,
                                          VkQueryControlFlags flags, uint32_t index) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginQueryIndexedEXT fn =
        validateFunction("vkCmdBeginQueryIndexedEXT", this->vkCmdBeginQueryIndexedEXT);
    fn(commandBuffer, queryPool, query, flags, index);
#    else
    this->vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query,
                                        uint32_t index) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndQueryIndexedEXT fn = validateFunction("vkCmdEndQueryIndexedEXT", this->vkCmdEndQueryIndexedEXT);
    fn(commandBuffer, queryPool, query, index);
#    else
    this->vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
#    endif
}
#endif
#if defined(VK_EXT_transform_feedback)
void DeviceTable::CmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount,
                                              uint32_t firstInstance, VkBuffer counterBuffer,
                                              VkDeviceSize counterBufferOffset, uint32_t counterOffset,
                                              uint32_t vertexStride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndirectByteCountEXT fn =
        validateFunction("vkCmdDrawIndirectByteCountEXT", this->vkCmdDrawIndirectByteCountEXT);
    fn(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
#    else
    this->vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset,
                                        counterOffset, vertexStride);
#    endif
}
#endif
#if (defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2)
void DeviceTable::CmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor,
                                           uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetExclusiveScissorNV fn =
        validateFunction("vkCmdSetExclusiveScissorNV", this->vkCmdSetExclusiveScissorNV);
    fn(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
#    else
    this->vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 241 && ((defined(VK_NV_scissor_exclusive) && VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION >= 2))
void DeviceTable::CmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor,
                                                 uint32_t exclusiveScissorCount,
                                                 const VkBool32 *pExclusiveScissorEnables) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetExclusiveScissorEnableNV fn =
        validateFunction("vkCmdSetExclusiveScissorEnableNV", this->vkCmdSetExclusiveScissorEnableNV);
    fn(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
#    else
    this->vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount,
                                           pExclusiveScissorEnables);
#    endif
}
#endif
#if defined(VK_NV_shading_rate_image)
void DeviceTable::CmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView,
                                            VkImageLayout imageLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindShadingRateImageNV fn =
        validateFunction("vkCmdBindShadingRateImageNV", this->vkCmdBindShadingRateImageNV);
    fn(commandBuffer, imageView, imageLayout);
#    else
    this->vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
#    endif
}
#endif
#if defined(VK_NV_shading_rate_image)
void DeviceTable::CmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport,
                                                     uint32_t viewportCount,
                                                     const VkShadingRatePaletteNV *pShadingRatePalettes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportShadingRatePaletteNV fn =
        validateFunction("vkCmdSetViewportShadingRatePaletteNV", this->vkCmdSetViewportShadingRatePaletteNV);
    fn(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
#    else
    this->vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
#    endif
}
#endif
#if defined(VK_NV_shading_rate_image)
void DeviceTable::CmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType,
                                            uint32_t customSampleOrderCount,
                                            const VkCoarseSampleOrderCustomNV *pCustomSampleOrders) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoarseSampleOrderNV fn =
        validateFunction("vkCmdSetCoarseSampleOrderNV", this->vkCmdSetCoarseSampleOrderNV);
    fn(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
#    else
    this->vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
#    endif
}
#endif
#if defined(VK_NV_mesh_shader)
void DeviceTable::CmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksNV fn = validateFunction("vkCmdDrawMeshTasksNV", this->vkCmdDrawMeshTasksNV);
    fn(commandBuffer, taskCount, firstTask);
#    else
    this->vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
#    endif
}
#endif
#if defined(VK_NV_mesh_shader)
void DeviceTable::CmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                             uint32_t drawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksIndirectNV fn =
        validateFunction("vkCmdDrawMeshTasksIndirectNV", this->vkCmdDrawMeshTasksIndirectNV);
    fn(commandBuffer, buffer, offset, drawCount, stride);
#    else
    this->vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
#    endif
}
#endif
#if (defined(VK_NV_mesh_shader) && (defined(VK_KHR_draw_indirect_count) || defined(VKIT_API_VERSION_1_2)))
void DeviceTable::CmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                                  VkBuffer countBuffer, VkDeviceSize countBufferOffset,
                                                  uint32_t maxDrawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksIndirectCountNV fn =
        validateFunction("vkCmdDrawMeshTasksIndirectCountNV", this->vkCmdDrawMeshTasksIndirectCountNV);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                            stride);
#    endif
}
#endif
#if defined(VK_EXT_mesh_shader)
void DeviceTable::CmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
                                      uint32_t groupCountZ) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksEXT fn = validateFunction("vkCmdDrawMeshTasksEXT", this->vkCmdDrawMeshTasksEXT);
    fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
#    else
    this->vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
#    endif
}
#endif
#if defined(VK_EXT_mesh_shader)
void DeviceTable::CmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                              uint32_t drawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksIndirectEXT fn =
        validateFunction("vkCmdDrawMeshTasksIndirectEXT", this->vkCmdDrawMeshTasksIndirectEXT);
    fn(commandBuffer, buffer, offset, drawCount, stride);
#    else
    this->vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
#    endif
}
#endif
#if (defined(VK_EXT_mesh_shader) && (defined(VK_KHR_draw_indirect_count) || defined(VKIT_API_VERSION_1_2)))
void DeviceTable::CmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                                   VkBuffer countBuffer, VkDeviceSize countBufferOffset,
                                                   uint32_t maxDrawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawMeshTasksIndirectCountEXT fn =
        validateFunction("vkCmdDrawMeshTasksIndirectCountEXT", this->vkCmdDrawMeshTasksIndirectCountEXT);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset,
                                             maxDrawCount, stride);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::CompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCompileDeferredNV fn = validateFunction("vkCompileDeferredNV", this->vkCompileDeferredNV);
    return fn(device, pipeline, shader);
#    else
    return this->vkCompileDeferredNV(device, pipeline, shader);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::CreateAccelerationStructureNV(VkDevice device,
                                                    const VkAccelerationStructureCreateInfoNV *pCreateInfo,
                                                    const VkAllocationCallbacks *pAllocator,
                                                    VkAccelerationStructureNV *pAccelerationStructure) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateAccelerationStructureNV fn =
        validateFunction("vkCreateAccelerationStructureNV", this->vkCreateAccelerationStructureNV);
    return fn(device, pCreateInfo, pAllocator, pAccelerationStructure);
#    else
    return this->vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
#    endif
}
#endif
#if defined(VK_HUAWEI_invocation_mask)
void DeviceTable::CmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView,
                                              VkImageLayout imageLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindInvocationMaskHUAWEI fn =
        validateFunction("vkCmdBindInvocationMaskHUAWEI", this->vkCmdBindInvocationMaskHUAWEI);
    fn(commandBuffer, imageView, imageLayout);
#    else
    this->vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::DestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure,
                                                  const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyAccelerationStructureKHR fn =
        validateFunction("vkDestroyAccelerationStructureKHR", this->vkDestroyAccelerationStructureKHR);
    fn(device, accelerationStructure, pAllocator);
#    else
    this->vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::DestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure,
                                                 const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyAccelerationStructureNV fn =
        validateFunction("vkDestroyAccelerationStructureNV", this->vkDestroyAccelerationStructureNV);
    fn(device, accelerationStructure, pAllocator);
#    else
    this->vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::GetAccelerationStructureMemoryRequirementsNV(
    VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo,
    VkMemoryRequirements2KHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAccelerationStructureMemoryRequirementsNV fn = validateFunction(
        "vkGetAccelerationStructureMemoryRequirementsNV", this->vkGetAccelerationStructureMemoryRequirementsNV);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::BindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount,
                                                        const VkBindAccelerationStructureMemoryInfoNV *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindAccelerationStructureMemoryNV fn =
        validateFunction("vkBindAccelerationStructureMemoryNV", this->vkBindAccelerationStructureMemoryNV);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::CmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst,
                                                 VkAccelerationStructureNV src,
                                                 VkCopyAccelerationStructureModeKHR mode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyAccelerationStructureNV fn =
        validateFunction("vkCmdCopyAccelerationStructureNV", this->vkCmdCopyAccelerationStructureNV);
    fn(commandBuffer, dst, src, mode);
#    else
    this->vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer,
                                                  const VkCopyAccelerationStructureInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyAccelerationStructureKHR fn =
        validateFunction("vkCmdCopyAccelerationStructureKHR", this->vkCmdCopyAccelerationStructureKHR);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::CopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                                   const VkCopyAccelerationStructureInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyAccelerationStructureKHR fn =
        validateFunction("vkCopyAccelerationStructureKHR", this->vkCopyAccelerationStructureKHR);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer,
                                                          const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyAccelerationStructureToMemoryKHR fn =
        validateFunction("vkCmdCopyAccelerationStructureToMemoryKHR", this->vkCmdCopyAccelerationStructureToMemoryKHR);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::CopyAccelerationStructureToMemoryKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyAccelerationStructureToMemoryKHR fn =
        validateFunction("vkCopyAccelerationStructureToMemoryKHR", this->vkCopyAccelerationStructureToMemoryKHR);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer,
                                                          const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMemoryToAccelerationStructureKHR fn =
        validateFunction("vkCmdCopyMemoryToAccelerationStructureKHR", this->vkCmdCopyMemoryToAccelerationStructureKHR);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::CopyMemoryToAccelerationStructureKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation,
    const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMemoryToAccelerationStructureKHR fn =
        validateFunction("vkCopyMemoryToAccelerationStructureKHR", this->vkCopyMemoryToAccelerationStructureKHR);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer,
                                                              uint32_t accelerationStructureCount,
                                                              const VkAccelerationStructureKHR *pAccelerationStructures,
                                                              VkQueryType queryType, VkQueryPool queryPool,
                                                              uint32_t firstQuery) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteAccelerationStructuresPropertiesKHR fn = validateFunction(
        "vkCmdWriteAccelerationStructuresPropertiesKHR", this->vkCmdWriteAccelerationStructuresPropertiesKHR);
    fn(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
#    else
    this->vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount,
                                                        pAccelerationStructures, queryType, queryPool, firstQuery);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::CmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer,
                                                             uint32_t accelerationStructureCount,
                                                             const VkAccelerationStructureNV *pAccelerationStructures,
                                                             VkQueryType queryType, VkQueryPool queryPool,
                                                             uint32_t firstQuery) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteAccelerationStructuresPropertiesNV fn = validateFunction(
        "vkCmdWriteAccelerationStructuresPropertiesNV", this->vkCmdWriteAccelerationStructuresPropertiesNV);
    fn(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
#    else
    this->vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount,
                                                       pAccelerationStructures, queryType, queryPool, firstQuery);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::CmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer,
                                                  const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData,
                                                  VkDeviceSize instanceOffset, VkBool32 update,
                                                  VkAccelerationStructureNV dst, VkAccelerationStructureNV src,
                                                  VkBuffer scratch, VkDeviceSize scratchOffset) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildAccelerationStructureNV fn =
        validateFunction("vkCmdBuildAccelerationStructureNV", this->vkCmdBuildAccelerationStructureNV);
    fn(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
#    else
    this->vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src,
                                            scratch, scratchOffset);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::WriteAccelerationStructuresPropertiesKHR(
    VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR *pAccelerationStructures,
    VkQueryType queryType, size_t dataSize, void *pData, size_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWriteAccelerationStructuresPropertiesKHR fn = validateFunction(
        "vkWriteAccelerationStructuresPropertiesKHR", this->vkWriteAccelerationStructuresPropertiesKHR);
    return fn(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
#    else
    return this->vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures,
                                                            queryType, dataSize, pData, stride);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
void DeviceTable::CmdTraceRaysKHR(VkCommandBuffer commandBuffer,
                                  const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                  const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                  const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                  const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable, uint32_t width,
                                  uint32_t height, uint32_t depth) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdTraceRaysKHR fn = validateFunction("vkCmdTraceRaysKHR", this->vkCmdTraceRaysKHR);
    fn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable,
       pCallableShaderBindingTable, width, height, depth);
#    else
    this->vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable,
                            pCallableShaderBindingTable, width, height, depth);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
void DeviceTable::CmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer,
                                 VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer,
                                 VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride,
                                 VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset,
                                 VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer,
                                 VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride,
                                 uint32_t width, uint32_t height, uint32_t depth) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdTraceRaysNV fn = validateFunction("vkCmdTraceRaysNV", this->vkCmdTraceRaysNV);
    fn(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer,
       missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset,
       hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset,
       callableShaderBindingStride, width, height, depth);
#    else
    this->vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset,
                           missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride,
                           hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride,
                           callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride,
                           width, height, depth);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
VkResult DeviceTable::GetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup,
                                                         uint32_t groupCount, size_t dataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRayTracingShaderGroupHandlesKHR fn =
        validateFunction("vkGetRayTracingShaderGroupHandlesKHR", this->vkGetRayTracingShaderGroupHandlesKHR);
    return fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
#    else
    return this->vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
VkResult DeviceTable::GetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline,
                                                                      uint32_t firstGroup, uint32_t groupCount,
                                                                      size_t dataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR fn = validateFunction(
        "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", this->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR);
    return fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
#    else
    return this->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize,
                                                                   pData);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::GetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure,
                                                       size_t dataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAccelerationStructureHandleNV fn =
        validateFunction("vkGetAccelerationStructureHandleNV", this->vkGetAccelerationStructureHandleNV);
    return fn(device, accelerationStructure, dataSize, pData);
#    else
    return this->vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::CreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache,
                                                  uint32_t createInfoCount,
                                                  const VkRayTracingPipelineCreateInfoNV *pCreateInfos,
                                                  const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateRayTracingPipelinesNV fn =
        validateFunction("vkCreateRayTracingPipelinesNV", this->vkCreateRayTracingPipelinesNV);
    return fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#    else
    return this->vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                               pPipelines);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
VkResult DeviceTable::CreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                                   VkPipelineCache pipelineCache, uint32_t createInfoCount,
                                                   const VkRayTracingPipelineCreateInfoKHR *pCreateInfos,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkPipeline *pPipelines) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateRayTracingPipelinesKHR fn =
        validateFunction("vkCreateRayTracingPipelinesKHR", this->vkCreateRayTracingPipelinesKHR);
    return fn(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#    else
    return this->vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos,
                                                pAllocator, pPipelines);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
void DeviceTable::CmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer,
                                          const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                          const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                          const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                          const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
                                          VkDeviceAddress indirectDeviceAddress) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdTraceRaysIndirectKHR fn =
        validateFunction("vkCmdTraceRaysIndirectKHR", this->vkCmdTraceRaysIndirectKHR);
    fn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable,
       pCallableShaderBindingTable, indirectDeviceAddress);
#    else
    this->vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable,
                                    pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
#    endif
}
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline))
void DeviceTable::CmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdTraceRaysIndirect2KHR fn =
        validateFunction("vkCmdTraceRaysIndirect2KHR", this->vkCmdTraceRaysIndirect2KHR);
    fn(commandBuffer, indirectDeviceAddress);
#    else
    this->vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
#    endif
}
#endif
#if defined(VK_NV_cluster_acceleration_structure)
void DeviceTable::GetClusterAccelerationStructureBuildSizesNV(VkDevice device,
                                                              const VkClusterAccelerationStructureInputInfoNV *pInfo,
                                                              VkAccelerationStructureBuildSizesInfoKHR *pSizeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetClusterAccelerationStructureBuildSizesNV fn = validateFunction(
        "vkGetClusterAccelerationStructureBuildSizesNV", this->vkGetClusterAccelerationStructureBuildSizesNV);
    fn(device, pInfo, pSizeInfo);
#    else
    this->vkGetClusterAccelerationStructureBuildSizesNV(device, pInfo, pSizeInfo);
#    endif
}
#endif
#if defined(VK_NV_cluster_acceleration_structure)
void DeviceTable::CmdBuildClusterAccelerationStructureIndirectNV(
    VkCommandBuffer commandBuffer, const VkClusterAccelerationStructureCommandsInfoNV *pCommandInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildClusterAccelerationStructureIndirectNV fn = validateFunction(
        "vkCmdBuildClusterAccelerationStructureIndirectNV", this->vkCmdBuildClusterAccelerationStructureIndirectNV);
    fn(commandBuffer, pCommandInfos);
#    else
    this->vkCmdBuildClusterAccelerationStructureIndirectNV(commandBuffer, pCommandInfos);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::GetDeviceAccelerationStructureCompatibilityKHR(
    VkDevice device, const VkAccelerationStructureVersionInfoKHR *pVersionInfo,
    VkAccelerationStructureCompatibilityKHR *pCompatibility) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceAccelerationStructureCompatibilityKHR fn = validateFunction(
        "vkGetDeviceAccelerationStructureCompatibilityKHR", this->vkGetDeviceAccelerationStructureCompatibilityKHR);
    fn(device, pVersionInfo, pCompatibility);
#    else
    this->vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
VkDeviceSize DeviceTable::GetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group,
                                                               VkShaderGroupShaderKHR groupShader) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRayTracingShaderGroupStackSizeKHR fn =
        validateFunction("vkGetRayTracingShaderGroupStackSizeKHR", this->vkGetRayTracingShaderGroupStackSizeKHR);
    return fn(device, pipeline, group, groupShader);
#    else
    return this->vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
#    endif
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline)
void DeviceTable::CmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRayTracingPipelineStackSizeKHR fn =
        validateFunction("vkCmdSetRayTracingPipelineStackSizeKHR", this->vkCmdSetRayTracingPipelineStackSizeKHR);
    fn(commandBuffer, pipelineStackSize);
#    else
    this->vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
#    endif
}
#endif
#if defined(VK_NVX_image_view_handle)
uint32_t DeviceTable::GetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageViewHandleNVX fn = validateFunction("vkGetImageViewHandleNVX", this->vkGetImageViewHandleNVX);
    return fn(device, pInfo);
#    else
    return this->vkGetImageViewHandleNVX(device, pInfo);
#    endif
}
#endif
#if (defined(VK_NVX_image_view_handle) && VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 3)
uint64_t DeviceTable::GetImageViewHandle64NVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageViewHandle64NVX fn =
        validateFunction("vkGetImageViewHandle64NVX", this->vkGetImageViewHandle64NVX);
    return fn(device, pInfo);
#    else
    return this->vkGetImageViewHandle64NVX(device, pInfo);
#    endif
}
#endif
#if (defined(VK_NVX_image_view_handle) && VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 3 &&                                \
     VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION >= 2)
VkResult DeviceTable::GetImageViewAddressNVX(VkDevice device, VkImageView imageView,
                                             VkImageViewAddressPropertiesNVX *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageViewAddressNVX fn =
        validateFunction("vkGetImageViewAddressNVX", this->vkGetImageViewAddressNVX);
    return fn(device, imageView, pProperties);
#    else
    return this->vkGetImageViewAddressNVX(device, imageView, pProperties);
#    endif
}
#endif
#if (defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_device_group) || defined(VKIT_API_VERSION_1_1)))
VkResult DeviceTable::GetDeviceGroupSurfacePresentModes2EXT(VkDevice device,
                                                            const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                            VkDeviceGroupPresentModeFlagsKHR *pModes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceGroupSurfacePresentModes2EXT fn =
        validateFunction("vkGetDeviceGroupSurfacePresentModes2EXT", this->vkGetDeviceGroupSurfacePresentModes2EXT);
    return fn(device, pSurfaceInfo, pModes);
#    else
    return this->vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
#    endif
}
#endif
#if defined(VK_EXT_full_screen_exclusive)
VkResult DeviceTable::AcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireFullScreenExclusiveModeEXT fn =
        validateFunction("vkAcquireFullScreenExclusiveModeEXT", this->vkAcquireFullScreenExclusiveModeEXT);
    return fn(device, swapchain);
#    else
    return this->vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
#    endif
}
#endif
#if defined(VK_EXT_full_screen_exclusive)
VkResult DeviceTable::ReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseFullScreenExclusiveModeEXT fn =
        validateFunction("vkReleaseFullScreenExclusiveModeEXT", this->vkReleaseFullScreenExclusiveModeEXT);
    return fn(device, swapchain);
#    else
    return this->vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
#    endif
}
#endif
#if defined(VK_KHR_performance_query)
VkResult DeviceTable::AcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquireProfilingLockKHR fn =
        validateFunction("vkAcquireProfilingLockKHR", this->vkAcquireProfilingLockKHR);
    return fn(device, pInfo);
#    else
    return this->vkAcquireProfilingLockKHR(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_performance_query)
void DeviceTable::ReleaseProfilingLockKHR(VkDevice device) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseProfilingLockKHR fn =
        validateFunction("vkReleaseProfilingLockKHR", this->vkReleaseProfilingLockKHR);
    fn(device);
#    else
    this->vkReleaseProfilingLockKHR(device);
#    endif
}
#endif
#if defined(VK_EXT_image_drm_format_modifier)
VkResult DeviceTable::GetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image,
                                                             VkImageDrmFormatModifierPropertiesEXT *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageDrmFormatModifierPropertiesEXT fn =
        validateFunction("vkGetImageDrmFormatModifierPropertiesEXT", this->vkGetImageDrmFormatModifierPropertiesEXT);
    return fn(device, image, pProperties);
#    else
    return this->vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
uint64_t DeviceTable::GetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferOpaqueCaptureAddress fn =
        validateFunction("vkGetBufferOpaqueCaptureAddress", this->vkGetBufferOpaqueCaptureAddress);
    return fn(device, pInfo);
#    else
    return this->vkGetBufferOpaqueCaptureAddress(device, pInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
VkDeviceAddress DeviceTable::GetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferDeviceAddress fn =
        validateFunction("vkGetBufferDeviceAddress", this->vkGetBufferDeviceAddress);
    return fn(device, pInfo);
#    else
    return this->vkGetBufferDeviceAddress(device, pInfo);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::InitializePerformanceApiINTEL(VkDevice device,
                                                    const VkInitializePerformanceApiInfoINTEL *pInitializeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkInitializePerformanceApiINTEL fn =
        validateFunction("vkInitializePerformanceApiINTEL", this->vkInitializePerformanceApiINTEL);
    return fn(device, pInitializeInfo);
#    else
    return this->vkInitializePerformanceApiINTEL(device, pInitializeInfo);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
void DeviceTable::UninitializePerformanceApiINTEL(VkDevice device) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUninitializePerformanceApiINTEL fn =
        validateFunction("vkUninitializePerformanceApiINTEL", this->vkUninitializePerformanceApiINTEL);
    fn(device);
#    else
    this->vkUninitializePerformanceApiINTEL(device);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::CmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer,
                                                   const VkPerformanceMarkerInfoINTEL *pMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPerformanceMarkerINTEL fn =
        validateFunction("vkCmdSetPerformanceMarkerINTEL", this->vkCmdSetPerformanceMarkerINTEL);
    return fn(commandBuffer, pMarkerInfo);
#    else
    return this->vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::CmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer,
                                                         const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPerformanceStreamMarkerINTEL fn =
        validateFunction("vkCmdSetPerformanceStreamMarkerINTEL", this->vkCmdSetPerformanceStreamMarkerINTEL);
    return fn(commandBuffer, pMarkerInfo);
#    else
    return this->vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::CmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer,
                                                     const VkPerformanceOverrideInfoINTEL *pOverrideInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPerformanceOverrideINTEL fn =
        validateFunction("vkCmdSetPerformanceOverrideINTEL", this->vkCmdSetPerformanceOverrideINTEL);
    return fn(commandBuffer, pOverrideInfo);
#    else
    return this->vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::AcquirePerformanceConfigurationINTEL(
    VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo,
    VkPerformanceConfigurationINTEL *pConfiguration) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAcquirePerformanceConfigurationINTEL fn =
        validateFunction("vkAcquirePerformanceConfigurationINTEL", this->vkAcquirePerformanceConfigurationINTEL);
    return fn(device, pAcquireInfo, pConfiguration);
#    else
    return this->vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::ReleasePerformanceConfigurationINTEL(VkDevice device,
                                                           VkPerformanceConfigurationINTEL configuration) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleasePerformanceConfigurationINTEL fn =
        validateFunction("vkReleasePerformanceConfigurationINTEL", this->vkReleasePerformanceConfigurationINTEL);
    return fn(device, configuration);
#    else
    return this->vkReleasePerformanceConfigurationINTEL(device, configuration);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::QueueSetPerformanceConfigurationINTEL(VkQueue queue,
                                                            VkPerformanceConfigurationINTEL configuration) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueSetPerformanceConfigurationINTEL fn =
        validateFunction("vkQueueSetPerformanceConfigurationINTEL", this->vkQueueSetPerformanceConfigurationINTEL);
    return fn(queue, configuration);
#    else
    return this->vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
#    endif
}
#endif
#if defined(VK_INTEL_performance_query)
VkResult DeviceTable::GetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter,
                                                   VkPerformanceValueINTEL *pValue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPerformanceParameterINTEL fn =
        validateFunction("vkGetPerformanceParameterINTEL", this->vkGetPerformanceParameterINTEL);
    return fn(device, parameter, pValue);
#    else
    return this->vkGetPerformanceParameterINTEL(device, parameter, pValue);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_2)
uint64_t DeviceTable::GetDeviceMemoryOpaqueCaptureAddress(VkDevice device,
                                                          const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceMemoryOpaqueCaptureAddress fn =
        validateFunction("vkGetDeviceMemoryOpaqueCaptureAddress", this->vkGetDeviceMemoryOpaqueCaptureAddress);
    return fn(device, pInfo);
#    else
    return this->vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_executable_properties)
VkResult DeviceTable::GetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR *pPipelineInfo,
                                                         uint32_t *pExecutableCount,
                                                         VkPipelineExecutablePropertiesKHR *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineExecutablePropertiesKHR fn =
        validateFunction("vkGetPipelineExecutablePropertiesKHR", this->vkGetPipelineExecutablePropertiesKHR);
    return fn(device, pPipelineInfo, pExecutableCount, pProperties);
#    else
    return this->vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_executable_properties)
VkResult DeviceTable::GetPipelineExecutableStatisticsKHR(VkDevice device,
                                                         const VkPipelineExecutableInfoKHR *pExecutableInfo,
                                                         uint32_t *pStatisticCount,
                                                         VkPipelineExecutableStatisticKHR *pStatistics) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineExecutableStatisticsKHR fn =
        validateFunction("vkGetPipelineExecutableStatisticsKHR", this->vkGetPipelineExecutableStatisticsKHR);
    return fn(device, pExecutableInfo, pStatisticCount, pStatistics);
#    else
    return this->vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
#    endif
}
#endif
#if defined(VK_KHR_pipeline_executable_properties)
VkResult DeviceTable::GetPipelineExecutableInternalRepresentationsKHR(
    VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineExecutableInternalRepresentationsKHR fn = validateFunction(
        "vkGetPipelineExecutableInternalRepresentationsKHR", this->vkGetPipelineExecutableInternalRepresentationsKHR);
    return fn(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
#    else
    return this->vkGetPipelineExecutableInternalRepresentationsKHR(
        device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdSetLineStipple(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor,
                                    uint16_t lineStipplePattern) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineStipple fn = validateFunction("vkCmdSetLineStipple", this->vkCmdSetLineStipple);
    fn(commandBuffer, lineStippleFactor, lineStipplePattern);
#    else
    this->vkCmdSetLineStipple(commandBuffer, lineStippleFactor, lineStipplePattern);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::CreateAccelerationStructureKHR(VkDevice device,
                                                     const VkAccelerationStructureCreateInfoKHR *pCreateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkAccelerationStructureKHR *pAccelerationStructure) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateAccelerationStructureKHR fn =
        validateFunction("vkCreateAccelerationStructureKHR", this->vkCreateAccelerationStructureKHR);
    return fn(device, pCreateInfo, pAllocator, pAccelerationStructure);
#    else
    return this->vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdBuildAccelerationStructuresKHR(
    VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildAccelerationStructuresKHR fn =
        validateFunction("vkCmdBuildAccelerationStructuresKHR", this->vkCmdBuildAccelerationStructuresKHR);
    fn(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
#    else
    this->vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::CmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount,
                                                            const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
                                                            const VkDeviceAddress *pIndirectDeviceAddresses,
                                                            const uint32_t *pIndirectStrides,
                                                            const uint32_t *const *ppMaxPrimitiveCounts) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildAccelerationStructuresIndirectKHR fn = validateFunction(
        "vkCmdBuildAccelerationStructuresIndirectKHR", this->vkCmdBuildAccelerationStructuresIndirectKHR);
    fn(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
#    else
    this->vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses,
                                                      pIndirectStrides, ppMaxPrimitiveCounts);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkResult DeviceTable::BuildAccelerationStructuresKHR(
    VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBuildAccelerationStructuresKHR fn =
        validateFunction("vkBuildAccelerationStructuresKHR", this->vkBuildAccelerationStructuresKHR);
    return fn(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
#    else
    return this->vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
VkDeviceAddress DeviceTable::GetAccelerationStructureDeviceAddressKHR(
    VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAccelerationStructureDeviceAddressKHR fn = validateFunction(
        "vkGetAccelerationStructureDeviceAddressKHR", this->vkGetAccelerationStructureDeviceAddressKHR);
    return fn(device, pInfo);
#    else
    return this->vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_deferred_host_operations)
VkResult DeviceTable::CreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks *pAllocator,
                                                 VkDeferredOperationKHR *pDeferredOperation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDeferredOperationKHR fn =
        validateFunction("vkCreateDeferredOperationKHR", this->vkCreateDeferredOperationKHR);
    return fn(device, pAllocator, pDeferredOperation);
#    else
    return this->vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
#    endif
}
#endif
#if defined(VK_KHR_deferred_host_operations)
void DeviceTable::DestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation,
                                              const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDeferredOperationKHR fn =
        validateFunction("vkDestroyDeferredOperationKHR", this->vkDestroyDeferredOperationKHR);
    fn(device, operation, pAllocator);
#    else
    this->vkDestroyDeferredOperationKHR(device, operation, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_deferred_host_operations)
uint32_t DeviceTable::GetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeferredOperationMaxConcurrencyKHR fn =
        validateFunction("vkGetDeferredOperationMaxConcurrencyKHR", this->vkGetDeferredOperationMaxConcurrencyKHR);
    return fn(device, operation);
#    else
    return this->vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
#    endif
}
#endif
#if defined(VK_KHR_deferred_host_operations)
VkResult DeviceTable::GetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeferredOperationResultKHR fn =
        validateFunction("vkGetDeferredOperationResultKHR", this->vkGetDeferredOperationResultKHR);
    return fn(device, operation);
#    else
    return this->vkGetDeferredOperationResultKHR(device, operation);
#    endif
}
#endif
#if defined(VK_KHR_deferred_host_operations)
VkResult DeviceTable::DeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDeferredOperationJoinKHR fn =
        validateFunction("vkDeferredOperationJoinKHR", this->vkDeferredOperationJoinKHR);
    return fn(device, operation);
#    else
    return this->vkDeferredOperationJoinKHR(device, operation);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands_compute)
void DeviceTable::GetPipelineIndirectMemoryRequirementsNV(VkDevice device,
                                                          const VkComputePipelineCreateInfo *pCreateInfo,
                                                          VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineIndirectMemoryRequirementsNV fn =
        validateFunction("vkGetPipelineIndirectMemoryRequirementsNV", this->vkGetPipelineIndirectMemoryRequirementsNV);
    fn(device, pCreateInfo, pMemoryRequirements);
#    else
    this->vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_NV_device_generated_commands_compute)
VkDeviceAddress DeviceTable::GetPipelineIndirectDeviceAddressNV(
    VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelineIndirectDeviceAddressNV fn =
        validateFunction("vkGetPipelineIndirectDeviceAddressNV", this->vkGetPipelineIndirectDeviceAddressNV);
    return fn(device, pInfo);
#    else
    return this->vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
#    endif
}
#endif
#if defined(VK_AMD_anti_lag)
void DeviceTable::AntiLagUpdateAMD(VkDevice device, const VkAntiLagDataAMD *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkAntiLagUpdateAMD fn = validateFunction("vkAntiLagUpdateAMD", this->vkAntiLagUpdateAMD);
    fn(device, pData);
#    else
    this->vkAntiLagUpdateAMD(device, pData);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCullMode fn = validateFunction("vkCmdSetCullMode", this->vkCmdSetCullMode);
    fn(commandBuffer, cullMode);
#    else
    this->vkCmdSetCullMode(commandBuffer, cullMode);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetFrontFace fn = validateFunction("vkCmdSetFrontFace", this->vkCmdSetFrontFace);
    fn(commandBuffer, frontFace);
#    else
    this->vkCmdSetFrontFace(commandBuffer, frontFace);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPrimitiveTopology fn =
        validateFunction("vkCmdSetPrimitiveTopology", this->vkCmdSetPrimitiveTopology);
    fn(commandBuffer, primitiveTopology);
#    else
    this->vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount,
                                          const VkViewport *pViewports) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportWithCount fn =
        validateFunction("vkCmdSetViewportWithCount", this->vkCmdSetViewportWithCount);
    fn(commandBuffer, viewportCount, pViewports);
#    else
    this->vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount,
                                         const VkRect2D *pScissors) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetScissorWithCount fn =
        validateFunction("vkCmdSetScissorWithCount", this->vkCmdSetScissorWithCount);
    fn(commandBuffer, scissorCount, pScissors);
#    else
    this->vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                      VkDeviceSize size, VkIndexType indexType) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindIndexBuffer2 fn = validateFunction("vkCmdBindIndexBuffer2", this->vkCmdBindIndexBuffer2);
    fn(commandBuffer, buffer, offset, size, indexType);
#    else
    this->vkCmdBindIndexBuffer2(commandBuffer, buffer, offset, size, indexType);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,
                                        const VkBuffer *pBuffers, const VkDeviceSize *pOffsets,
                                        const VkDeviceSize *pSizes, const VkDeviceSize *pStrides) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindVertexBuffers2 fn = validateFunction("vkCmdBindVertexBuffers2", this->vkCmdBindVertexBuffers2);
    fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
#    else
    this->vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthTestEnable fn = validateFunction("vkCmdSetDepthTestEnable", this->vkCmdSetDepthTestEnable);
    fn(commandBuffer, depthTestEnable);
#    else
    this->vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthWriteEnable fn =
        validateFunction("vkCmdSetDepthWriteEnable", this->vkCmdSetDepthWriteEnable);
    fn(commandBuffer, depthWriteEnable);
#    else
    this->vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthCompareOp fn = validateFunction("vkCmdSetDepthCompareOp", this->vkCmdSetDepthCompareOp);
    fn(commandBuffer, depthCompareOp);
#    else
    this->vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBoundsTestEnable fn =
        validateFunction("vkCmdSetDepthBoundsTestEnable", this->vkCmdSetDepthBoundsTestEnable);
    fn(commandBuffer, depthBoundsTestEnable);
#    else
    this->vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilTestEnable fn =
        validateFunction("vkCmdSetStencilTestEnable", this->vkCmdSetStencilTestEnable);
    fn(commandBuffer, stencilTestEnable);
#    else
    this->vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp,
                                  VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilOp fn = validateFunction("vkCmdSetStencilOp", this->vkCmdSetStencilOp);
    fn(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
#    else
    this->vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPatchControlPointsEXT fn =
        validateFunction("vkCmdSetPatchControlPointsEXT", this->vkCmdSetPatchControlPointsEXT);
    fn(commandBuffer, patchControlPoints);
#    else
    this->vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRasterizerDiscardEnable fn =
        validateFunction("vkCmdSetRasterizerDiscardEnable", this->vkCmdSetRasterizerDiscardEnable);
    fn(commandBuffer, rasterizerDiscardEnable);
#    else
    this->vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBiasEnable fn = validateFunction("vkCmdSetDepthBiasEnable", this->vkCmdSetDepthBiasEnable);
    fn(commandBuffer, depthBiasEnable);
#    else
    this->vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLogicOpEXT fn = validateFunction("vkCmdSetLogicOpEXT", this->vkCmdSetLogicOpEXT);
    fn(commandBuffer, logicOp);
#    else
    this->vkCmdSetLogicOpEXT(commandBuffer, logicOp);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPrimitiveRestartEnable fn =
        validateFunction("vkCmdSetPrimitiveRestartEnable", this->vkCmdSetPrimitiveRestartEnable);
    fn(commandBuffer, primitiveRestartEnable);
#    else
    this->vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_maintenance2) || defined(VKIT_API_VERSION_1_1))) ||    \
    defined(VK_EXT_shader_object)
void DeviceTable::CmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer,
                                                    VkTessellationDomainOrigin domainOrigin) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetTessellationDomainOriginEXT fn =
        validateFunction("vkCmdSetTessellationDomainOriginEXT", this->vkCmdSetTessellationDomainOriginEXT);
    fn(commandBuffer, domainOrigin);
#    else
    this->vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthClampEnableEXT fn =
        validateFunction("vkCmdSetDepthClampEnableEXT", this->vkCmdSetDepthClampEnableEXT);
    fn(commandBuffer, depthClampEnable);
#    else
    this->vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPolygonModeEXT fn = validateFunction("vkCmdSetPolygonModeEXT", this->vkCmdSetPolygonModeEXT);
    fn(commandBuffer, polygonMode);
#    else
    this->vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer,
                                                VkSampleCountFlagBits rasterizationSamples) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRasterizationSamplesEXT fn =
        validateFunction("vkCmdSetRasterizationSamplesEXT", this->vkCmdSetRasterizationSamplesEXT);
    fn(commandBuffer, rasterizationSamples);
#    else
    this->vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples,
                                      const VkSampleMask *pSampleMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetSampleMaskEXT fn = validateFunction("vkCmdSetSampleMaskEXT", this->vkCmdSetSampleMaskEXT);
    fn(commandBuffer, samples, pSampleMask);
#    else
    this->vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetAlphaToCoverageEnableEXT fn =
        validateFunction("vkCmdSetAlphaToCoverageEnableEXT", this->vkCmdSetAlphaToCoverageEnableEXT);
    fn(commandBuffer, alphaToCoverageEnable);
#    else
    this->vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetAlphaToOneEnableEXT fn =
        validateFunction("vkCmdSetAlphaToOneEnableEXT", this->vkCmdSetAlphaToOneEnableEXT);
    fn(commandBuffer, alphaToOneEnable);
#    else
    this->vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLogicOpEnableEXT fn =
        validateFunction("vkCmdSetLogicOpEnableEXT", this->vkCmdSetLogicOpEnableEXT);
    fn(commandBuffer, logicOpEnable);
#    else
    this->vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment,
                                            uint32_t attachmentCount, const VkBool32 *pColorBlendEnables) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetColorBlendEnableEXT fn =
        validateFunction("vkCmdSetColorBlendEnableEXT", this->vkCmdSetColorBlendEnableEXT);
    fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
#    else
    this->vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment,
                                              uint32_t attachmentCount,
                                              const VkColorBlendEquationEXT *pColorBlendEquations) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetColorBlendEquationEXT fn =
        validateFunction("vkCmdSetColorBlendEquationEXT", this->vkCmdSetColorBlendEquationEXT);
    fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
#    else
    this->vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state3) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment,
                                          uint32_t attachmentCount, const VkColorComponentFlags *pColorWriteMasks) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetColorWriteMaskEXT fn =
        validateFunction("vkCmdSetColorWriteMaskEXT", this->vkCmdSetColorWriteMaskEXT);
    fn(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
#    else
    this->vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_transform_feedback)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_transform_feedback))
void DeviceTable::CmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRasterizationStreamEXT fn =
        validateFunction("vkCmdSetRasterizationStreamEXT", this->vkCmdSetRasterizationStreamEXT);
    fn(commandBuffer, rasterizationStream);
#    else
    this->vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) ||                         \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
void DeviceTable::CmdSetConservativeRasterizationModeEXT(
    VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetConservativeRasterizationModeEXT fn =
        validateFunction("vkCmdSetConservativeRasterizationModeEXT", this->vkCmdSetConservativeRasterizationModeEXT);
    fn(commandBuffer, conservativeRasterizationMode);
#    else
    this->vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_conservative_rasterization)) ||                         \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_conservative_rasterization))
void DeviceTable::CmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer,
                                                            float extraPrimitiveOverestimationSize) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT fn = validateFunction(
        "vkCmdSetExtraPrimitiveOverestimationSizeEXT", this->vkCmdSetExtraPrimitiveOverestimationSizeEXT);
    fn(commandBuffer, extraPrimitiveOverestimationSize);
#    else
    this->vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_enable)) ||                                  \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_enable))
void DeviceTable::CmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthClipEnableEXT fn =
        validateFunction("vkCmdSetDepthClipEnableEXT", this->vkCmdSetDepthClipEnableEXT);
    fn(commandBuffer, depthClipEnable);
#    else
    this->vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_sample_locations)) ||                                   \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_sample_locations))
void DeviceTable::CmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetSampleLocationsEnableEXT fn =
        validateFunction("vkCmdSetSampleLocationsEnableEXT", this->vkCmdSetSampleLocationsEnableEXT);
    fn(commandBuffer, sampleLocationsEnable);
#    else
    this->vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_blend_operation_advanced)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_blend_operation_advanced))
void DeviceTable::CmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment,
                                              uint32_t attachmentCount,
                                              const VkColorBlendAdvancedEXT *pColorBlendAdvanced) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetColorBlendAdvancedEXT fn =
        validateFunction("vkCmdSetColorBlendAdvancedEXT", this->vkCmdSetColorBlendAdvancedEXT);
    fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
#    else
    this->vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_provoking_vertex)) ||                                   \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_provoking_vertex))
void DeviceTable::CmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer,
                                               VkProvokingVertexModeEXT provokingVertexMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetProvokingVertexModeEXT fn =
        validateFunction("vkCmdSetProvokingVertexModeEXT", this->vkCmdSetProvokingVertexModeEXT);
    fn(commandBuffer, provokingVertexMode);
#    else
    this->vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
void DeviceTable::CmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer,
                                                 VkLineRasterizationModeEXT lineRasterizationMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineRasterizationModeEXT fn =
        validateFunction("vkCmdSetLineRasterizationModeEXT", this->vkCmdSetLineRasterizationModeEXT);
    fn(commandBuffer, lineRasterizationMode);
#    else
    this->vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_line_rasterization)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_line_rasterization))
void DeviceTable::CmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineStippleEnableEXT fn =
        validateFunction("vkCmdSetLineStippleEnableEXT", this->vkCmdSetLineStippleEnableEXT);
    fn(commandBuffer, stippledLineEnable);
#    else
    this->vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_EXT_depth_clip_control)) ||                                 \
    (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clip_control))
void DeviceTable::CmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthClipNegativeOneToOneEXT fn =
        validateFunction("vkCmdSetDepthClipNegativeOneToOneEXT", this->vkCmdSetDepthClipNegativeOneToOneEXT);
    fn(commandBuffer, negativeOneToOne);
#    else
    this->vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) ||                                \
    (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
void DeviceTable::CmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportWScalingEnableNV fn =
        validateFunction("vkCmdSetViewportWScalingEnableNV", this->vkCmdSetViewportWScalingEnableNV);
    fn(commandBuffer, viewportWScalingEnable);
#    else
    this->vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) ||                                    \
    (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
void DeviceTable::CmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount,
                                          const VkViewportSwizzleNV *pViewportSwizzles) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportSwizzleNV fn =
        validateFunction("vkCmdSetViewportSwizzleNV", this->vkCmdSetViewportSwizzleNV);
    fn(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
#    else
    this->vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) ||                          \
    (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
void DeviceTable::CmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageToColorEnableNV fn =
        validateFunction("vkCmdSetCoverageToColorEnableNV", this->vkCmdSetCoverageToColorEnableNV);
    fn(commandBuffer, coverageToColorEnable);
#    else
    this->vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) ||                          \
    (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
void DeviceTable::CmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageToColorLocationNV fn =
        validateFunction("vkCmdSetCoverageToColorLocationNV", this->vkCmdSetCoverageToColorLocationNV);
    fn(commandBuffer, coverageToColorLocation);
#    else
    this->vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
void DeviceTable::CmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer,
                                                 VkCoverageModulationModeNV coverageModulationMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageModulationModeNV fn =
        validateFunction("vkCmdSetCoverageModulationModeNV", this->vkCmdSetCoverageModulationModeNV);
    fn(commandBuffer, coverageModulationMode);
#    else
    this->vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
void DeviceTable::CmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer,
                                                        VkBool32 coverageModulationTableEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageModulationTableEnableNV fn =
        validateFunction("vkCmdSetCoverageModulationTableEnableNV", this->vkCmdSetCoverageModulationTableEnableNV);
    fn(commandBuffer, coverageModulationTableEnable);
#    else
    this->vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) ||                           \
    (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
void DeviceTable::CmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount,
                                                  const float *pCoverageModulationTable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageModulationTableNV fn =
        validateFunction("vkCmdSetCoverageModulationTableNV", this->vkCmdSetCoverageModulationTableNV);
    fn(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
#    else
    this->vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) ||                                  \
    (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
void DeviceTable::CmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetShadingRateImageEnableNV fn =
        validateFunction("vkCmdSetShadingRateImageEnableNV", this->vkCmdSetShadingRateImageEnableNV);
    fn(commandBuffer, shadingRateImageEnable);
#    else
    this->vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) ||                             \
    (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
void DeviceTable::CmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer,
                                                VkCoverageReductionModeNV coverageReductionMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCoverageReductionModeNV fn =
        validateFunction("vkCmdSetCoverageReductionModeNV", this->vkCmdSetCoverageReductionModeNV);
    fn(commandBuffer, coverageReductionMode);
#    else
    this->vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
#    endif
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) ||                        \
    (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
void DeviceTable::CmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer,
                                                           VkBool32 representativeFragmentTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRepresentativeFragmentTestEnableNV fn = validateFunction(
        "vkCmdSetRepresentativeFragmentTestEnableNV", this->vkCmdSetRepresentativeFragmentTestEnableNV);
    fn(commandBuffer, representativeFragmentTestEnable);
#    else
    this->vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
VkResult DeviceTable::CreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo,
                                            const VkAllocationCallbacks *pAllocator,
                                            VkPrivateDataSlot *pPrivateDataSlot) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreatePrivateDataSlot fn = validateFunction("vkCreatePrivateDataSlot", this->vkCreatePrivateDataSlot);
    return fn(device, pCreateInfo, pAllocator, pPrivateDataSlot);
#    else
    return this->vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot,
                                         const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPrivateDataSlot fn =
        validateFunction("vkDestroyPrivateDataSlot", this->vkDestroyPrivateDataSlot);
    fn(device, privateDataSlot, pAllocator);
#    else
    this->vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
VkResult DeviceTable::SetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle,
                                     VkPrivateDataSlot privateDataSlot, uint64_t data) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetPrivateData fn = validateFunction("vkSetPrivateData", this->vkSetPrivateData);
    return fn(device, objectType, objectHandle, privateDataSlot, data);
#    else
    return this->vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::GetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle,
                                 VkPrivateDataSlot privateDataSlot, uint64_t *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPrivateData fn = validateFunction("vkGetPrivateData", this->vkGetPrivateData);
    fn(device, objectType, objectHandle, privateDataSlot, pData);
#    else
    this->vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBuffer2 fn = validateFunction("vkCmdCopyBuffer2", this->vkCmdCopyBuffer2);
    fn(commandBuffer, pCopyBufferInfo);
#    else
    this->vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImage2 fn = validateFunction("vkCmdCopyImage2", this->vkCmdCopyImage2);
    fn(commandBuffer, pCopyImageInfo);
#    else
    this->vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBlitImage2 fn = validateFunction("vkCmdBlitImage2", this->vkCmdBlitImage2);
    fn(commandBuffer, pBlitImageInfo);
#    else
    this->vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdCopyBufferToImage2(VkCommandBuffer commandBuffer,
                                        const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBufferToImage2 fn = validateFunction("vkCmdCopyBufferToImage2", this->vkCmdCopyBufferToImage2);
    fn(commandBuffer, pCopyBufferToImageInfo);
#    else
    this->vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdCopyImageToBuffer2(VkCommandBuffer commandBuffer,
                                        const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImageToBuffer2 fn = validateFunction("vkCmdCopyImageToBuffer2", this->vkCmdCopyImageToBuffer2);
    fn(commandBuffer, pCopyImageToBufferInfo);
#    else
    this->vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResolveImage2 fn = validateFunction("vkCmdResolveImage2", this->vkCmdResolveImage2);
    fn(commandBuffer, pResolveImageInfo);
#    else
    this->vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
#    endif
}
#endif
#if defined(VK_KHR_object_refresh)
void DeviceTable::CmdRefreshObjectsKHR(VkCommandBuffer commandBuffer,
                                       const VkRefreshObjectListKHR *pRefreshObjects) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdRefreshObjectsKHR fn = validateFunction("vkCmdRefreshObjectsKHR", this->vkCmdRefreshObjectsKHR);
    fn(commandBuffer, pRefreshObjects);
#    else
    this->vkCmdRefreshObjectsKHR(commandBuffer, pRefreshObjects);
#    endif
}
#endif
#if defined(VK_KHR_fragment_shading_rate)
void DeviceTable::CmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize,
                                               const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetFragmentShadingRateKHR fn =
        validateFunction("vkCmdSetFragmentShadingRateKHR", this->vkCmdSetFragmentShadingRateKHR);
    fn(commandBuffer, pFragmentSize, combinerOps);
#    else
    this->vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
#    endif
}
#endif
#if defined(VK_NV_fragment_shading_rate_enums)
void DeviceTable::CmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate,
                                                  const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetFragmentShadingRateEnumNV fn =
        validateFunction("vkCmdSetFragmentShadingRateEnumNV", this->vkCmdSetFragmentShadingRateEnumNV);
    fn(commandBuffer, shadingRate, combinerOps);
#    else
    this->vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
#    endif
}
#endif
#if defined(VK_KHR_acceleration_structure)
void DeviceTable::GetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType,
                                                        const VkAccelerationStructureBuildGeometryInfoKHR *pBuildInfo,
                                                        const uint32_t *pMaxPrimitiveCounts,
                                                        VkAccelerationStructureBuildSizesInfoKHR *pSizeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAccelerationStructureBuildSizesKHR fn =
        validateFunction("vkGetAccelerationStructureBuildSizesKHR", this->vkGetAccelerationStructureBuildSizesKHR);
    fn(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
#    else
    this->vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
#    endif
}
#endif
#if defined(VK_EXT_vertex_input_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount,
                                       const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions,
                                       uint32_t vertexAttributeDescriptionCount,
                                       const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetVertexInputEXT fn = validateFunction("vkCmdSetVertexInputEXT", this->vkCmdSetVertexInputEXT);
    fn(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount,
       pVertexAttributeDescriptions);
#    else
    this->vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions,
                                 vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
#    endif
}
#endif
#if defined(VK_EXT_color_write_enable)
void DeviceTable::CmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount,
                                            const VkBool32 *pColorWriteEnables) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetColorWriteEnableEXT fn =
        validateFunction("vkCmdSetColorWriteEnableEXT", this->vkCmdSetColorWriteEnableEXT);
    fn(commandBuffer, attachmentCount, pColorWriteEnables);
#    else
    this->vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event,
                               const VkDependencyInfo *pDependencyInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetEvent2 fn = validateFunction("vkCmdSetEvent2", this->vkCmdSetEvent2);
    fn(commandBuffer, event, pDependencyInfo);
#    else
    this->vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResetEvent2 fn = validateFunction("vkCmdResetEvent2", this->vkCmdResetEvent2);
    fn(commandBuffer, event, stageMask);
#    else
    this->vkCmdResetEvent2(commandBuffer, event, stageMask);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents,
                                 const VkDependencyInfo *pDependencyInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWaitEvents2 fn = validateFunction("vkCmdWaitEvents2", this->vkCmdWaitEvents2);
    fn(commandBuffer, eventCount, pEvents, pDependencyInfos);
#    else
    this->vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPipelineBarrier2 fn = validateFunction("vkCmdPipelineBarrier2", this->vkCmdPipelineBarrier2);
    fn(commandBuffer, pDependencyInfo);
#    else
    this->vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
VkResult DeviceTable::QueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits,
                                   VkFence fence) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueSubmit2 fn = validateFunction("vkQueueSubmit2", this->vkQueueSubmit2);
    return fn(queue, submitCount, pSubmits, fence);
#    else
    return this->vkQueueSubmit2(queue, submitCount, pSubmits, fence);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool,
                                     uint32_t query) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteTimestamp2 fn = validateFunction("vkCmdWriteTimestamp2", this->vkCmdWriteTimestamp2);
    fn(commandBuffer, stage, queryPool, query);
#    else
    this->vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
#    endif
}
#endif
#if (defined(VK_AMD_buffer_marker) && (defined(VKIT_API_VERSION_1_3) || defined(VK_KHR_synchronization2)))
void DeviceTable::CmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage,
                                           VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteBufferMarker2AMD fn =
        validateFunction("vkCmdWriteBufferMarker2AMD", this->vkCmdWriteBufferMarker2AMD);
    fn(commandBuffer, stage, dstBuffer, dstOffset, marker);
#    else
    this->vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
#    endif
}
#endif
#if (defined(VK_NV_device_diagnostic_checkpoints) &&                                                                   \
     (defined(VKIT_API_VERSION_1_3) || defined(VK_KHR_synchronization2)))
void DeviceTable::GetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount,
                                            VkCheckpointData2NV *pCheckpointData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetQueueCheckpointData2NV fn =
        validateFunction("vkGetQueueCheckpointData2NV", this->vkGetQueueCheckpointData2NV);
    fn(queue, pCheckpointDataCount, pCheckpointData);
#    else
    this->vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::CopyMemoryToImage(VkDevice device, const VkCopyMemoryToImageInfo *pCopyMemoryToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMemoryToImage fn = validateFunction("vkCopyMemoryToImage", this->vkCopyMemoryToImage);
    return fn(device, pCopyMemoryToImageInfo);
#    else
    return this->vkCopyMemoryToImage(device, pCopyMemoryToImageInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::CopyImageToMemory(VkDevice device, const VkCopyImageToMemoryInfo *pCopyImageToMemoryInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyImageToMemory fn = validateFunction("vkCopyImageToMemory", this->vkCopyImageToMemory);
    return fn(device, pCopyImageToMemoryInfo);
#    else
    return this->vkCopyImageToMemory(device, pCopyImageToMemoryInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::CopyImageToImage(VkDevice device, const VkCopyImageToImageInfo *pCopyImageToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyImageToImage fn = validateFunction("vkCopyImageToImage", this->vkCopyImageToImage);
    return fn(device, pCopyImageToImageInfo);
#    else
    return this->vkCopyImageToImage(device, pCopyImageToImageInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::TransitionImageLayout(VkDevice device, uint32_t transitionCount,
                                            const VkHostImageLayoutTransitionInfo *pTransitions) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkTransitionImageLayout fn = validateFunction("vkTransitionImageLayout", this->vkTransitionImageLayout);
    return fn(device, transitionCount, pTransitions);
#    else
    return this->vkTransitionImageLayout(device, transitionCount, pTransitions);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult DeviceTable::CreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR *pCreateInfo,
                                            const VkAllocationCallbacks *pAllocator,
                                            VkVideoSessionKHR *pVideoSession) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateVideoSessionKHR fn = validateFunction("vkCreateVideoSessionKHR", this->vkCreateVideoSessionKHR);
    return fn(device, pCreateInfo, pAllocator, pVideoSession);
#    else
    return this->vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
void DeviceTable::DestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession,
                                         const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyVideoSessionKHR fn =
        validateFunction("vkDestroyVideoSessionKHR", this->vkDestroyVideoSessionKHR);
    fn(device, videoSession, pAllocator);
#    else
    this->vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult DeviceTable::CreateVideoSessionParametersKHR(VkDevice device,
                                                      const VkVideoSessionParametersCreateInfoKHR *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkVideoSessionParametersKHR *pVideoSessionParameters) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateVideoSessionParametersKHR fn =
        validateFunction("vkCreateVideoSessionParametersKHR", this->vkCreateVideoSessionParametersKHR);
    return fn(device, pCreateInfo, pAllocator, pVideoSessionParameters);
#    else
    return this->vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult DeviceTable::UpdateVideoSessionParametersKHR(VkDevice device,
                                                      VkVideoSessionParametersKHR videoSessionParameters,
                                                      const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateVideoSessionParametersKHR fn =
        validateFunction("vkUpdateVideoSessionParametersKHR", this->vkUpdateVideoSessionParametersKHR);
    return fn(device, videoSessionParameters, pUpdateInfo);
#    else
    return this->vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
#    endif
}
#endif
#if defined(VK_KHR_video_encode_queue)
VkResult DeviceTable::GetEncodedVideoSessionParametersKHR(
    VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo,
    VkVideoEncodeSessionParametersFeedbackInfoKHR *pFeedbackInfo, size_t *pDataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetEncodedVideoSessionParametersKHR fn =
        validateFunction("vkGetEncodedVideoSessionParametersKHR", this->vkGetEncodedVideoSessionParametersKHR);
    return fn(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
#    else
    return this->vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize,
                                                       pData);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
void DeviceTable::DestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters,
                                                   const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyVideoSessionParametersKHR fn =
        validateFunction("vkDestroyVideoSessionParametersKHR", this->vkDestroyVideoSessionParametersKHR);
    fn(device, videoSessionParameters, pAllocator);
#    else
    this->vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult DeviceTable::GetVideoSessionMemoryRequirementsKHR(
    VkDevice device, VkVideoSessionKHR videoSession, uint32_t *pMemoryRequirementsCount,
    VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetVideoSessionMemoryRequirementsKHR fn =
        validateFunction("vkGetVideoSessionMemoryRequirementsKHR", this->vkGetVideoSessionMemoryRequirementsKHR);
    return fn(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
#    else
    return this->vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount,
                                                        pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
VkResult DeviceTable::BindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession,
                                                uint32_t bindSessionMemoryInfoCount,
                                                const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindVideoSessionMemoryKHR fn =
        validateFunction("vkBindVideoSessionMemoryKHR", this->vkBindVideoSessionMemoryKHR);
    return fn(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
#    else
    return this->vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
#    endif
}
#endif
#if defined(VK_KHR_video_decode_queue)
void DeviceTable::CmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDecodeVideoKHR fn = validateFunction("vkCmdDecodeVideoKHR", this->vkCmdDecodeVideoKHR);
    fn(commandBuffer, pDecodeInfo);
#    else
    this->vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
void DeviceTable::CmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer,
                                         const VkVideoBeginCodingInfoKHR *pBeginInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginVideoCodingKHR fn =
        validateFunction("vkCmdBeginVideoCodingKHR", this->vkCmdBeginVideoCodingKHR);
    fn(commandBuffer, pBeginInfo);
#    else
    this->vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
void DeviceTable::CmdControlVideoCodingKHR(VkCommandBuffer commandBuffer,
                                           const VkVideoCodingControlInfoKHR *pCodingControlInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdControlVideoCodingKHR fn =
        validateFunction("vkCmdControlVideoCodingKHR", this->vkCmdControlVideoCodingKHR);
    fn(commandBuffer, pCodingControlInfo);
#    else
    this->vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
#    endif
}
#endif
#if defined(VK_KHR_video_queue)
void DeviceTable::CmdEndVideoCodingKHR(VkCommandBuffer commandBuffer,
                                       const VkVideoEndCodingInfoKHR *pEndCodingInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndVideoCodingKHR fn = validateFunction("vkCmdEndVideoCodingKHR", this->vkCmdEndVideoCodingKHR);
    fn(commandBuffer, pEndCodingInfo);
#    else
    this->vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
#    endif
}
#endif
#if defined(VK_KHR_video_encode_queue)
void DeviceTable::CmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEncodeVideoKHR fn = validateFunction("vkCmdEncodeVideoKHR", this->vkCmdEncodeVideoKHR);
    fn(commandBuffer, pEncodeInfo);
#    else
    this->vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
#    endif
}
#endif
#if defined(VK_NV_memory_decompression)
void DeviceTable::CmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount,
                                        const VkDecompressMemoryRegionNV *pDecompressMemoryRegions) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDecompressMemoryNV fn = validateFunction("vkCmdDecompressMemoryNV", this->vkCmdDecompressMemoryNV);
    fn(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
#    else
    this->vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
#    endif
}
#endif
#if defined(VK_NV_memory_decompression)
void DeviceTable::CmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer,
                                                     VkDeviceAddress indirectCommandsAddress,
                                                     VkDeviceAddress indirectCommandsCountAddress,
                                                     uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDecompressMemoryIndirectCountNV fn =
        validateFunction("vkCmdDecompressMemoryIndirectCountNV", this->vkCmdDecompressMemoryIndirectCountNV);
    fn(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
#    else
    this->vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress,
                                               stride);
#    endif
}
#endif
#if defined(VK_NV_partitioned_acceleration_structure)
void DeviceTable::GetPartitionedAccelerationStructuresBuildSizesNV(
    VkDevice device, const VkPartitionedAccelerationStructureInstancesInputNV *pInfo,
    VkAccelerationStructureBuildSizesInfoKHR *pSizeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV fn = validateFunction(
        "vkGetPartitionedAccelerationStructuresBuildSizesNV", this->vkGetPartitionedAccelerationStructuresBuildSizesNV);
    fn(device, pInfo, pSizeInfo);
#    else
    this->vkGetPartitionedAccelerationStructuresBuildSizesNV(device, pInfo, pSizeInfo);
#    endif
}
#endif
#if defined(VK_NV_partitioned_acceleration_structure)
void DeviceTable::CmdBuildPartitionedAccelerationStructuresNV(
    VkCommandBuffer commandBuffer, const VkBuildPartitionedAccelerationStructureInfoNV *pBuildInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildPartitionedAccelerationStructuresNV fn = validateFunction(
        "vkCmdBuildPartitionedAccelerationStructuresNV", this->vkCmdBuildPartitionedAccelerationStructuresNV);
    fn(commandBuffer, pBuildInfo);
#    else
    this->vkCmdBuildPartitionedAccelerationStructuresNV(commandBuffer, pBuildInfo);
#    endif
}
#endif
#if defined(VK_NVX_binary_import)
VkResult DeviceTable::CreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX *pCreateInfo,
                                        const VkAllocationCallbacks *pAllocator, VkCuModuleNVX *pModule) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateCuModuleNVX fn = validateFunction("vkCreateCuModuleNVX", this->vkCreateCuModuleNVX);
    return fn(device, pCreateInfo, pAllocator, pModule);
#    else
    return this->vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
#    endif
}
#endif
#if defined(VK_NVX_binary_import)
VkResult DeviceTable::CreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX *pCreateInfo,
                                          const VkAllocationCallbacks *pAllocator, VkCuFunctionNVX *pFunction) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateCuFunctionNVX fn = validateFunction("vkCreateCuFunctionNVX", this->vkCreateCuFunctionNVX);
    return fn(device, pCreateInfo, pAllocator, pFunction);
#    else
    return this->vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
#    endif
}
#endif
#if defined(VK_NVX_binary_import)
void DeviceTable::DestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module,
                                     const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyCuModuleNVX fn = validateFunction("vkDestroyCuModuleNVX", this->vkDestroyCuModuleNVX);
    fn(device, module, pAllocator);
#    else
    this->vkDestroyCuModuleNVX(device, module, pAllocator);
#    endif
}
#endif
#if defined(VK_NVX_binary_import)
void DeviceTable::DestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function,
                                       const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyCuFunctionNVX fn = validateFunction("vkDestroyCuFunctionNVX", this->vkDestroyCuFunctionNVX);
    fn(device, function, pAllocator);
#    else
    this->vkDestroyCuFunctionNVX(device, function, pAllocator);
#    endif
}
#endif
#if defined(VK_NVX_binary_import)
void DeviceTable::CmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCuLaunchKernelNVX fn = validateFunction("vkCmdCuLaunchKernelNVX", this->vkCmdCuLaunchKernelNVX);
    fn(commandBuffer, pLaunchInfo);
#    else
    this->vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::GetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout,
                                                VkDeviceSize *pLayoutSizeInBytes) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetLayoutSizeEXT fn =
        validateFunction("vkGetDescriptorSetLayoutSizeEXT", this->vkGetDescriptorSetLayoutSizeEXT);
    fn(device, layout, pLayoutSizeInBytes);
#    else
    this->vkGetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::GetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout,
                                                         uint32_t binding, VkDeviceSize *pOffset) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetLayoutBindingOffsetEXT fn =
        validateFunction("vkGetDescriptorSetLayoutBindingOffsetEXT", this->vkGetDescriptorSetLayoutBindingOffsetEXT);
    fn(device, layout, binding, pOffset);
#    else
    this->vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::GetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize,
                                   void *pDescriptor) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorEXT fn = validateFunction("vkGetDescriptorEXT", this->vkGetDescriptorEXT);
    fn(device, pDescriptorInfo, dataSize, pDescriptor);
#    else
    this->vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::CmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount,
                                              const VkDescriptorBufferBindingInfoEXT *pBindingInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorBuffersEXT fn =
        validateFunction("vkCmdBindDescriptorBuffersEXT", this->vkCmdBindDescriptorBuffersEXT);
    fn(commandBuffer, bufferCount, pBindingInfos);
#    else
    this->vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::CmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                                   VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount,
                                                   const uint32_t *pBufferIndices, const VkDeviceSize *pOffsets) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDescriptorBufferOffsetsEXT fn =
        validateFunction("vkCmdSetDescriptorBufferOffsetsEXT", this->vkCmdSetDescriptorBufferOffsetsEXT);
    fn(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
#    else
    this->vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount,
                                             pBufferIndices, pOffsets);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
void DeviceTable::CmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer,
                                                             VkPipelineBindPoint pipelineBindPoint,
                                                             VkPipelineLayout layout, uint32_t set) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT fn = validateFunction(
        "vkCmdBindDescriptorBufferEmbeddedSamplersEXT", this->vkCmdBindDescriptorBufferEmbeddedSamplersEXT);
    fn(commandBuffer, pipelineBindPoint, layout, set);
#    else
    this->vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
VkResult DeviceTable::GetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device,
                                                              const VkBufferCaptureDescriptorDataInfoEXT *pInfo,
                                                              void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT fn =
        validateFunction("vkGetBufferOpaqueCaptureDescriptorDataEXT", this->vkGetBufferOpaqueCaptureDescriptorDataEXT);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
VkResult DeviceTable::GetImageOpaqueCaptureDescriptorDataEXT(VkDevice device,
                                                             const VkImageCaptureDescriptorDataInfoEXT *pInfo,
                                                             void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageOpaqueCaptureDescriptorDataEXT fn =
        validateFunction("vkGetImageOpaqueCaptureDescriptorDataEXT", this->vkGetImageOpaqueCaptureDescriptorDataEXT);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
VkResult DeviceTable::GetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device,
                                                                 const VkImageViewCaptureDescriptorDataInfoEXT *pInfo,
                                                                 void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT fn = validateFunction(
        "vkGetImageViewOpaqueCaptureDescriptorDataEXT", this->vkGetImageViewOpaqueCaptureDescriptorDataEXT);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
#    endif
}
#endif
#if defined(VK_EXT_descriptor_buffer)
VkResult DeviceTable::GetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device,
                                                               const VkSamplerCaptureDescriptorDataInfoEXT *pInfo,
                                                               void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT fn = validateFunction(
        "vkGetSamplerOpaqueCaptureDescriptorDataEXT", this->vkGetSamplerOpaqueCaptureDescriptorDataEXT);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
#    endif
}
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)))
VkResult DeviceTable::GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
    VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT fn =
        validateFunction("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
                         this->vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
#    endif
}
#endif
#if defined(VK_EXT_pageable_device_local_memory)
void DeviceTable::SetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetDeviceMemoryPriorityEXT fn =
        validateFunction("vkSetDeviceMemoryPriorityEXT", this->vkSetDeviceMemoryPriorityEXT);
    fn(device, memory, priority);
#    else
    this->vkSetDeviceMemoryPriorityEXT(device, memory, priority);
#    endif
}
#endif
#if defined(VK_KHR_present_wait2)
VkResult DeviceTable::WaitForPresent2KHR(VkDevice device, VkSwapchainKHR swapchain,
                                         const VkPresentWait2InfoKHR *pPresentWait2Info) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWaitForPresent2KHR fn = validateFunction("vkWaitForPresent2KHR", this->vkWaitForPresent2KHR);
    return fn(device, swapchain, pPresentWait2Info);
#    else
    return this->vkWaitForPresent2KHR(device, swapchain, pPresentWait2Info);
#    endif
}
#endif
#if defined(VK_KHR_present_wait)
VkResult DeviceTable::WaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId,
                                        uint64_t timeout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWaitForPresentKHR fn = validateFunction("vkWaitForPresentKHR", this->vkWaitForPresentKHR);
    return fn(device, swapchain, presentId, timeout);
#    else
    return this->vkWaitForPresentKHR(device, swapchain, presentId, timeout);
#    endif
}
#endif
#if defined(VK_FUCHSIA_buffer_collection)
VkResult DeviceTable::CreateBufferCollectionFUCHSIA(VkDevice device,
                                                    const VkBufferCollectionCreateInfoFUCHSIA *pCreateInfo,
                                                    const VkAllocationCallbacks *pAllocator,
                                                    VkBufferCollectionFUCHSIA *pCollection) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateBufferCollectionFUCHSIA fn =
        validateFunction("vkCreateBufferCollectionFUCHSIA", this->vkCreateBufferCollectionFUCHSIA);
    return fn(device, pCreateInfo, pAllocator, pCollection);
#    else
    return this->vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
#    endif
}
#endif
#if defined(VK_FUCHSIA_buffer_collection)
VkResult DeviceTable::SetBufferCollectionBufferConstraintsFUCHSIA(
    VkDevice device, VkBufferCollectionFUCHSIA collection,
    const VkBufferConstraintsInfoFUCHSIA *pBufferConstraintsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA fn = validateFunction(
        "vkSetBufferCollectionBufferConstraintsFUCHSIA", this->vkSetBufferCollectionBufferConstraintsFUCHSIA);
    return fn(device, collection, pBufferConstraintsInfo);
#    else
    return this->vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
#    endif
}
#endif
#if defined(VK_FUCHSIA_buffer_collection)
VkResult DeviceTable::SetBufferCollectionImageConstraintsFUCHSIA(
    VkDevice device, VkBufferCollectionFUCHSIA collection,
    const VkImageConstraintsInfoFUCHSIA *pImageConstraintsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetBufferCollectionImageConstraintsFUCHSIA fn = validateFunction(
        "vkSetBufferCollectionImageConstraintsFUCHSIA", this->vkSetBufferCollectionImageConstraintsFUCHSIA);
    return fn(device, collection, pImageConstraintsInfo);
#    else
    return this->vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
#    endif
}
#endif
#if defined(VK_FUCHSIA_buffer_collection)
void DeviceTable::DestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection,
                                                 const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyBufferCollectionFUCHSIA fn =
        validateFunction("vkDestroyBufferCollectionFUCHSIA", this->vkDestroyBufferCollectionFUCHSIA);
    fn(device, collection, pAllocator);
#    else
    this->vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
#    endif
}
#endif
#if defined(VK_FUCHSIA_buffer_collection)
VkResult DeviceTable::GetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection,
                                                           VkBufferCollectionPropertiesFUCHSIA *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferCollectionPropertiesFUCHSIA fn =
        validateFunction("vkGetBufferCollectionPropertiesFUCHSIA", this->vkGetBufferCollectionPropertiesFUCHSIA);
    return fn(device, collection, pProperties);
#    else
    return this->vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
VkResult DeviceTable::CreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV *pCreateInfo,
                                         const VkAllocationCallbacks *pAllocator, VkCudaModuleNV *pModule) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateCudaModuleNV fn = validateFunction("vkCreateCudaModuleNV", this->vkCreateCudaModuleNV);
    return fn(device, pCreateInfo, pAllocator, pModule);
#    else
    return this->vkCreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
VkResult DeviceTable::GetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t *pCacheSize,
                                           void *pCacheData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetCudaModuleCacheNV fn = validateFunction("vkGetCudaModuleCacheNV", this->vkGetCudaModuleCacheNV);
    return fn(device, module, pCacheSize, pCacheData);
#    else
    return this->vkGetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
VkResult DeviceTable::CreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV *pCreateInfo,
                                           const VkAllocationCallbacks *pAllocator, VkCudaFunctionNV *pFunction) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateCudaFunctionNV fn = validateFunction("vkCreateCudaFunctionNV", this->vkCreateCudaFunctionNV);
    return fn(device, pCreateInfo, pAllocator, pFunction);
#    else
    return this->vkCreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
void DeviceTable::DestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module,
                                      const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyCudaModuleNV fn = validateFunction("vkDestroyCudaModuleNV", this->vkDestroyCudaModuleNV);
    fn(device, module, pAllocator);
#    else
    this->vkDestroyCudaModuleNV(device, module, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
void DeviceTable::DestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function,
                                        const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyCudaFunctionNV fn = validateFunction("vkDestroyCudaFunctionNV", this->vkDestroyCudaFunctionNV);
    fn(device, function, pAllocator);
#    else
    this->vkDestroyCudaFunctionNV(device, function, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
void DeviceTable::CmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV *pLaunchInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCudaLaunchKernelNV fn = validateFunction("vkCmdCudaLaunchKernelNV", this->vkCmdCudaLaunchKernelNV);
    fn(commandBuffer, pLaunchInfo);
#    else
    this->vkCmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginRendering fn = validateFunction("vkCmdBeginRendering", this->vkCmdBeginRendering);
    fn(commandBuffer, pRenderingInfo);
#    else
    this->vkCmdBeginRendering(commandBuffer, pRenderingInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_3)
void DeviceTable::CmdEndRendering(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRendering fn = validateFunction("vkCmdEndRendering", this->vkCmdEndRendering);
    fn(commandBuffer);
#    else
    this->vkCmdEndRendering(commandBuffer);
#    endif
}
#endif
#if defined(VK_EXT_fragment_density_map_offset)
void DeviceTable::CmdEndRendering2EXT(VkCommandBuffer commandBuffer,
                                      const VkRenderingEndInfoEXT *pRenderingEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRendering2EXT fn = validateFunction("vkCmdEndRendering2EXT", this->vkCmdEndRendering2EXT);
    fn(commandBuffer, pRenderingEndInfo);
#    else
    this->vkCmdEndRendering2EXT(commandBuffer, pRenderingEndInfo);
#    endif
}
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping)
void DeviceTable::GetDescriptorSetLayoutHostMappingInfoVALVE(
    VkDevice device, const VkDescriptorSetBindingReferenceVALVE *pBindingReference,
    VkDescriptorSetLayoutHostMappingInfoVALVE *pHostMapping) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE fn = validateFunction(
        "vkGetDescriptorSetLayoutHostMappingInfoVALVE", this->vkGetDescriptorSetLayoutHostMappingInfoVALVE);
    fn(device, pBindingReference, pHostMapping);
#    else
    this->vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
#    endif
}
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping)
void DeviceTable::GetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void **ppData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetHostMappingVALVE fn =
        validateFunction("vkGetDescriptorSetHostMappingVALVE", this->vkGetDescriptorSetHostMappingVALVE);
    fn(device, descriptorSet, ppData);
#    else
    this->vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::CreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT *pCreateInfo,
                                        const VkAllocationCallbacks *pAllocator, VkMicromapEXT *pMicromap) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateMicromapEXT fn = validateFunction("vkCreateMicromapEXT", this->vkCreateMicromapEXT);
    return fn(device, pCreateInfo, pAllocator, pMicromap);
#    else
    return this->vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::CmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount,
                                       const VkMicromapBuildInfoEXT *pInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBuildMicromapsEXT fn = validateFunction("vkCmdBuildMicromapsEXT", this->vkCmdBuildMicromapsEXT);
    fn(commandBuffer, infoCount, pInfos);
#    else
    this->vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::BuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount,
                                        const VkMicromapBuildInfoEXT *pInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBuildMicromapsEXT fn = validateFunction("vkBuildMicromapsEXT", this->vkBuildMicromapsEXT);
    return fn(device, deferredOperation, infoCount, pInfos);
#    else
    return this->vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::DestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap,
                                     const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyMicromapEXT fn = validateFunction("vkDestroyMicromapEXT", this->vkDestroyMicromapEXT);
    fn(device, micromap, pAllocator);
#    else
    this->vkDestroyMicromapEXT(device, micromap, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::CmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMicromapEXT fn = validateFunction("vkCmdCopyMicromapEXT", this->vkCmdCopyMicromapEXT);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyMicromapEXT(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::CopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                      const VkCopyMicromapInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMicromapEXT fn = validateFunction("vkCopyMicromapEXT", this->vkCopyMicromapEXT);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyMicromapEXT(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::CmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer,
                                             const VkCopyMicromapToMemoryInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMicromapToMemoryEXT fn =
        validateFunction("vkCmdCopyMicromapToMemoryEXT", this->vkCmdCopyMicromapToMemoryEXT);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::CopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                              const VkCopyMicromapToMemoryInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMicromapToMemoryEXT fn =
        validateFunction("vkCopyMicromapToMemoryEXT", this->vkCopyMicromapToMemoryEXT);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::CmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer,
                                             const VkCopyMemoryToMicromapInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyMemoryToMicromapEXT fn =
        validateFunction("vkCmdCopyMemoryToMicromapEXT", this->vkCmdCopyMemoryToMicromapEXT);
    fn(commandBuffer, pInfo);
#    else
    this->vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::CopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                              const VkCopyMemoryToMicromapInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMemoryToMicromapEXT fn =
        validateFunction("vkCopyMemoryToMicromapEXT", this->vkCopyMemoryToMicromapEXT);
    return fn(device, deferredOperation, pInfo);
#    else
    return this->vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::CmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount,
                                                 const VkMicromapEXT *pMicromaps, VkQueryType queryType,
                                                 VkQueryPool queryPool, uint32_t firstQuery) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteMicromapsPropertiesEXT fn =
        validateFunction("vkCmdWriteMicromapsPropertiesEXT", this->vkCmdWriteMicromapsPropertiesEXT);
    fn(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
#    else
    this->vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
VkResult DeviceTable::WriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount,
                                                  const VkMicromapEXT *pMicromaps, VkQueryType queryType,
                                                  size_t dataSize, void *pData, size_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWriteMicromapsPropertiesEXT fn =
        validateFunction("vkWriteMicromapsPropertiesEXT", this->vkWriteMicromapsPropertiesEXT);
    return fn(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
#    else
    return this->vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::GetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT *pVersionInfo,
                                                    VkAccelerationStructureCompatibilityKHR *pCompatibility) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceMicromapCompatibilityEXT fn =
        validateFunction("vkGetDeviceMicromapCompatibilityEXT", this->vkGetDeviceMicromapCompatibilityEXT);
    fn(device, pVersionInfo, pCompatibility);
#    else
    this->vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
#    endif
}
#endif
#if defined(VK_EXT_opacity_micromap)
void DeviceTable::GetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType,
                                           const VkMicromapBuildInfoEXT *pBuildInfo,
                                           VkMicromapBuildSizesInfoEXT *pSizeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMicromapBuildSizesEXT fn =
        validateFunction("vkGetMicromapBuildSizesEXT", this->vkGetMicromapBuildSizesEXT);
    fn(device, buildType, pBuildInfo, pSizeInfo);
#    else
    this->vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
#    endif
}
#endif
#if defined(VK_EXT_shader_module_identifier)
void DeviceTable::GetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule,
                                               VkShaderModuleIdentifierEXT *pIdentifier) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetShaderModuleIdentifierEXT fn =
        validateFunction("vkGetShaderModuleIdentifierEXT", this->vkGetShaderModuleIdentifierEXT);
    fn(device, shaderModule, pIdentifier);
#    else
    this->vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
#    endif
}
#endif
#if defined(VK_EXT_shader_module_identifier)
void DeviceTable::GetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo,
                                                         VkShaderModuleIdentifierEXT *pIdentifier) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetShaderModuleCreateInfoIdentifierEXT fn =
        validateFunction("vkGetShaderModuleCreateInfoIdentifierEXT", this->vkGetShaderModuleCreateInfoIdentifierEXT);
    fn(device, pCreateInfo, pIdentifier);
#    else
    this->vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::GetImageSubresourceLayout2(VkDevice device, VkImage image, const VkImageSubresource2 *pSubresource,
                                             VkSubresourceLayout2 *pLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSubresourceLayout2 fn =
        validateFunction("vkGetImageSubresourceLayout2", this->vkGetImageSubresourceLayout2);
    fn(device, image, pSubresource, pLayout);
#    else
    this->vkGetImageSubresourceLayout2(device, image, pSubresource, pLayout);
#    endif
}
#endif
#if defined(VK_EXT_pipeline_properties)
VkResult DeviceTable::GetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT *pPipelineInfo,
                                               VkBaseOutStructure *pPipelineProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPipelinePropertiesEXT fn =
        validateFunction("vkGetPipelinePropertiesEXT", this->vkGetPipelinePropertiesEXT);
    return fn(device, pPipelineInfo, pPipelineProperties);
#    else
    return this->vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
#    endif
}
#endif
#if defined(VK_EXT_metal_objects)
void DeviceTable::ExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT *pMetalObjectsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkExportMetalObjectsEXT fn = validateFunction("vkExportMetalObjectsEXT", this->vkExportMetalObjectsEXT);
    fn(device, pMetalObjectsInfo);
#    else
    this->vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
#    endif
}
#endif
#if defined(VK_QCOM_tile_memory_heap)
void DeviceTable::CmdBindTileMemoryQCOM(VkCommandBuffer commandBuffer,
                                        const VkTileMemoryBindInfoQCOM *pTileMemoryBindInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindTileMemoryQCOM fn = validateFunction("vkCmdBindTileMemoryQCOM", this->vkCmdBindTileMemoryQCOM);
    fn(commandBuffer, pTileMemoryBindInfo);
#    else
    this->vkCmdBindTileMemoryQCOM(commandBuffer, pTileMemoryBindInfo);
#    endif
}
#endif
#if defined(VK_QCOM_tile_properties)
VkResult DeviceTable::GetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer,
                                                       uint32_t *pPropertiesCount,
                                                       VkTilePropertiesQCOM *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetFramebufferTilePropertiesQCOM fn =
        validateFunction("vkGetFramebufferTilePropertiesQCOM", this->vkGetFramebufferTilePropertiesQCOM);
    return fn(device, framebuffer, pPropertiesCount, pProperties);
#    else
    return this->vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
#    endif
}
#endif
#if defined(VK_QCOM_tile_properties)
VkResult DeviceTable::GetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo *pRenderingInfo,
                                                            VkTilePropertiesQCOM *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDynamicRenderingTilePropertiesQCOM fn =
        validateFunction("vkGetDynamicRenderingTilePropertiesQCOM", this->vkGetDynamicRenderingTilePropertiesQCOM);
    return fn(device, pRenderingInfo, pProperties);
#    else
    return this->vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
#    endif
}
#endif
#if defined(VK_NV_optical_flow)
VkResult DeviceTable::CreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV *pCreateInfo,
                                                 const VkAllocationCallbacks *pAllocator,
                                                 VkOpticalFlowSessionNV *pSession) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateOpticalFlowSessionNV fn =
        validateFunction("vkCreateOpticalFlowSessionNV", this->vkCreateOpticalFlowSessionNV);
    return fn(device, pCreateInfo, pAllocator, pSession);
#    else
    return this->vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
#    endif
}
#endif
#if defined(VK_NV_optical_flow)
void DeviceTable::DestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session,
                                              const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyOpticalFlowSessionNV fn =
        validateFunction("vkDestroyOpticalFlowSessionNV", this->vkDestroyOpticalFlowSessionNV);
    fn(device, session, pAllocator);
#    else
    this->vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_optical_flow)
VkResult DeviceTable::BindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session,
                                                    VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view,
                                                    VkImageLayout layout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindOpticalFlowSessionImageNV fn =
        validateFunction("vkBindOpticalFlowSessionImageNV", this->vkBindOpticalFlowSessionImageNV);
    return fn(device, session, bindingPoint, view, layout);
#    else
    return this->vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
#    endif
}
#endif
#if defined(VK_NV_optical_flow)
void DeviceTable::CmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session,
                                          const VkOpticalFlowExecuteInfoNV *pExecuteInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdOpticalFlowExecuteNV fn =
        validateFunction("vkCmdOpticalFlowExecuteNV", this->vkCmdOpticalFlowExecuteNV);
    fn(commandBuffer, session, pExecuteInfo);
#    else
    this->vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
#    endif
}
#endif
#if defined(VK_EXT_device_fault)
VkResult DeviceTable::GetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts,
                                            VkDeviceFaultInfoEXT *pFaultInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceFaultInfoEXT fn = validateFunction("vkGetDeviceFaultInfoEXT", this->vkGetDeviceFaultInfoEXT);
    return fn(device, pFaultCounts, pFaultInfo);
#    else
    return this->vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
#    endif
}
#endif
#if defined(VK_EXT_depth_bias_control)
void DeviceTable::CmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBias2EXT fn = validateFunction("vkCmdSetDepthBias2EXT", this->vkCmdSetDepthBias2EXT);
    fn(commandBuffer, pDepthBiasInfo);
#    else
    this->vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
#    endif
}
#endif
#if defined(VK_KHR_swapchain_maintenance1)
VkResult DeviceTable::ReleaseSwapchainImagesKHR(VkDevice device,
                                                const VkReleaseSwapchainImagesInfoKHR *pReleaseInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseSwapchainImagesKHR fn =
        validateFunction("vkReleaseSwapchainImagesKHR", this->vkReleaseSwapchainImagesKHR);
    return fn(device, pReleaseInfo);
#    else
    return this->vkReleaseSwapchainImagesKHR(device, pReleaseInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::GetDeviceImageSubresourceLayout(VkDevice device, const VkDeviceImageSubresourceInfo *pInfo,
                                                  VkSubresourceLayout2 *pLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageSubresourceLayout fn =
        validateFunction("vkGetDeviceImageSubresourceLayout", this->vkGetDeviceImageSubresourceLayout);
    fn(device, pInfo, pLayout);
#    else
    this->vkGetDeviceImageSubresourceLayout(device, pInfo, pLayout);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::MapMemory2(VkDevice device, const VkMemoryMapInfo *pMemoryMapInfo, void **ppData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkMapMemory2 fn = validateFunction("vkMapMemory2", this->vkMapMemory2);
    return fn(device, pMemoryMapInfo, ppData);
#    else
    return this->vkMapMemory2(device, pMemoryMapInfo, ppData);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
VkResult DeviceTable::UnmapMemory2(VkDevice device, const VkMemoryUnmapInfo *pMemoryUnmapInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUnmapMemory2 fn = validateFunction("vkUnmapMemory2", this->vkUnmapMemory2);
    return fn(device, pMemoryUnmapInfo);
#    else
    return this->vkUnmapMemory2(device, pMemoryUnmapInfo);
#    endif
}
#endif
#if defined(VK_EXT_shader_object)
VkResult DeviceTable::CreateShadersEXT(VkDevice device, uint32_t createInfoCount,
                                       const VkShaderCreateInfoEXT *pCreateInfos,
                                       const VkAllocationCallbacks *pAllocator, VkShaderEXT *pShaders) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateShadersEXT fn = validateFunction("vkCreateShadersEXT", this->vkCreateShadersEXT);
    return fn(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
#    else
    return this->vkCreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
#    endif
}
#endif
#if defined(VK_EXT_shader_object)
void DeviceTable::DestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyShaderEXT fn = validateFunction("vkDestroyShaderEXT", this->vkDestroyShaderEXT);
    fn(device, shader, pAllocator);
#    else
    this->vkDestroyShaderEXT(device, shader, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_shader_object)
VkResult DeviceTable::GetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t *pDataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetShaderBinaryDataEXT fn =
        validateFunction("vkGetShaderBinaryDataEXT", this->vkGetShaderBinaryDataEXT);
    return fn(device, shader, pDataSize, pData);
#    else
    return this->vkGetShaderBinaryDataEXT(device, shader, pDataSize, pData);
#    endif
}
#endif
#if defined(VK_EXT_shader_object)
void DeviceTable::CmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount,
                                    const VkShaderStageFlagBits *pStages, const VkShaderEXT *pShaders) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindShadersEXT fn = validateFunction("vkCmdBindShadersEXT", this->vkCmdBindShadersEXT);
    fn(commandBuffer, stageCount, pStages, pShaders);
#    else
    this->vkCmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);
#    endif
}
#endif
#if defined(VK_QNX_external_memory_screen_buffer)
VkResult DeviceTable::GetScreenBufferPropertiesQNX(VkDevice device, const struct _screen_buffer *buffer,
                                                   VkScreenBufferPropertiesQNX *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetScreenBufferPropertiesQNX fn =
        validateFunction("vkGetScreenBufferPropertiesQNX", this->vkGetScreenBufferPropertiesQNX);
    return fn(device, buffer, pProperties);
#    else
    return this->vkGetScreenBufferPropertiesQNX(device, buffer, pProperties);
#    endif
}
#endif
#if defined(VK_AMDX_shader_enqueue)
VkResult DeviceTable::GetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph,
                                                               VkExecutionGraphPipelineScratchSizeAMDX *pSizeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetExecutionGraphPipelineScratchSizeAMDX fn = validateFunction(
        "vkGetExecutionGraphPipelineScratchSizeAMDX", this->vkGetExecutionGraphPipelineScratchSizeAMDX);
    return fn(device, executionGraph, pSizeInfo);
#    else
    return this->vkGetExecutionGraphPipelineScratchSizeAMDX(device, executionGraph, pSizeInfo);
#    endif
}
#endif
#if defined(VK_AMDX_shader_enqueue)
VkResult DeviceTable::GetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph,
                                                             const VkPipelineShaderStageNodeCreateInfoAMDX *pNodeInfo,
                                                             uint32_t *pNodeIndex) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetExecutionGraphPipelineNodeIndexAMDX fn =
        validateFunction("vkGetExecutionGraphPipelineNodeIndexAMDX", this->vkGetExecutionGraphPipelineNodeIndexAMDX);
    return fn(device, executionGraph, pNodeInfo, pNodeIndex);
#    else
    return this->vkGetExecutionGraphPipelineNodeIndexAMDX(device, executionGraph, pNodeInfo, pNodeIndex);
#    endif
}
#endif
#if defined(VK_AMDX_shader_enqueue)
VkResult DeviceTable::CreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache,
                                                        uint32_t createInfoCount,
                                                        const VkExecutionGraphPipelineCreateInfoAMDX *pCreateInfos,
                                                        const VkAllocationCallbacks *pAllocator,
                                                        VkPipeline *pPipelines) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateExecutionGraphPipelinesAMDX fn =
        validateFunction("vkCreateExecutionGraphPipelinesAMDX", this->vkCreateExecutionGraphPipelinesAMDX);
    return fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#    else
    return this->vkCreateExecutionGraphPipelinesAMDX(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                                     pPipelines);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
void DeviceTable::CmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkPipeline executionGraph,
                                                      VkDeviceAddress scratch, VkDeviceSize scratchSize) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdInitializeGraphScratchMemoryAMDX fn =
        validateFunction("vkCmdInitializeGraphScratchMemoryAMDX", this->vkCmdInitializeGraphScratchMemoryAMDX);
    fn(commandBuffer, executionGraph, scratch, scratchSize);
#    else
    this->vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer, executionGraph, scratch, scratchSize);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
void DeviceTable::CmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize,
                                       const VkDispatchGraphCountInfoAMDX *pCountInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchGraphAMDX fn = validateFunction("vkCmdDispatchGraphAMDX", this->vkCmdDispatchGraphAMDX);
    fn(commandBuffer, scratch, scratchSize, pCountInfo);
#    else
    this->vkCmdDispatchGraphAMDX(commandBuffer, scratch, scratchSize, pCountInfo);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
void DeviceTable::CmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch,
                                               VkDeviceSize scratchSize,
                                               const VkDispatchGraphCountInfoAMDX *pCountInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchGraphIndirectAMDX fn =
        validateFunction("vkCmdDispatchGraphIndirectAMDX", this->vkCmdDispatchGraphIndirectAMDX);
    fn(commandBuffer, scratch, scratchSize, pCountInfo);
#    else
    this->vkCmdDispatchGraphIndirectAMDX(commandBuffer, scratch, scratchSize, pCountInfo);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 298 && (defined(VK_AMDX_shader_enqueue))
void DeviceTable::CmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch,
                                                    VkDeviceSize scratchSize, VkDeviceAddress countInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchGraphIndirectCountAMDX fn =
        validateFunction("vkCmdDispatchGraphIndirectCountAMDX", this->vkCmdDispatchGraphIndirectCountAMDX);
    fn(commandBuffer, scratch, scratchSize, countInfo);
#    else
    this->vkCmdDispatchGraphIndirectCountAMDX(commandBuffer, scratch, scratchSize, countInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdBindDescriptorSets2(VkCommandBuffer commandBuffer,
                                         const VkBindDescriptorSetsInfo *pBindDescriptorSetsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorSets2 fn =
        validateFunction("vkCmdBindDescriptorSets2", this->vkCmdBindDescriptorSets2);
    fn(commandBuffer, pBindDescriptorSetsInfo);
#    else
    this->vkCmdBindDescriptorSets2(commandBuffer, pBindDescriptorSetsInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdPushConstants2(VkCommandBuffer commandBuffer, const VkPushConstantsInfo *pPushConstantsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushConstants2 fn = validateFunction("vkCmdPushConstants2", this->vkCmdPushConstants2);
    fn(commandBuffer, pPushConstantsInfo);
#    else
    this->vkCmdPushConstants2(commandBuffer, pPushConstantsInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdPushDescriptorSet2(VkCommandBuffer commandBuffer,
                                        const VkPushDescriptorSetInfo *pPushDescriptorSetInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSet2 fn = validateFunction("vkCmdPushDescriptorSet2", this->vkCmdPushDescriptorSet2);
    fn(commandBuffer, pPushDescriptorSetInfo);
#    else
    this->vkCmdPushDescriptorSet2(commandBuffer, pPushDescriptorSetInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdPushDescriptorSetWithTemplate2(
    VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfo *pPushDescriptorSetWithTemplateInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSetWithTemplate2 fn =
        validateFunction("vkCmdPushDescriptorSetWithTemplate2", this->vkCmdPushDescriptorSetWithTemplate2);
    fn(commandBuffer, pPushDescriptorSetWithTemplateInfo);
#    else
    this->vkCmdPushDescriptorSetWithTemplate2(commandBuffer, pPushDescriptorSetWithTemplateInfo);
#    endif
}
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer))
void DeviceTable::CmdSetDescriptorBufferOffsets2EXT(
    VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT *pSetDescriptorBufferOffsetsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDescriptorBufferOffsets2EXT fn =
        validateFunction("vkCmdSetDescriptorBufferOffsets2EXT", this->vkCmdSetDescriptorBufferOffsets2EXT);
    fn(commandBuffer, pSetDescriptorBufferOffsetsInfo);
#    else
    this->vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);
#    endif
}
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer))
void DeviceTable::CmdBindDescriptorBufferEmbeddedSamplers2EXT(
    VkCommandBuffer commandBuffer,
    const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *pBindDescriptorBufferEmbeddedSamplersInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT fn = validateFunction(
        "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT", this->vkCmdBindDescriptorBufferEmbeddedSamplers2EXT);
    fn(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
#    else
    this->vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
#    endif
}
#endif
#if defined(VK_NV_low_latency2)
VkResult DeviceTable::SetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain,
                                            const VkLatencySleepModeInfoNV *pSleepModeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetLatencySleepModeNV fn = validateFunction("vkSetLatencySleepModeNV", this->vkSetLatencySleepModeNV);
    return fn(device, swapchain, pSleepModeInfo);
#    else
    return this->vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
#    endif
}
#endif
#if defined(VK_NV_low_latency2)
VkResult DeviceTable::LatencySleepNV(VkDevice device, VkSwapchainKHR swapchain,
                                     const VkLatencySleepInfoNV *pSleepInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkLatencySleepNV fn = validateFunction("vkLatencySleepNV", this->vkLatencySleepNV);
    return fn(device, swapchain, pSleepInfo);
#    else
    return this->vkLatencySleepNV(device, swapchain, pSleepInfo);
#    endif
}
#endif
#if defined(VK_NV_low_latency2)
void DeviceTable::SetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain,
                                     const VkSetLatencyMarkerInfoNV *pLatencyMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetLatencyMarkerNV fn = validateFunction("vkSetLatencyMarkerNV", this->vkSetLatencyMarkerNV);
    fn(device, swapchain, pLatencyMarkerInfo);
#    else
    this->vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
#    endif
}
#endif
#if VK_HEADER_VERSION >= 271 && (defined(VK_NV_low_latency2))
void DeviceTable::GetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain,
                                      VkGetLatencyMarkerInfoNV *pLatencyMarkerInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetLatencyTimingsNV fn = validateFunction("vkGetLatencyTimingsNV", this->vkGetLatencyTimingsNV);
    fn(device, swapchain, pLatencyMarkerInfo);
#    else
    this->vkGetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);
#    endif
}
#endif
#if defined(VK_NV_low_latency2)
void DeviceTable::QueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV *pQueueTypeInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueNotifyOutOfBandNV fn =
        validateFunction("vkQueueNotifyOutOfBandNV", this->vkQueueNotifyOutOfBandNV);
    fn(queue, pQueueTypeInfo);
#    else
    this->vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer,
                                                     const VkRenderingAttachmentLocationInfo *pLocationInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRenderingAttachmentLocations fn =
        validateFunction("vkCmdSetRenderingAttachmentLocations", this->vkCmdSetRenderingAttachmentLocations);
    fn(commandBuffer, pLocationInfo);
#    else
    this->vkCmdSetRenderingAttachmentLocations(commandBuffer, pLocationInfo);
#    endif
}
#endif
#if defined(VKIT_API_VERSION_1_4)
void DeviceTable::CmdSetRenderingInputAttachmentIndices(
    VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfo *pInputAttachmentIndexInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRenderingInputAttachmentIndices fn =
        validateFunction("vkCmdSetRenderingInputAttachmentIndices", this->vkCmdSetRenderingInputAttachmentIndices);
    fn(commandBuffer, pInputAttachmentIndexInfo);
#    else
    this->vkCmdSetRenderingInputAttachmentIndices(commandBuffer, pInputAttachmentIndexInfo);
#    endif
}
#endif
#if (defined(VK_EXT_shader_object) && defined(VK_EXT_depth_clamp_control)) || defined(VK_EXT_depth_clamp_control)
void DeviceTable::CmdSetDepthClampRangeEXT(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode,
                                           const VkDepthClampRangeEXT *pDepthClampRange) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthClampRangeEXT fn =
        validateFunction("vkCmdSetDepthClampRangeEXT", this->vkCmdSetDepthClampRangeEXT);
    fn(commandBuffer, depthClampMode, pDepthClampRange);
#    else
    this->vkCmdSetDepthClampRangeEXT(commandBuffer, depthClampMode, pDepthClampRange);
#    endif
}
#endif
#if defined(VK_EXT_external_memory_metal)
VkResult DeviceTable::GetMemoryMetalHandleEXT(VkDevice device, const VkMemoryGetMetalHandleInfoEXT *pGetMetalHandleInfo,
                                              void **pHandle) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryMetalHandleEXT fn =
        validateFunction("vkGetMemoryMetalHandleEXT", this->vkGetMemoryMetalHandleEXT);
    return fn(device, pGetMetalHandleInfo, pHandle);
#    else
    return this->vkGetMemoryMetalHandleEXT(device, pGetMetalHandleInfo, pHandle);
#    endif
}
#endif
#if defined(VK_EXT_external_memory_metal)
VkResult DeviceTable::GetMemoryMetalHandlePropertiesEXT(
    VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void *pHandle,
    VkMemoryMetalHandlePropertiesEXT *pMemoryMetalHandleProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetMemoryMetalHandlePropertiesEXT fn =
        validateFunction("vkGetMemoryMetalHandlePropertiesEXT", this->vkGetMemoryMetalHandlePropertiesEXT);
    return fn(device, handleType, pHandle, pMemoryMetalHandleProperties);
#    else
    return this->vkGetMemoryMetalHandlePropertiesEXT(device, handleType, pHandle, pMemoryMetalHandleProperties);
#    endif
}
#endif
#if defined(VK_NV_cooperative_vector)
VkResult DeviceTable::ConvertCooperativeVectorMatrixNV(VkDevice device,
                                                       const VkConvertCooperativeVectorMatrixInfoNV *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkConvertCooperativeVectorMatrixNV fn =
        validateFunction("vkConvertCooperativeVectorMatrixNV", this->vkConvertCooperativeVectorMatrixNV);
    return fn(device, pInfo);
#    else
    return this->vkConvertCooperativeVectorMatrixNV(device, pInfo);
#    endif
}
#endif
#if defined(VK_NV_cooperative_vector)
void DeviceTable::CmdConvertCooperativeVectorMatrixNV(VkCommandBuffer commandBuffer, uint32_t infoCount,
                                                      const VkConvertCooperativeVectorMatrixInfoNV *pInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdConvertCooperativeVectorMatrixNV fn =
        validateFunction("vkCmdConvertCooperativeVectorMatrixNV", this->vkCmdConvertCooperativeVectorMatrixNV);
    fn(commandBuffer, infoCount, pInfos);
#    else
    this->vkCmdConvertCooperativeVectorMatrixNV(commandBuffer, infoCount, pInfos);
#    endif
}
#endif
#if defined(VK_QCOM_tile_shading)
void DeviceTable::CmdDispatchTileQCOM(VkCommandBuffer commandBuffer,
                                      const VkDispatchTileInfoQCOM *pDispatchTileInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchTileQCOM fn = validateFunction("vkCmdDispatchTileQCOM", this->vkCmdDispatchTileQCOM);
    fn(commandBuffer, pDispatchTileInfo);
#    else
    this->vkCmdDispatchTileQCOM(commandBuffer, pDispatchTileInfo);
#    endif
}
#endif
#if defined(VK_QCOM_tile_shading)
void DeviceTable::CmdBeginPerTileExecutionQCOM(VkCommandBuffer commandBuffer,
                                               const VkPerTileBeginInfoQCOM *pPerTileBeginInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginPerTileExecutionQCOM fn =
        validateFunction("vkCmdBeginPerTileExecutionQCOM", this->vkCmdBeginPerTileExecutionQCOM);
    fn(commandBuffer, pPerTileBeginInfo);
#    else
    this->vkCmdBeginPerTileExecutionQCOM(commandBuffer, pPerTileBeginInfo);
#    endif
}
#endif
#if defined(VK_QCOM_tile_shading)
void DeviceTable::CmdEndPerTileExecutionQCOM(VkCommandBuffer commandBuffer,
                                             const VkPerTileEndInfoQCOM *pPerTileEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndPerTileExecutionQCOM fn =
        validateFunction("vkCmdEndPerTileExecutionQCOM", this->vkCmdEndPerTileExecutionQCOM);
    fn(commandBuffer, pPerTileEndInfo);
#    else
    this->vkCmdEndPerTileExecutionQCOM(commandBuffer, pPerTileEndInfo);
#    endif
}
#endif
#if defined(VK_NV_external_compute_queue)
VkResult DeviceTable::CreateExternalComputeQueueNV(VkDevice device,
                                                   const VkExternalComputeQueueCreateInfoNV *pCreateInfo,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkExternalComputeQueueNV *pExternalQueue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateExternalComputeQueueNV fn =
        validateFunction("vkCreateExternalComputeQueueNV", this->vkCreateExternalComputeQueueNV);
    return fn(device, pCreateInfo, pAllocator, pExternalQueue);
#    else
    return this->vkCreateExternalComputeQueueNV(device, pCreateInfo, pAllocator, pExternalQueue);
#    endif
}
#endif
#if defined(VK_NV_external_compute_queue)
void DeviceTable::DestroyExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueNV externalQueue,
                                                const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyExternalComputeQueueNV fn =
        validateFunction("vkDestroyExternalComputeQueueNV", this->vkDestroyExternalComputeQueueNV);
    fn(device, externalQueue, pAllocator);
#    else
    this->vkDestroyExternalComputeQueueNV(device, externalQueue, pAllocator);
#    endif
}
#endif
#if defined(VK_NV_external_compute_queue)
void DeviceTable::GetExternalComputeQueueDataNV(VkExternalComputeQueueNV externalQueue,
                                                VkExternalComputeQueueDataParamsNV *params, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetExternalComputeQueueDataNV fn =
        validateFunction("vkGetExternalComputeQueueDataNV", this->vkGetExternalComputeQueueDataNV);
    fn(externalQueue, params, pData);
#    else
    this->vkGetExternalComputeQueueDataNV(externalQueue, params, pData);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
VkResult DeviceTable::CreateTensorARM(VkDevice device, const VkTensorCreateInfoARM *pCreateInfo,
                                      const VkAllocationCallbacks *pAllocator, VkTensorARM *pTensor) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateTensorARM fn = validateFunction("vkCreateTensorARM", this->vkCreateTensorARM);
    return fn(device, pCreateInfo, pAllocator, pTensor);
#    else
    return this->vkCreateTensorARM(device, pCreateInfo, pAllocator, pTensor);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void DeviceTable::DestroyTensorARM(VkDevice device, VkTensorARM tensor, const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyTensorARM fn = validateFunction("vkDestroyTensorARM", this->vkDestroyTensorARM);
    fn(device, tensor, pAllocator);
#    else
    this->vkDestroyTensorARM(device, tensor, pAllocator);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
VkResult DeviceTable::CreateTensorViewARM(VkDevice device, const VkTensorViewCreateInfoARM *pCreateInfo,
                                          const VkAllocationCallbacks *pAllocator, VkTensorViewARM *pView) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateTensorViewARM fn = validateFunction("vkCreateTensorViewARM", this->vkCreateTensorViewARM);
    return fn(device, pCreateInfo, pAllocator, pView);
#    else
    return this->vkCreateTensorViewARM(device, pCreateInfo, pAllocator, pView);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void DeviceTable::DestroyTensorViewARM(VkDevice device, VkTensorViewARM tensorView,
                                       const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyTensorViewARM fn = validateFunction("vkDestroyTensorViewARM", this->vkDestroyTensorViewARM);
    fn(device, tensorView, pAllocator);
#    else
    this->vkDestroyTensorViewARM(device, tensorView, pAllocator);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void DeviceTable::GetTensorMemoryRequirementsARM(VkDevice device, const VkTensorMemoryRequirementsInfoARM *pInfo,
                                                 VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetTensorMemoryRequirementsARM fn =
        validateFunction("vkGetTensorMemoryRequirementsARM", this->vkGetTensorMemoryRequirementsARM);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
VkResult DeviceTable::BindTensorMemoryARM(VkDevice device, uint32_t bindInfoCount,
                                          const VkBindTensorMemoryInfoARM *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindTensorMemoryARM fn = validateFunction("vkBindTensorMemoryARM", this->vkBindTensorMemoryARM);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindTensorMemoryARM(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void DeviceTable::GetDeviceTensorMemoryRequirementsARM(VkDevice device,
                                                       const VkDeviceTensorMemoryRequirementsARM *pInfo,
                                                       VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceTensorMemoryRequirementsARM fn =
        validateFunction("vkGetDeviceTensorMemoryRequirementsARM", this->vkGetDeviceTensorMemoryRequirementsARM);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDeviceTensorMemoryRequirementsARM(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_ARM_tensors)
void DeviceTable::CmdCopyTensorARM(VkCommandBuffer commandBuffer, const VkCopyTensorInfoARM *pCopyTensorInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyTensorARM fn = validateFunction("vkCmdCopyTensorARM", this->vkCmdCopyTensorARM);
    fn(commandBuffer, pCopyTensorInfo);
#    else
    this->vkCmdCopyTensorARM(commandBuffer, pCopyTensorInfo);
#    endif
}
#endif
#if (defined(VK_ARM_tensors) && defined(VK_EXT_descriptor_buffer))
VkResult DeviceTable::GetTensorOpaqueCaptureDescriptorDataARM(VkDevice device,
                                                              const VkTensorCaptureDescriptorDataInfoARM *pInfo,
                                                              void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetTensorOpaqueCaptureDescriptorDataARM fn =
        validateFunction("vkGetTensorOpaqueCaptureDescriptorDataARM", this->vkGetTensorOpaqueCaptureDescriptorDataARM);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetTensorOpaqueCaptureDescriptorDataARM(device, pInfo, pData);
#    endif
}
#endif
#if (defined(VK_ARM_tensors) && defined(VK_EXT_descriptor_buffer))
VkResult DeviceTable::GetTensorViewOpaqueCaptureDescriptorDataARM(VkDevice device,
                                                                  const VkTensorViewCaptureDescriptorDataInfoARM *pInfo,
                                                                  void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetTensorViewOpaqueCaptureDescriptorDataARM fn = validateFunction(
        "vkGetTensorViewOpaqueCaptureDescriptorDataARM", this->vkGetTensorViewOpaqueCaptureDescriptorDataARM);
    return fn(device, pInfo, pData);
#    else
    return this->vkGetTensorViewOpaqueCaptureDescriptorDataARM(device, pInfo, pData);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::CreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation,
                                                  VkPipelineCache pipelineCache, uint32_t createInfoCount,
                                                  const VkDataGraphPipelineCreateInfoARM *pCreateInfos,
                                                  const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDataGraphPipelinesARM fn =
        validateFunction("vkCreateDataGraphPipelinesARM", this->vkCreateDataGraphPipelinesARM);
    return fn(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
#    else
    return this->vkCreateDataGraphPipelinesARM(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos,
                                               pAllocator, pPipelines);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::CreateDataGraphPipelineSessionARM(VkDevice device,
                                                        const VkDataGraphPipelineSessionCreateInfoARM *pCreateInfo,
                                                        const VkAllocationCallbacks *pAllocator,
                                                        VkDataGraphPipelineSessionARM *pSession) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDataGraphPipelineSessionARM fn =
        validateFunction("vkCreateDataGraphPipelineSessionARM", this->vkCreateDataGraphPipelineSessionARM);
    return fn(device, pCreateInfo, pAllocator, pSession);
#    else
    return this->vkCreateDataGraphPipelineSessionARM(device, pCreateInfo, pAllocator, pSession);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::GetDataGraphPipelineSessionBindPointRequirementsARM(
    VkDevice device, const VkDataGraphPipelineSessionBindPointRequirementsInfoARM *pInfo,
    uint32_t *pBindPointRequirementCount,
    VkDataGraphPipelineSessionBindPointRequirementARM *pBindPointRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDataGraphPipelineSessionBindPointRequirementsARM fn =
        validateFunction("vkGetDataGraphPipelineSessionBindPointRequirementsARM",
                         this->vkGetDataGraphPipelineSessionBindPointRequirementsARM);
    return fn(device, pInfo, pBindPointRequirementCount, pBindPointRequirements);
#    else
    return this->vkGetDataGraphPipelineSessionBindPointRequirementsARM(device, pInfo, pBindPointRequirementCount,
                                                                       pBindPointRequirements);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
void DeviceTable::GetDataGraphPipelineSessionMemoryRequirementsARM(
    VkDevice device, const VkDataGraphPipelineSessionMemoryRequirementsInfoARM *pInfo,
    VkMemoryRequirements2 *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDataGraphPipelineSessionMemoryRequirementsARM fn = validateFunction(
        "vkGetDataGraphPipelineSessionMemoryRequirementsARM", this->vkGetDataGraphPipelineSessionMemoryRequirementsARM);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDataGraphPipelineSessionMemoryRequirementsARM(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::BindDataGraphPipelineSessionMemoryARM(
    VkDevice device, uint32_t bindInfoCount, const VkBindDataGraphPipelineSessionMemoryInfoARM *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindDataGraphPipelineSessionMemoryARM fn =
        validateFunction("vkBindDataGraphPipelineSessionMemoryARM", this->vkBindDataGraphPipelineSessionMemoryARM);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindDataGraphPipelineSessionMemoryARM(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
void DeviceTable::DestroyDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionARM session,
                                                     const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDataGraphPipelineSessionARM fn =
        validateFunction("vkDestroyDataGraphPipelineSessionARM", this->vkDestroyDataGraphPipelineSessionARM);
    fn(device, session, pAllocator);
#    else
    this->vkDestroyDataGraphPipelineSessionARM(device, session, pAllocator);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
void DeviceTable::CmdDispatchDataGraphARM(VkCommandBuffer commandBuffer, VkDataGraphPipelineSessionARM session,
                                          const VkDataGraphPipelineDispatchInfoARM *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchDataGraphARM fn =
        validateFunction("vkCmdDispatchDataGraphARM", this->vkCmdDispatchDataGraphARM);
    fn(commandBuffer, session, pInfo);
#    else
    this->vkCmdDispatchDataGraphARM(commandBuffer, session, pInfo);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::GetDataGraphPipelineAvailablePropertiesARM(VkDevice device,
                                                                 const VkDataGraphPipelineInfoARM *pPipelineInfo,
                                                                 uint32_t *pPropertiesCount,
                                                                 VkDataGraphPipelinePropertyARM *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDataGraphPipelineAvailablePropertiesARM fn = validateFunction(
        "vkGetDataGraphPipelineAvailablePropertiesARM", this->vkGetDataGraphPipelineAvailablePropertiesARM);
    return fn(device, pPipelineInfo, pPropertiesCount, pProperties);
#    else
    return this->vkGetDataGraphPipelineAvailablePropertiesARM(device, pPipelineInfo, pPropertiesCount, pProperties);
#    endif
}
#endif
#if defined(VK_ARM_data_graph)
VkResult DeviceTable::GetDataGraphPipelinePropertiesARM(VkDevice device,
                                                        const VkDataGraphPipelineInfoARM *pPipelineInfo,
                                                        uint32_t propertiesCount,
                                                        VkDataGraphPipelinePropertyQueryResultARM *pProperties) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDataGraphPipelinePropertiesARM fn =
        validateFunction("vkGetDataGraphPipelinePropertiesARM", this->vkGetDataGraphPipelinePropertiesARM);
    return fn(device, pPipelineInfo, propertiesCount, pProperties);
#    else
    return this->vkGetDataGraphPipelinePropertiesARM(device, pPipelineInfo, propertiesCount, pProperties);
#    endif
}
#endif
#if defined(VK_EXT_host_query_reset)
void DeviceTable::ResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery,
                                    uint32_t queryCount) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkResetQueryPoolEXT fn = validateFunction("vkResetQueryPoolEXT", this->vkResetQueryPoolEXT);
    fn(device, queryPool, firstQuery, queryCount);
#    else
    this->vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
#    endif
}
#endif
#if defined(VK_KHR_maintenance5)
void DeviceTable::GetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR *pRenderingAreaInfo,
                                                 VkExtent2D *pGranularity) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRenderingAreaGranularityKHR fn =
        validateFunction("vkGetRenderingAreaGranularityKHR", this->vkGetRenderingAreaGranularityKHR);
    fn(device, pRenderingAreaInfo, pGranularity);
#    else
    this->vkGetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);
#    endif
}
#endif
#if defined(VK_KHR_push_descriptor)
void DeviceTable::CmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                                          VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount,
                                          const VkWriteDescriptorSet *pDescriptorWrites) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSetKHR fn =
        validateFunction("vkCmdPushDescriptorSetKHR", this->vkCmdPushDescriptorSetKHR);
    fn(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
#    else
    this->vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount,
                                    pDescriptorWrites);
#    endif
}
#endif
#if defined(VK_KHR_maintenance1)
void DeviceTable::TrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkTrimCommandPoolKHR fn = validateFunction("vkTrimCommandPoolKHR", this->vkTrimCommandPoolKHR);
    fn(device, commandPool, flags);
#    else
    this->vkTrimCommandPoolKHR(device, commandPool, flags);
#    endif
}
#endif
#if defined(VK_KHR_device_group)
void DeviceTable::GetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex,
                                                      uint32_t remoteDeviceIndex,
                                                      VkPeerMemoryFeatureFlagsKHR *pPeerMemoryFeatures) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR fn =
        validateFunction("vkGetDeviceGroupPeerMemoryFeaturesKHR", this->vkGetDeviceGroupPeerMemoryFeaturesKHR);
    fn(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
#    else
    this->vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex,
                                                pPeerMemoryFeatures);
#    endif
}
#endif
#if defined(VK_KHR_bind_memory2)
VkResult DeviceTable::BindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount,
                                           const VkBindBufferMemoryInfoKHR *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindBufferMemory2KHR fn = validateFunction("vkBindBufferMemory2KHR", this->vkBindBufferMemory2KHR);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VK_KHR_bind_memory2)
VkResult DeviceTable::BindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount,
                                          const VkBindImageMemoryInfoKHR *pBindInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkBindImageMemory2KHR fn = validateFunction("vkBindImageMemory2KHR", this->vkBindImageMemory2KHR);
    return fn(device, bindInfoCount, pBindInfos);
#    else
    return this->vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
#    endif
}
#endif
#if defined(VK_KHR_device_group)
void DeviceTable::CmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDeviceMaskKHR fn = validateFunction("vkCmdSetDeviceMaskKHR", this->vkCmdSetDeviceMaskKHR);
    fn(commandBuffer, deviceMask);
#    else
    this->vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
#    endif
}
#endif
#if defined(VK_KHR_device_group)
void DeviceTable::CmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY,
                                     uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY,
                                     uint32_t groupCountZ) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDispatchBaseKHR fn = validateFunction("vkCmdDispatchBaseKHR", this->vkCmdDispatchBaseKHR);
    fn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
#    else
    this->vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY,
                               groupCountZ);
#    endif
}
#endif
#if defined(VK_KHR_descriptor_update_template)
VkResult DeviceTable::CreateDescriptorUpdateTemplateKHR(VkDevice device,
                                                        const VkDescriptorUpdateTemplateCreateInfoKHR *pCreateInfo,
                                                        const VkAllocationCallbacks *pAllocator,
                                                        VkDescriptorUpdateTemplateKHR *pDescriptorUpdateTemplate) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateDescriptorUpdateTemplateKHR fn =
        validateFunction("vkCreateDescriptorUpdateTemplateKHR", this->vkCreateDescriptorUpdateTemplateKHR);
    return fn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
#    else
    return this->vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
#    endif
}
#endif
#if defined(VK_KHR_descriptor_update_template)
void DeviceTable::DestroyDescriptorUpdateTemplateKHR(VkDevice device,
                                                     VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate,
                                                     const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyDescriptorUpdateTemplateKHR fn =
        validateFunction("vkDestroyDescriptorUpdateTemplateKHR", this->vkDestroyDescriptorUpdateTemplateKHR);
    fn(device, descriptorUpdateTemplate, pAllocator);
#    else
    this->vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_descriptor_update_template)
void DeviceTable::UpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet,
                                                     VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate,
                                                     const void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUpdateDescriptorSetWithTemplateKHR fn =
        validateFunction("vkUpdateDescriptorSetWithTemplateKHR", this->vkUpdateDescriptorSetWithTemplateKHR);
    fn(device, descriptorSet, descriptorUpdateTemplate, pData);
#    else
    this->vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
#    endif
}
#endif
#if (defined(VK_KHR_push_descriptor) &&                                                                                \
     (defined(VKIT_API_VERSION_1_1) || defined(VK_KHR_descriptor_update_template))) ||                                 \
    (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor))
void DeviceTable::CmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer,
                                                      VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate,
                                                      VkPipelineLayout layout, uint32_t set, const void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSetWithTemplateKHR fn =
        validateFunction("vkCmdPushDescriptorSetWithTemplateKHR", this->vkCmdPushDescriptorSetWithTemplateKHR);
    fn(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
#    else
    this->vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
#    endif
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
void DeviceTable::GetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR *pInfo,
                                                  VkMemoryRequirements2KHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferMemoryRequirements2KHR fn =
        validateFunction("vkGetBufferMemoryRequirements2KHR", this->vkGetBufferMemoryRequirements2KHR);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
void DeviceTable::GetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2KHR *pInfo,
                                                 VkMemoryRequirements2KHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageMemoryRequirements2KHR fn =
        validateFunction("vkGetImageMemoryRequirements2KHR", this->vkGetImageMemoryRequirements2KHR);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
void DeviceTable::GetImageSparseMemoryRequirements2KHR(
    VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR *pInfo, uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2KHR *pSparseMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSparseMemoryRequirements2KHR fn =
        validateFunction("vkGetImageSparseMemoryRequirements2KHR", this->vkGetImageSparseMemoryRequirements2KHR);
    fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#    else
    this->vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount,
                                                 pSparseMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_maintenance4)
void DeviceTable::GetDeviceBufferMemoryRequirementsKHR(VkDevice device,
                                                       const VkDeviceBufferMemoryRequirementsKHR *pInfo,
                                                       VkMemoryRequirements2KHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceBufferMemoryRequirementsKHR fn =
        validateFunction("vkGetDeviceBufferMemoryRequirementsKHR", this->vkGetDeviceBufferMemoryRequirementsKHR);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_maintenance4)
void DeviceTable::GetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR *pInfo,
                                                      VkMemoryRequirements2KHR *pMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageMemoryRequirementsKHR fn =
        validateFunction("vkGetDeviceImageMemoryRequirementsKHR", this->vkGetDeviceImageMemoryRequirementsKHR);
    fn(device, pInfo, pMemoryRequirements);
#    else
    this->vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_maintenance4)
void DeviceTable::GetDeviceImageSparseMemoryRequirementsKHR(
    VkDevice device, const VkDeviceImageMemoryRequirementsKHR *pInfo, uint32_t *pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2KHR *pSparseMemoryRequirements) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageSparseMemoryRequirementsKHR fn = validateFunction(
        "vkGetDeviceImageSparseMemoryRequirementsKHR", this->vkGetDeviceImageSparseMemoryRequirementsKHR);
    fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
#    else
    this->vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount,
                                                      pSparseMemoryRequirements);
#    endif
}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion)
VkResult DeviceTable::CreateSamplerYcbcrConversionKHR(VkDevice device,
                                                      const VkSamplerYcbcrConversionCreateInfoKHR *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkSamplerYcbcrConversionKHR *pYcbcrConversion) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateSamplerYcbcrConversionKHR fn =
        validateFunction("vkCreateSamplerYcbcrConversionKHR", this->vkCreateSamplerYcbcrConversionKHR);
    return fn(device, pCreateInfo, pAllocator, pYcbcrConversion);
#    else
    return this->vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
#    endif
}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion)
void DeviceTable::DestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion,
                                                   const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroySamplerYcbcrConversionKHR fn =
        validateFunction("vkDestroySamplerYcbcrConversionKHR", this->vkDestroySamplerYcbcrConversionKHR);
    fn(device, ycbcrConversion, pAllocator);
#    else
    this->vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
#    endif
}
#endif
#if defined(VK_KHR_maintenance3)
void DeviceTable::GetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                   VkDescriptorSetLayoutSupportKHR *pSupport) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDescriptorSetLayoutSupportKHR fn =
        validateFunction("vkGetDescriptorSetLayoutSupportKHR", this->vkGetDescriptorSetLayoutSupportKHR);
    fn(device, pCreateInfo, pSupport);
#    else
    this->vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
#    endif
}
#endif
#if defined(VK_EXT_calibrated_timestamps)
VkResult DeviceTable::GetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount,
                                                 const VkCalibratedTimestampInfoEXT *pTimestampInfos,
                                                 uint64_t *pTimestamps, uint64_t *pMaxDeviation) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetCalibratedTimestampsEXT fn =
        validateFunction("vkGetCalibratedTimestampsEXT", this->vkGetCalibratedTimestampsEXT);
    return fn(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
#    else
    return this->vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
#    endif
}
#endif
#if defined(VK_KHR_create_renderpass2)
VkResult DeviceTable::CreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2KHR *pCreateInfo,
                                           const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreateRenderPass2KHR fn = validateFunction("vkCreateRenderPass2KHR", this->vkCreateRenderPass2KHR);
    return fn(device, pCreateInfo, pAllocator, pRenderPass);
#    else
    return this->vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
#    endif
}
#endif
#if defined(VK_KHR_create_renderpass2)
void DeviceTable::CmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin,
                                         const VkSubpassBeginInfoKHR *pSubpassBeginInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginRenderPass2KHR fn =
        validateFunction("vkCmdBeginRenderPass2KHR", this->vkCmdBeginRenderPass2KHR);
    fn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
#    else
    this->vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
#    endif
}
#endif
#if defined(VK_KHR_create_renderpass2)
void DeviceTable::CmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR *pSubpassBeginInfo,
                                     const VkSubpassEndInfoKHR *pSubpassEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdNextSubpass2KHR fn = validateFunction("vkCmdNextSubpass2KHR", this->vkCmdNextSubpass2KHR);
    fn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
#    else
    this->vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
#    endif
}
#endif
#if defined(VK_KHR_create_renderpass2)
void DeviceTable::CmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR *pSubpassEndInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRenderPass2KHR fn = validateFunction("vkCmdEndRenderPass2KHR", this->vkCmdEndRenderPass2KHR);
    fn(commandBuffer, pSubpassEndInfo);
#    else
    this->vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
#    endif
}
#endif
#if defined(VK_KHR_timeline_semaphore)
VkResult DeviceTable::GetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t *pValue) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetSemaphoreCounterValueKHR fn =
        validateFunction("vkGetSemaphoreCounterValueKHR", this->vkGetSemaphoreCounterValueKHR);
    return fn(device, semaphore, pValue);
#    else
    return this->vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
#    endif
}
#endif
#if defined(VK_KHR_timeline_semaphore)
VkResult DeviceTable::WaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfoKHR *pWaitInfo,
                                        uint64_t timeout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkWaitSemaphoresKHR fn = validateFunction("vkWaitSemaphoresKHR", this->vkWaitSemaphoresKHR);
    return fn(device, pWaitInfo, timeout);
#    else
    return this->vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
#    endif
}
#endif
#if defined(VK_KHR_timeline_semaphore)
VkResult DeviceTable::SignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfoKHR *pSignalInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSignalSemaphoreKHR fn = validateFunction("vkSignalSemaphoreKHR", this->vkSignalSemaphoreKHR);
    return fn(device, pSignalInfo);
#    else
    return this->vkSignalSemaphoreKHR(device, pSignalInfo);
#    endif
}
#endif
#if defined(VK_KHR_draw_indirect_count)
void DeviceTable::CmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                          VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount,
                                          uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndirectCountKHR fn =
        validateFunction("vkCmdDrawIndirectCountKHR", this->vkCmdDrawIndirectCountKHR);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                    stride);
#    endif
}
#endif
#if defined(VK_AMD_draw_indirect_count)
void DeviceTable::CmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                          VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount,
                                          uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndirectCountAMD fn =
        validateFunction("vkCmdDrawIndirectCountAMD", this->vkCmdDrawIndirectCountAMD);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                    stride);
#    endif
}
#endif
#if defined(VK_KHR_draw_indirect_count)
void DeviceTable::CmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                                 VkBuffer countBuffer, VkDeviceSize countBufferOffset,
                                                 uint32_t maxDrawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndexedIndirectCountKHR fn =
        validateFunction("vkCmdDrawIndexedIndirectCountKHR", this->vkCmdDrawIndexedIndirectCountKHR);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                           stride);
#    endif
}
#endif
#if defined(VK_AMD_draw_indirect_count)
void DeviceTable::CmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                                 VkBuffer countBuffer, VkDeviceSize countBufferOffset,
                                                 uint32_t maxDrawCount, uint32_t stride) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdDrawIndexedIndirectCountAMD fn =
        validateFunction("vkCmdDrawIndexedIndirectCountAMD", this->vkCmdDrawIndexedIndirectCountAMD);
    fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
#    else
    this->vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount,
                                           stride);
#    endif
}
#endif
#if defined(VK_NV_ray_tracing)
VkResult DeviceTable::GetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup,
                                                        uint32_t groupCount, size_t dataSize, void *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetRayTracingShaderGroupHandlesNV fn =
        validateFunction("vkGetRayTracingShaderGroupHandlesNV", this->vkGetRayTracingShaderGroupHandlesNV);
    return fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
#    else
    return this->vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
#    endif
}
#endif
#if defined(VK_KHR_buffer_device_address)
uint64_t DeviceTable::GetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferOpaqueCaptureAddressKHR fn =
        validateFunction("vkGetBufferOpaqueCaptureAddressKHR", this->vkGetBufferOpaqueCaptureAddressKHR);
    return fn(device, pInfo);
#    else
    return this->vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_buffer_device_address)
VkDeviceAddress DeviceTable::GetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferDeviceAddressKHR fn =
        validateFunction("vkGetBufferDeviceAddressKHR", this->vkGetBufferDeviceAddressKHR);
    return fn(device, pInfo);
#    else
    return this->vkGetBufferDeviceAddressKHR(device, pInfo);
#    endif
}
#endif
#if defined(VK_EXT_buffer_device_address)
VkDeviceAddress DeviceTable::GetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfoEXT *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetBufferDeviceAddressEXT fn =
        validateFunction("vkGetBufferDeviceAddressEXT", this->vkGetBufferDeviceAddressEXT);
    return fn(device, pInfo);
#    else
    return this->vkGetBufferDeviceAddressEXT(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_buffer_device_address)
uint64_t DeviceTable::GetDeviceMemoryOpaqueCaptureAddressKHR(
    VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR *pInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR fn =
        validateFunction("vkGetDeviceMemoryOpaqueCaptureAddressKHR", this->vkGetDeviceMemoryOpaqueCaptureAddressKHR);
    return fn(device, pInfo);
#    else
    return this->vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
#    endif
}
#endif
#if defined(VK_KHR_line_rasterization)
void DeviceTable::CmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor,
                                       uint16_t lineStipplePattern) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineStippleKHR fn = validateFunction("vkCmdSetLineStippleKHR", this->vkCmdSetLineStippleKHR);
    fn(commandBuffer, lineStippleFactor, lineStipplePattern);
#    else
    this->vkCmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);
#    endif
}
#endif
#if defined(VK_EXT_line_rasterization)
void DeviceTable::CmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor,
                                       uint16_t lineStipplePattern) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetLineStippleEXT fn = validateFunction("vkCmdSetLineStippleEXT", this->vkCmdSetLineStippleEXT);
    fn(commandBuffer, lineStippleFactor, lineStipplePattern);
#    else
    this->vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetCullModeEXT fn = validateFunction("vkCmdSetCullModeEXT", this->vkCmdSetCullModeEXT);
    fn(commandBuffer, cullMode);
#    else
    this->vkCmdSetCullModeEXT(commandBuffer, cullMode);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetFrontFaceEXT fn = validateFunction("vkCmdSetFrontFaceEXT", this->vkCmdSetFrontFaceEXT);
    fn(commandBuffer, frontFace);
#    else
    this->vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPrimitiveTopologyEXT fn =
        validateFunction("vkCmdSetPrimitiveTopologyEXT", this->vkCmdSetPrimitiveTopologyEXT);
    fn(commandBuffer, primitiveTopology);
#    else
    this->vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount,
                                             const VkViewport *pViewports) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetViewportWithCountEXT fn =
        validateFunction("vkCmdSetViewportWithCountEXT", this->vkCmdSetViewportWithCountEXT);
    fn(commandBuffer, viewportCount, pViewports);
#    else
    this->vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount,
                                            const VkRect2D *pScissors) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetScissorWithCountEXT fn =
        validateFunction("vkCmdSetScissorWithCountEXT", this->vkCmdSetScissorWithCountEXT);
    fn(commandBuffer, scissorCount, pScissors);
#    else
    this->vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
#    endif
}
#endif
#if defined(VK_KHR_maintenance5)
void DeviceTable::CmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset,
                                         VkDeviceSize size, VkIndexType indexType) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindIndexBuffer2KHR fn =
        validateFunction("vkCmdBindIndexBuffer2KHR", this->vkCmdBindIndexBuffer2KHR);
    fn(commandBuffer, buffer, offset, size, indexType);
#    else
    this->vkCmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,
                                           const VkBuffer *pBuffers, const VkDeviceSize *pOffsets,
                                           const VkDeviceSize *pSizes, const VkDeviceSize *pStrides) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindVertexBuffers2EXT fn =
        validateFunction("vkCmdBindVertexBuffers2EXT", this->vkCmdBindVertexBuffers2EXT);
    fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
#    else
    this->vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthTestEnableEXT fn =
        validateFunction("vkCmdSetDepthTestEnableEXT", this->vkCmdSetDepthTestEnableEXT);
    fn(commandBuffer, depthTestEnable);
#    else
    this->vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthWriteEnableEXT fn =
        validateFunction("vkCmdSetDepthWriteEnableEXT", this->vkCmdSetDepthWriteEnableEXT);
    fn(commandBuffer, depthWriteEnable);
#    else
    this->vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthCompareOpEXT fn =
        validateFunction("vkCmdSetDepthCompareOpEXT", this->vkCmdSetDepthCompareOpEXT);
    fn(commandBuffer, depthCompareOp);
#    else
    this->vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBoundsTestEnableEXT fn =
        validateFunction("vkCmdSetDepthBoundsTestEnableEXT", this->vkCmdSetDepthBoundsTestEnableEXT);
    fn(commandBuffer, depthBoundsTestEnable);
#    else
    this->vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilTestEnableEXT fn =
        validateFunction("vkCmdSetStencilTestEnableEXT", this->vkCmdSetStencilTestEnableEXT);
    fn(commandBuffer, stencilTestEnable);
#    else
    this->vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp,
                                     VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetStencilOpEXT fn = validateFunction("vkCmdSetStencilOpEXT", this->vkCmdSetStencilOpEXT);
    fn(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
#    else
    this->vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer,
                                                   VkBool32 rasterizerDiscardEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRasterizerDiscardEnableEXT fn =
        validateFunction("vkCmdSetRasterizerDiscardEnableEXT", this->vkCmdSetRasterizerDiscardEnableEXT);
    fn(commandBuffer, rasterizerDiscardEnable);
#    else
    this->vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetDepthBiasEnableEXT fn =
        validateFunction("vkCmdSetDepthBiasEnableEXT", this->vkCmdSetDepthBiasEnableEXT);
    fn(commandBuffer, depthBiasEnable);
#    else
    this->vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
#    endif
}
#endif
#if defined(VK_EXT_extended_dynamic_state2) || defined(VK_EXT_shader_object)
void DeviceTable::CmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetPrimitiveRestartEnableEXT fn =
        validateFunction("vkCmdSetPrimitiveRestartEnableEXT", this->vkCmdSetPrimitiveRestartEnableEXT);
    fn(commandBuffer, primitiveRestartEnable);
#    else
    this->vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
#    endif
}
#endif
#if defined(VK_EXT_private_data)
VkResult DeviceTable::CreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfoEXT *pCreateInfo,
                                               const VkAllocationCallbacks *pAllocator,
                                               VkPrivateDataSlotEXT *pPrivateDataSlot) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCreatePrivateDataSlotEXT fn =
        validateFunction("vkCreatePrivateDataSlotEXT", this->vkCreatePrivateDataSlotEXT);
    return fn(device, pCreateInfo, pAllocator, pPrivateDataSlot);
#    else
    return this->vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
#    endif
}
#endif
#if defined(VK_EXT_private_data)
void DeviceTable::DestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotEXT privateDataSlot,
                                            const VkAllocationCallbacks *pAllocator) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkDestroyPrivateDataSlotEXT fn =
        validateFunction("vkDestroyPrivateDataSlotEXT", this->vkDestroyPrivateDataSlotEXT);
    fn(device, privateDataSlot, pAllocator);
#    else
    this->vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
#    endif
}
#endif
#if defined(VK_EXT_private_data)
VkResult DeviceTable::SetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle,
                                        VkPrivateDataSlotEXT privateDataSlot, uint64_t data) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkSetPrivateDataEXT fn = validateFunction("vkSetPrivateDataEXT", this->vkSetPrivateDataEXT);
    return fn(device, objectType, objectHandle, privateDataSlot, data);
#    else
    return this->vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
#    endif
}
#endif
#if defined(VK_EXT_private_data)
void DeviceTable::GetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle,
                                    VkPrivateDataSlotEXT privateDataSlot, uint64_t *pData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetPrivateDataEXT fn = validateFunction("vkGetPrivateDataEXT", this->vkGetPrivateDataEXT);
    fn(device, objectType, objectHandle, privateDataSlot, pData);
#    else
    this->vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR *pCopyBufferInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBuffer2KHR fn = validateFunction("vkCmdCopyBuffer2KHR", this->vkCmdCopyBuffer2KHR);
    fn(commandBuffer, pCopyBufferInfo);
#    else
    this->vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR *pCopyImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImage2KHR fn = validateFunction("vkCmdCopyImage2KHR", this->vkCmdCopyImage2KHR);
    fn(commandBuffer, pCopyImageInfo);
#    else
    this->vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR *pBlitImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBlitImage2KHR fn = validateFunction("vkCmdBlitImage2KHR", this->vkCmdBlitImage2KHR);
    fn(commandBuffer, pBlitImageInfo);
#    else
    this->vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer,
                                           const VkCopyBufferToImageInfo2KHR *pCopyBufferToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyBufferToImage2KHR fn =
        validateFunction("vkCmdCopyBufferToImage2KHR", this->vkCmdCopyBufferToImage2KHR);
    fn(commandBuffer, pCopyBufferToImageInfo);
#    else
    this->vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer,
                                           const VkCopyImageToBufferInfo2KHR *pCopyImageToBufferInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdCopyImageToBuffer2KHR fn =
        validateFunction("vkCmdCopyImageToBuffer2KHR", this->vkCmdCopyImageToBuffer2KHR);
    fn(commandBuffer, pCopyImageToBufferInfo);
#    else
    this->vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
#    endif
}
#endif
#if defined(VK_KHR_copy_commands2)
void DeviceTable::CmdResolveImage2KHR(VkCommandBuffer commandBuffer,
                                      const VkResolveImageInfo2KHR *pResolveImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResolveImage2KHR fn = validateFunction("vkCmdResolveImage2KHR", this->vkCmdResolveImage2KHR);
    fn(commandBuffer, pResolveImageInfo);
#    else
    this->vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
void DeviceTable::CmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event,
                                  const VkDependencyInfoKHR *pDependencyInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetEvent2KHR fn = validateFunction("vkCmdSetEvent2KHR", this->vkCmdSetEvent2KHR);
    fn(commandBuffer, event, pDependencyInfo);
#    else
    this->vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
void DeviceTable::CmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event,
                                    VkPipelineStageFlags2KHR stageMask) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdResetEvent2KHR fn = validateFunction("vkCmdResetEvent2KHR", this->vkCmdResetEvent2KHR);
    fn(commandBuffer, event, stageMask);
#    else
    this->vkCmdResetEvent2KHR(commandBuffer, event, stageMask);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
void DeviceTable::CmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents,
                                    const VkDependencyInfoKHR *pDependencyInfos) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWaitEvents2KHR fn = validateFunction("vkCmdWaitEvents2KHR", this->vkCmdWaitEvents2KHR);
    fn(commandBuffer, eventCount, pEvents, pDependencyInfos);
#    else
    this->vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
void DeviceTable::CmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer,
                                         const VkDependencyInfoKHR *pDependencyInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPipelineBarrier2KHR fn =
        validateFunction("vkCmdPipelineBarrier2KHR", this->vkCmdPipelineBarrier2KHR);
    fn(commandBuffer, pDependencyInfo);
#    else
    this->vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
VkResult DeviceTable::QueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR *pSubmits,
                                      VkFence fence) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkQueueSubmit2KHR fn = validateFunction("vkQueueSubmit2KHR", this->vkQueueSubmit2KHR);
    return fn(queue, submitCount, pSubmits, fence);
#    else
    return this->vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
#    endif
}
#endif
#if defined(VK_KHR_synchronization2)
void DeviceTable::CmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage,
                                        VkQueryPool queryPool, uint32_t query) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdWriteTimestamp2KHR fn = validateFunction("vkCmdWriteTimestamp2KHR", this->vkCmdWriteTimestamp2KHR);
    fn(commandBuffer, stage, queryPool, query);
#    else
    this->vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
#    endif
}
#endif
#if defined(VK_EXT_host_image_copy)
VkResult DeviceTable::CopyMemoryToImageEXT(VkDevice device,
                                           const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyMemoryToImageEXT fn = validateFunction("vkCopyMemoryToImageEXT", this->vkCopyMemoryToImageEXT);
    return fn(device, pCopyMemoryToImageInfo);
#    else
    return this->vkCopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);
#    endif
}
#endif
#if defined(VK_EXT_host_image_copy)
VkResult DeviceTable::CopyImageToMemoryEXT(VkDevice device,
                                           const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyImageToMemoryEXT fn = validateFunction("vkCopyImageToMemoryEXT", this->vkCopyImageToMemoryEXT);
    return fn(device, pCopyImageToMemoryInfo);
#    else
    return this->vkCopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);
#    endif
}
#endif
#if defined(VK_EXT_host_image_copy)
VkResult DeviceTable::CopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCopyImageToImageEXT fn = validateFunction("vkCopyImageToImageEXT", this->vkCopyImageToImageEXT);
    return fn(device, pCopyImageToImageInfo);
#    else
    return this->vkCopyImageToImageEXT(device, pCopyImageToImageInfo);
#    endif
}
#endif
#if defined(VK_EXT_host_image_copy)
VkResult DeviceTable::TransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount,
                                               const VkHostImageLayoutTransitionInfoEXT *pTransitions) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkTransitionImageLayoutEXT fn =
        validateFunction("vkTransitionImageLayoutEXT", this->vkTransitionImageLayoutEXT);
    return fn(device, transitionCount, pTransitions);
#    else
    return this->vkTransitionImageLayoutEXT(device, transitionCount, pTransitions);
#    endif
}
#endif
#if defined(VK_KHR_dynamic_rendering)
void DeviceTable::CmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR *pRenderingInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBeginRenderingKHR fn = validateFunction("vkCmdBeginRenderingKHR", this->vkCmdBeginRenderingKHR);
    fn(commandBuffer, pRenderingInfo);
#    else
    this->vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
#    endif
}
#endif
#if defined(VK_KHR_dynamic_rendering)
void DeviceTable::CmdEndRenderingKHR(VkCommandBuffer commandBuffer) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdEndRenderingKHR fn = validateFunction("vkCmdEndRenderingKHR", this->vkCmdEndRenderingKHR);
    fn(commandBuffer);
#    else
    this->vkCmdEndRenderingKHR(commandBuffer);
#    endif
}
#endif
#if defined(VK_KHR_maintenance5)
void DeviceTable::GetImageSubresourceLayout2KHR(VkDevice device, VkImage image,
                                                const VkImageSubresource2KHR *pSubresource,
                                                VkSubresourceLayout2KHR *pLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSubresourceLayout2KHR fn =
        validateFunction("vkGetImageSubresourceLayout2KHR", this->vkGetImageSubresourceLayout2KHR);
    fn(device, image, pSubresource, pLayout);
#    else
    this->vkGetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);
#    endif
}
#endif
#if defined(VK_EXT_host_image_copy) || defined(VK_EXT_image_compression_control)
void DeviceTable::GetImageSubresourceLayout2EXT(VkDevice device, VkImage image,
                                                const VkImageSubresource2EXT *pSubresource,
                                                VkSubresourceLayout2EXT *pLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetImageSubresourceLayout2EXT fn =
        validateFunction("vkGetImageSubresourceLayout2EXT", this->vkGetImageSubresourceLayout2EXT);
    fn(device, image, pSubresource, pLayout);
#    else
    this->vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
#    endif
}
#endif
#if defined(VK_EXT_swapchain_maintenance1)
VkResult DeviceTable::ReleaseSwapchainImagesEXT(VkDevice device,
                                                const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkReleaseSwapchainImagesEXT fn =
        validateFunction("vkReleaseSwapchainImagesEXT", this->vkReleaseSwapchainImagesEXT);
    return fn(device, pReleaseInfo);
#    else
    return this->vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
#    endif
}
#endif
#if defined(VK_KHR_maintenance5)
void DeviceTable::GetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR *pInfo,
                                                     VkSubresourceLayout2KHR *pLayout) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkGetDeviceImageSubresourceLayoutKHR fn =
        validateFunction("vkGetDeviceImageSubresourceLayoutKHR", this->vkGetDeviceImageSubresourceLayoutKHR);
    fn(device, pInfo, pLayout);
#    else
    this->vkGetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);
#    endif
}
#endif
#if defined(VK_KHR_map_memory2)
VkResult DeviceTable::MapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkMapMemory2KHR fn = validateFunction("vkMapMemory2KHR", this->vkMapMemory2KHR);
    return fn(device, pMemoryMapInfo, ppData);
#    else
    return this->vkMapMemory2KHR(device, pMemoryMapInfo, ppData);
#    endif
}
#endif
#if defined(VK_KHR_map_memory2)
VkResult DeviceTable::UnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkUnmapMemory2KHR fn = validateFunction("vkUnmapMemory2KHR", this->vkUnmapMemory2KHR);
    return fn(device, pMemoryUnmapInfo);
#    else
    return this->vkUnmapMemory2KHR(device, pMemoryUnmapInfo);
#    endif
}
#endif
#if defined(VK_KHR_maintenance6)
void DeviceTable::CmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer,
                                            const VkBindDescriptorSetsInfoKHR *pBindDescriptorSetsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdBindDescriptorSets2KHR fn =
        validateFunction("vkCmdBindDescriptorSets2KHR", this->vkCmdBindDescriptorSets2KHR);
    fn(commandBuffer, pBindDescriptorSetsInfo);
#    else
    this->vkCmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);
#    endif
}
#endif
#if defined(VK_KHR_maintenance6)
void DeviceTable::CmdPushConstants2KHR(VkCommandBuffer commandBuffer,
                                       const VkPushConstantsInfoKHR *pPushConstantsInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushConstants2KHR fn = validateFunction("vkCmdPushConstants2KHR", this->vkCmdPushConstants2KHR);
    fn(commandBuffer, pPushConstantsInfo);
#    else
    this->vkCmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);
#    endif
}
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor))
void DeviceTable::CmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer,
                                           const VkPushDescriptorSetInfoKHR *pPushDescriptorSetInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSet2KHR fn =
        validateFunction("vkCmdPushDescriptorSet2KHR", this->vkCmdPushDescriptorSet2KHR);
    fn(commandBuffer, pPushDescriptorSetInfo);
#    else
    this->vkCmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);
#    endif
}
#endif
#if (defined(VK_KHR_maintenance6) && defined(VK_KHR_push_descriptor))
void DeviceTable::CmdPushDescriptorSetWithTemplate2KHR(
    VkCommandBuffer commandBuffer,
    const VkPushDescriptorSetWithTemplateInfoKHR *pPushDescriptorSetWithTemplateInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdPushDescriptorSetWithTemplate2KHR fn =
        validateFunction("vkCmdPushDescriptorSetWithTemplate2KHR", this->vkCmdPushDescriptorSetWithTemplate2KHR);
    fn(commandBuffer, pPushDescriptorSetWithTemplateInfo);
#    else
    this->vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer, pPushDescriptorSetWithTemplateInfo);
#    endif
}
#endif
#if defined(VK_KHR_dynamic_rendering_local_read)
void DeviceTable::CmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer,
                                                        const VkRenderingAttachmentLocationInfoKHR *pLocationInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRenderingAttachmentLocationsKHR fn =
        validateFunction("vkCmdSetRenderingAttachmentLocationsKHR", this->vkCmdSetRenderingAttachmentLocationsKHR);
    fn(commandBuffer, pLocationInfo);
#    else
    this->vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);
#    endif
}
#endif
#if defined(VK_KHR_dynamic_rendering_local_read)
void DeviceTable::CmdSetRenderingInputAttachmentIndicesKHR(
    VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR *pInputAttachmentIndexInfo) const
{
#    ifdef TKIT_ENABLE_ASSERTS
    static PFN_vkCmdSetRenderingInputAttachmentIndicesKHR fn = validateFunction(
        "vkCmdSetRenderingInputAttachmentIndicesKHR", this->vkCmdSetRenderingInputAttachmentIndicesKHR);
    fn(commandBuffer, pInputAttachmentIndexInfo);
#    else
    this->vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer, pInputAttachmentIndexInfo);
#    endif
}
#endif
} // namespace VKit::Vulkan
