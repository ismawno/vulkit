cmake_minimum_required(VERSION 3.16...3.31)
project(vulkit-root)

# Set the C++ standard to C++20
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(APPLE)
  set(CMAKE_MACOSX_RPATH ON)
endif()

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;Dist")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_BUILD_TYPE
    "Debug"
    CACHE STRING "")

set(VULKIT_ENABLE_INSTANCE
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_PHYSICAL_DEVICE
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_LOGICAL_DEVICE
    OFF
    CACHE BOOL "")

set(VULKIT_ENABLE_ALLOCATOR
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_BUFFER
    OFF
    CACHE BOOL "")

set(VULKIT_ENABLE_DESCRIPTORS
    OFF
    CACHE BOOL "")

set(VULKIT_ENABLE_SHADERS
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_PIPELINE_LAYOUT
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_PIPELINE_JOB
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_GRAPHICS_PIPELINE
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_COMPUTE_PIPELINE
    OFF
    CACHE BOOL "")

set(VULKIT_ENABLE_COMMAND_POOL
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_IMAGES
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_RENDER_PASS
    OFF
    CACHE BOOL "")
set(VULKIT_ENABLE_SWAP_CHAIN
    OFF
    CACHE BOOL "")

set(VULKIT_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})

# Compiler flags, linker flags etcetera, those should all be handled when making
# available the toolkit library through the global CMAKE flag variables
add_subdirectory(vulkit)
